patch-package
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/LICENSE
+++ /dev/null
@@ -1,22 +0,0 @@
-The MIT License (MIT)
-
-Copyright (c) 2015 Artem S Vybornov
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
-
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/README.md
+++ /dev/null
@@ -1,77 +0,0 @@
-webcrypto-shim.js
-=================
-
-[Web Cryptography API](www.w3.org/TR/WebCryptoAPI/) shim for legacy browsers.
-
-Quick start with _Bower_
-------------------------
-
-Install the package
-
-```sh
-$ bower install webcrypto-shim
-```
-
-and link scripts into your html code
-
-```html
-<script src="bower_components/promiz/promiz.js"></script>
-<script src="bower_components/webcrypto-shim/webcrypto-shim.js"></script>
-```
-
-Now you can use webcrypto api through the `window.crypto` and `window.crypto.subtle` objects.
-
-Note that _IE11_ lacks support of `Promise`-s and requires _promiz.js_ to work properly. You can replace _promiz.js_ with any _Promise/A+_-compatible implementation.
-
-Supported browsers
-------------------
-
-The library is targeted to fix these browsers having prefixed and buggy webcrypto api implementations:
-* _Internet Explorer 11_, _Mobile Internet Explorer 11_,
-* _Safari 8+_, _iOS Safari 8+_.
-
-These browsers have unprefixed and conforming webcrypto api implementations, so no need in shim:
-* _Chrome 43+_, _Chrome for Android 44+_,
-* _Opera 24+_,
-* _Firefox 34+_,
-* _Edge 12+_.
-
-Crossbrowser support of algorithms & operations
------------------------------------------------
-
-* **SHA-256**, **SHA-384**: `digest`
-
-* **HMAC**: `sign`, `verify`, `generateKey`, `importKey`, `exportKey`
-  * with _hash_ **SHA-1**, **SHA-256**, **SHA-384**
-
-* **AES-CBC**: `encrypt`, `decrypt`, `generateKey`, `importKey`, `exportKey`, `wrapKey`, `unwrapKey`
-  * _TODO_ tests
-
-* **AES-KW**: `generateKey`, `importKey`, `exportKey`, `wrapKey`, `unwrapKey`
-  * _TODO_ tests
-
-* **RSASSA-PKCS1-v1\_5**: `sign`, `verify`, `generateKey`, `importKey`, `exportKey`
-  * with _hash_ **SHA-256**, **SHA-384**
-  * and _modulusLength_ at least 2048 bits
-
-* **RSA-OAEP**: `encrypt`, `decrypt`, `generateKey`, `importKey`, `exportKey`, `wrapKey`, `unwrapKey`
-  * with _hash_ **SHA-1**
-  * and _modulusLength_ at least 2048 bits
-  * _FIXME_ only `"jwk"` format for wrapped/unwrapped keys
-
-Known limitations
------------------
-
-`deriveKey`, `deriveBits` are not supported under _IE11_ and _Safari_  since there is no implementation of any algorithm providing key derivation.
-
-Under _IE11_ exception is thrown in case of empty input data since _IE11_ silently discards empty data and leaves returned `Promise` object never resolved nor rejected.
-
-Other browsers support
-----------------------
-
-See https://vibornoff.github.io/webcrypto-examples/index.html
-
-Sponsored by
-------------
-
-[BrowserStack](https://browserstack.com) â€” automated & manual crossbrowser testing solution.
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/index.html
+++ /dev/null
@@ -1,31 +0,0 @@
-<!doctype html>
-<html>
-    <head>
-        <meta charset="UTF-8">
-        <meta http-equiv="X-UA-Compatible" content="IE=edge">
-        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jasmine/2.3.4/jasmine.css">
-        <script src="https://cdnjs.cloudflare.com/ajax/libs/jasmine/2.3.4/jasmine.js"></script>
-        <script src="https://cdnjs.cloudflare.com/ajax/libs/jasmine/2.3.4/jasmine-html.js"></script>
-        <script src="https://cdnjs.cloudflare.com/ajax/libs/jasmine/2.3.4/boot.js"></script>
-    </head>
-    <body>
-        <script src="https://cdnjs.cloudflare.com/ajax/libs/promiz/1.0.4/promiz.js"></script>
-        <script src="webcrypto-shim.js"></script>
-        <script src="test/util.js"></script>
-        <script src="test/crypto.js"></script>
-        <script src="test/alg/sha-1.js"></script>
-        <script src="test/alg/sha-256.js"></script>
-        <script src="test/alg/sha-384.js"></script>
-        <script src="test/alg/sha-512.js"></script>
-        <script src="test/alg/hmac_sha-1.js"></script>
-        <script src="test/alg/hmac_sha-256.js"></script>
-        <script src="test/alg/hmac_sha-384.js"></script>
-        <script src="test/alg/hmac_sha-512.js"></script>
-        <script src="test/alg/aes-cbc.js"></script>
-        <script src="test/alg/aes-gcm.js"></script>
-        <script src="test/alg/rsassa-pkcs1_sha-1.js"></script>
-        <script src="test/alg/rsassa-pkcs1_sha-256.js"></script>
-        <script src="test/alg/rsa-oaep_sha-1.js"></script>
-        <script src="test/alg/rsa-oaep_sha-256.js"></script>
-    </body>
-</html>
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/aes-cbc.js
+++ /dev/null
@@ -1,73 +0,0 @@
-describe( 'AES-CBC' , function () {
-    var alg = { name: 'AES-CBC', length: 256 };
-    var key;
-
-    var genKeyComplete = crypto.subtle.generateKey( alg, true, [ 'encrypt', 'decrypt' ] )
-            .then( function ( res ) {
-                key = res;
-            });
-
-    it( "generateKey", function ( done ) {
-        genKeyComplete
-            .then( function () {
-                expect(key).toBeDefined();
-                expect(key instanceof CryptoKey).toBe(true);
-                expect(key.type).toBe('secret');
-                expect(key.extractable).toBe(true);
-                expect(key.algorithm).toEqual( normalizeAlg(alg) );
-            })
-            .catch(fail)
-            .then(done);
-    });
-
-    it( "encrypt / decrypt", function ( done ) {
-        genKeyComplete
-            .then( function () {
-                return crypto.subtle.encrypt( extend( alg, { iv: new Uint8Array(16) } ), key, new Uint8Array(16) )
-            })
-            .then( function ( res ) {
-                expect(res).toEqual(jasmine.any(ArrayBuffer));
-                expect(res.byteLength).toBe(32);
-
-                return crypto.subtle.decrypt( extend( alg, { iv: new Uint8Array(16) } ), key, res )
-            })
-            .then( function ( res ) {
-                expect(res).toEqual(jasmine.any(ArrayBuffer));
-                expect(res.byteLength).toBe(16);
-            })
-            .catch(fail)
-            .then(done);
-    });
-
-    it( 'wrapKey / unwrapKey', function ( done ) {
-        var keyAlg = { name: 'AES-CBC', length: 128 };
-            wrapAlg = { name: 'AES-CBC', length: 128 };
-
-        var wrapParam = extend( wrapAlg, { iv: new Uint8Array(16) } );
-
-        Promise.all([
-            crypto.subtle.generateKey( keyAlg, true, [ 'encrypt' ] ),
-            crypto.subtle.generateKey( wrapAlg, false, [ 'decrypt', 'wrapKey', 'unwrapKey' ] )
-        ])
-        .then( function ( keys ) {
-            return crypto.subtle
-                .wrapKey( 'raw', keys[0], keys[1], wrapParam )
-                .then( function ( wrap ) {
-                    return Promise.all([
-                        crypto.subtle.exportKey( 'raw', keys[0] ),
-                        crypto.subtle.decrypt( wrapParam, keys[1], wrap ),
-                        crypto.subtle.unwrapKey( 'raw', wrap, keys[1], wrapParam, keyAlg, true, [ 'encrypt' ] )
-                            .then( function ( res ) {
-                                return crypto.subtle.exportKey( 'raw', res );
-                            }),
-                    ]);
-                })
-        })
-        .then( function ( res ) {
-            expect( new Uint8Array( res[0] ) ).toEqual( new Uint8Array( res[1] ) );
-            expect( new Uint8Array( res[0] ) ).toEqual( new Uint8Array( res[2] ) );
-        })
-        .catch(fail)
-        .then(done);
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/aes-gcm.js
+++ /dev/null
@@ -1,40 +0,0 @@
-describe( 'AES-GCM' , function () {
-    var alg = { name: 'AES-GCM', length: 256 };
-    var key;
-
-    var genKeyComplete = crypto.subtle.generateKey( alg, true, [ 'encrypt', 'decrypt' ] )
-            .then( function ( res ) {
-                key = res;
-            });
-
-    it( "generateKey", function ( done ) {
-        genKeyComplete
-            .then( function () {
-                expect(key).toBeDefined();
-                expect(key.type).toBe('secret');
-                expect(key.extractable).toBe(true);
-                expect(key.algorithm).toEqual( normalizeAlg(alg) );
-            })
-            .catch(fail)
-            .then(done);
-    });
-
-    it( "encrypt and then decrypt", function ( done ) {
-        genKeyComplete
-            .then( function () {
-                return crypto.subtle.encrypt( extend( alg, { iv: new Uint8Array(12), tagLength: 128 } ), key, new Uint8Array(16) )
-            })
-            .then( function ( res ) {
-                expect(res).toEqual(jasmine.any(ArrayBuffer));
-                expect(res.byteLength).toBe(32);
-
-                return crypto.subtle.decrypt( extend( alg, { iv: new Uint8Array(12), tagLength: 128 } ), key, res )
-            })
-            .then( function ( res ) {
-                expect(res).toEqual(jasmine.any(ArrayBuffer));
-                expect(res.byteLength).toBe(16);
-            })
-            .catch(fail)
-            .then(done);
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/hmac_sha-1.js
+++ /dev/null
@@ -1,335 +0,0 @@
-describe( 'HMAC_SHA-1', function () {
-    var alg = { name: 'HMAC', hash: 'SHA-1' },
-        jwkAlg = 'HS1',
-        bs = 512;
-
-    describe( "generateKey", function () {
-        it( "extractable", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 128 } ),
-                keyExt = true,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 128 } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable, w/ omited 'length' parameter", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( alg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable, w/ 'length' parameter not a multiple of 8", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 137 } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "w/ sign-only key usage", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "w/ verify-only key usage", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-    });
-
-    describe( "importKey", function () {
-        var vectors = [
-            { key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "non-extractable",
-              key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "key length is't a multiple of 8",
-              key: "bits",
-              len: 31 },
-            { comment: "sign-only",
-              key: "qwerty",
-              use: [ 'sign' ] },
-            { comment: "verify-only",
-              key: "verify-only",
-              use: [ 'verify' ] },
-            { comment: "160-bit key",
-              key: "0123456789abcdefghij",
-              use: [ 'verify' ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: v.len || 8 * v.key.length } ),
-                keyBytes = s2b(v.key),
-                keyJwk = { kty: 'oct', alg: jwkAlg, ext: v.ext || true, key_ops: v.use || [ 'sign', 'verify' ],
-                           k: btoa(v.key).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_') };
-
-            it( "'" + v.key + "' as 'raw' ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes.buffer, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'raw' Uint8Array" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'jwk' JsonWebKey" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'jwk', keyJwk, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "exportKey", function () {
-        var vectors = [
-            { key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "key length is't a multiple of 8",
-              key: "bits",
-              len: 31 },
-            { comment: "sign-only",
-              key: "qwerty",
-              use: [ 'sign' ] },
-            { comment: "verify-only",
-              key: "verify-only",
-              use: [ 'verify' ] },
-            { comment: "160-bit key",
-              key: "0123456789abcdefghij",
-              use: [ 'verify' ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b(v.key),
-                keyJwk = { kty: 'oct', alg: jwkAlg, ext: true, key_ops: v.use || [ 'sign', 'verify' ],
-                           k: btoa(v.key).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_') };
-
-            it( "'" + v.key + "' as 'raw' ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.exportKey( 'raw', key )
-                    })
-                    .then( function ( keyData ) {
-                        expect(keyData).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2s(keyData) ).toEqual(v.key);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'jwk' JsonWebKey" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.exportKey( 'jwk', key )
-                    })
-                    .then( function ( jwk ) {
-                        expect(jwk).toEqual(jasmine.any(Object));
-                        expect(jwk).toEqual(keyJwk);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "sign", function () {
-        var vectors = [
-            { key: "test",
-              text: "",
-              mac: "fc85087452696e5bcbe3b7a71fde00e320af2cca" },
-            { key: "test",
-              text: "hmac",
-              mac: "2642b744d69b90c320b6d929f16f10408c5ebb13" },
-            { key: "test",
-              text: "Hmac",
-              mac: "8404861d13420ae01368f4f63cc8b45c1e35d9eb" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!",
-              text: "TestTestTest",
-              mac: "eac8bc37de470cbeb980fea9cebfa729dccbae46" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!\0",
-              text: "TestTestTest",
-              mac: "eac8bc37de470cbeb980fea9cebfa729dccbae46" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!\0\0",
-              text: "TestTestTest",
-              mac: "32534228e53ff25a0c475acee93577afaf21e544" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b( v.key ),
-                textBytes = s2b( v.text );
-
-            it( "'" + v.text + "' as ArrayBuffer w/ key '" + v.key + "'", function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.sign( alg, key, textBytes.buffer )
-                    })
-                    .then( function ( mac ) {
-                        expect(mac).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2x(mac) ).toEqual(v.mac);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.text + "' as Uint8Array w/ key '" + v.key + "'", function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.sign( alg, key, textBytes )
-                    })
-                    .then( function ( mac ) {
-                        expect(mac).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2x(mac) ).toEqual(v.mac);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "verify", function () {
-        var vectors = [
-            { key: "test",
-              text: "",
-              mac: "fc85087452696e5bcbe3b7a71fde00e320af2cca" },
-            { key: "test",
-              text: "hmac",
-              mac: "2642b744d69b90c320b6d929f16f10408c5ebb13" },
-            { key: "test",
-              text: "Hmac",
-              mac: "8404861d13420ae01368f4f63cc8b45c1e35d9eb" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!",
-              text: "TestTestTest",
-              mac: "eac8bc37de470cbeb980fea9cebfa729dccbae46" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!\0",
-              text: "TestTestTest",
-              mac: "eac8bc37de470cbeb980fea9cebfa729dccbae46" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!\0\0",
-              text: "TestTestTest",
-              mac: "32534228e53ff25a0c475acee93577afaf21e544" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b( v.key ),
-                textBytes = s2b( v.text ),
-                macBytes = x2b( v.mac );
-
-            it( "'" + v.text + "' w/ key '" + v.key + "' to match '" + v.mac + "' as ArrayBuffer", function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.verify( alg, key, macBytes.buffer, textBytes )
-                    })
-                    .then( function ( valid ) {
-                        expect(valid).toBe(true);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.text + "' w/ key '" + v.key + "' to match '" + v.mac + "' as Uint8Array", function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.verify( alg, key, macBytes, textBytes )
-                    })
-                    .then( function ( valid ) {
-                        expect(valid).toBe(true);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/hmac_sha-256.js
+++ /dev/null
@@ -1,335 +0,0 @@
-describe( 'HMAC_SHA-256', function () {
-    var alg = { name: 'HMAC', hash: 'SHA-256' },
-        jwkAlg = 'HS256',
-        bs = 512;
-
-    describe( "generateKey", function () {
-        it( "extractable", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 128 } ),
-                keyExt = true,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 128 } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable, w/ omited 'length' parameter", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( alg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable, w/ 'length' parameter not a multiple of 8", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 137 } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "w/ sign-only key usage", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "w/ verify-only key usage", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-    });
-
-    describe( "importKey", function () {
-        var vectors = [
-            { key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "non-extractable",
-              key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "key length is't a multiple of 8",
-              key: "bits",
-              len: 31 },
-            { comment: "sign-only",
-              key: "qwerty",
-              use: [ 'sign' ] },
-            { comment: "verify-only",
-              key: "verify-only",
-              use: [ 'verify' ] },
-            { comment: "256-bit key",
-              key: "0123456789abcdefghijklmnopqrstuv",
-              use: [ 'verify' ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: v.len || 8 * v.key.length } ),
-                keyBytes = s2b(v.key),
-                keyJwk = { kty: 'oct', alg: jwkAlg, ext: v.ext || true, key_ops: v.use || [ 'sign', 'verify' ],
-                           k: btoa(v.key).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_') };
-
-            it( "'" + v.key + "' as 'raw' ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes.buffer, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'raw' Uint8Array" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'jwk' JsonWebKey" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'jwk', keyJwk, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "exportKey", function () {
-        var vectors = [
-            { key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "key length is't a multiple of 8",
-              key: "bits",
-              len: 31 },
-            { comment: "sign-only",
-              key: "qwerty",
-              use: [ 'sign' ] },
-            { comment: "verify-only",
-              key: "verify-only",
-              use: [ 'verify' ] },
-            { comment: "256-bit key",
-              key: "0123456789abcdefghijklmnopqrstuv",
-              use: [ 'verify' ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b(v.key),
-                keyJwk = { kty: 'oct', alg: jwkAlg, ext: true, key_ops: v.use || [ 'sign', 'verify' ],
-                           k: btoa(v.key).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_') };
-
-            it( "'" + v.key + "' as 'raw' ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.exportKey( 'raw', key )
-                    })
-                    .then( function ( keyData ) {
-                        expect(keyData).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2s(keyData) ).toEqual(v.key);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'jwk' JsonWebKey" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.exportKey( 'jwk', key )
-                    })
-                    .then( function ( jwk ) {
-                        expect(jwk).toEqual(jasmine.any(Object));
-                        expect(jwk).toEqual(keyJwk);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "sign", function () {
-        var vectors = [
-            { key: "test",
-              text: "",
-              mac: "ad71148c79f21ab9eec51ea5c7dd2b668792f7c0d3534ae66b22f71c61523fb3" },
-            { key: "test",
-              text: "hmac",
-              mac: "01dd1a4c0ecb4065ed3aa19bb32feb60990c7acb60a8b8bd0826234685289c3f" },
-            { key: "test",
-              text: "Hmac",
-              mac: "c7f986f73c3410ae413c345f94f2cd15caf55ac3f40021f786911229bd756750" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!",
-              text: "TestTestTest",
-              mac: "3772b340f0c51e541b83ef7ee93bc01ae7d9ac321234582905760cd5385b34b3" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!\0",
-              text: "TestTestTest",
-              mac: "3772b340f0c51e541b83ef7ee93bc01ae7d9ac321234582905760cd5385b34b3" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!\0\0",
-              text: "TestTestTest",
-              mac: "775ee0b09ea869a637d922194186e73bb26ed7699848447ef0e93b17990af865" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b( v.key ),
-                textBytes = s2b( v.text );
-
-            it( "'" + v.text + "' as ArrayBuffer w/ key '" + v.key + "'" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.sign( alg, key, textBytes.buffer )
-                    })
-                    .then( function ( mac ) {
-                        expect(mac).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2x(mac) ).toEqual(v.mac);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.text + "' as Uint8Array w/ key '" + v.key + "'" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.sign( alg, key, textBytes )
-                    })
-                    .then( function ( mac ) {
-                        expect(mac).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2x(mac) ).toEqual(v.mac);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "verify", function () {
-        var vectors = [
-            { key: "test",
-              text: "",
-              mac: "ad71148c79f21ab9eec51ea5c7dd2b668792f7c0d3534ae66b22f71c61523fb3" },
-            { key: "test",
-              text: "hmac",
-              mac: "01dd1a4c0ecb4065ed3aa19bb32feb60990c7acb60a8b8bd0826234685289c3f" },
-            { key: "test",
-              text: "Hmac",
-              mac: "c7f986f73c3410ae413c345f94f2cd15caf55ac3f40021f786911229bd756750" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!",
-              text: "TestTestTest",
-              mac: "3772b340f0c51e541b83ef7ee93bc01ae7d9ac321234582905760cd5385b34b3" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!\0",
-              text: "TestTestTest",
-              mac: "3772b340f0c51e541b83ef7ee93bc01ae7d9ac321234582905760cd5385b34b3" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!\0\0",
-              text: "TestTestTest",
-              mac: "775ee0b09ea869a637d922194186e73bb26ed7699848447ef0e93b17990af865" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b( v.key ),
-                textBytes = s2b( v.text ),
-                macBytes = x2b( v.mac );
-
-            it( "'" + v.text + "' w/ key '" + v.key + "' to match '" + v.mac + "' as ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.verify( alg, key, macBytes.buffer, textBytes )
-                    })
-                    .then( function ( valid ) {
-                        expect(valid).toBe(true);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.text + "' w/ key '" + v.key + "' to match '" + v.mac + "' as Uint8Array" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.verify( alg, key, macBytes, textBytes )
-                    })
-                    .then( function ( valid ) {
-                        expect(valid).toBe(true);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/hmac_sha-384.js
+++ /dev/null
@@ -1,335 +0,0 @@
-describe( 'HMAC_SHA-384', function () {
-    var alg = { name: 'HMAC', hash: 'SHA-384' },
-        jwkAlg = 'HS384',
-        bs = 1024;
-
-    describe( "generateKey", function () {
-        it( "extractable", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 128 } ),
-                keyExt = true,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 128 } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable, w/ omited 'length' parameter", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( alg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable, w/ 'length' parameter not a multiple of 8", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 137 } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "w/ sign-only key usage", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "w/ verify-only key usage", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-    });
-
-    describe( "importKey", function () {
-        var vectors = [
-            { key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "non-extractable",
-              key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "key length is't a multiple of 8",
-              key: "bits",
-              len: 31 },
-            { comment: "sign-only",
-              key: "qwerty",
-              use: [ 'sign' ] },
-            { comment: "verify-only",
-              key: "verify-only",
-              use: [ 'verify' ] },
-            { comment: "512-bit key",
-              key: "0123456789abcdefghijklmnopqrstuv0123456789abcdefghijklmnopqrstuv",
-              use: [ 'verify' ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: v.len || 8 * v.key.length } ),
-                keyBytes = s2b(v.key),
-                keyJwk = { kty: 'oct', alg: jwkAlg, ext: v.ext || true, key_ops: v.use || [ 'sign', 'verify' ],
-                           k: btoa(v.key).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_') };
-
-            it( "'" + v.key + "' as 'raw' ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes.buffer, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'raw' Uint8Array" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'jwk' JsonWebKey" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'jwk', keyJwk, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "exportKey", function () {
-        var vectors = [
-            { key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "key length is't a multiple of 8",
-              key: "bits",
-              len: 31 },
-            { comment: "sign-only",
-              key: "qwerty",
-              use: [ 'sign' ] },
-            { comment: "verify-only",
-              key: "verify-only",
-              use: [ 'verify' ] },
-            { comment: "512-bit key",
-              key: "0123456789abcdefghijklmnopqrstuv0123456789abcdefghijklmnopqrstuv",
-              use: [ 'verify' ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b(v.key),
-                keyJwk = { kty: 'oct', alg: jwkAlg, ext: true, key_ops: v.use || [ 'sign', 'verify' ],
-                           k: btoa(v.key).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_') };
-
-            it( "'" + v.key + "' as 'raw' ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.exportKey( 'raw', key )
-                    })
-                    .then( function ( keyData ) {
-                        expect(keyData).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2s(keyData) ).toEqual(v.key);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'jwk' JsonWebKey" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.exportKey( 'jwk', key )
-                    })
-                    .then( function ( jwk ) {
-                        expect(jwk).toEqual(jasmine.any(Object));
-                        expect(jwk).toEqual(keyJwk);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "sign", function () {
-        var vectors = [
-            { key: "test",
-              text: "",
-              mac: "bda08a334994873233c844d24f0e7cf8c76c6e9feeb9c25ce97b9446e8efe3e06c261741ca21580360f20f1fd2190e0a" },
-            { key: "test",
-              text: "hmac",
-              mac: "f7ec591d04d764c4b1acad2bbfc171e82e60009bccf05ec3209d8b26854caafc66e40937d710efecdb0984084916d69f" },
-            { key: "test",
-              text: "Hmac",
-              mac: "4fe9f3ce02dc5543403c292e7e2664dd1f384716e5172c17c8eecfe86d992ebdd31fb516ff2b7474b01a0f063355e0b4" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!",
-              text: "TestTestTest",
-              mac: "5515a024ef5fabd241378c6431f5b71e5740abe1f1394f73ce4b44c0b47b96346423957c7b202d4ab500abd87525e855" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!\0",
-              text: "TestTestTest",
-              mac: "5515a024ef5fabd241378c6431f5b71e5740abe1f1394f73ce4b44c0b47b96346423957c7b202d4ab500abd87525e855" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!\0\0",
-              text: "TestTestTest",
-              mac: "8a5a5653192634bc14fb4e4ad1046d4dc038d936dd551b0f9c26aa221e062e36a79315a0ca722436b2bcb54763a51257" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b( v.key ),
-                textBytes = s2b( v.text );
-
-            it( "'" + v.text + "' as ArrayBuffer w/ key '" + v.key + "'" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.sign( alg, key, textBytes.buffer )
-                    })
-                    .then( function ( mac ) {
-                        expect(mac).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2x(mac) ).toEqual(v.mac);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.text + "' as Uint8Array w/ key '" + v.key + "'" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.sign( alg, key, textBytes )
-                    })
-                    .then( function ( mac ) {
-                        expect(mac).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2x(mac) ).toEqual(v.mac);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "verify", function () {
-        var vectors = [
-            { key: "test",
-              text: "",
-              mac: "bda08a334994873233c844d24f0e7cf8c76c6e9feeb9c25ce97b9446e8efe3e06c261741ca21580360f20f1fd2190e0a" },
-            { key: "test",
-              text: "hmac",
-              mac: "f7ec591d04d764c4b1acad2bbfc171e82e60009bccf05ec3209d8b26854caafc66e40937d710efecdb0984084916d69f" },
-            { key: "test",
-              text: "Hmac",
-              mac: "4fe9f3ce02dc5543403c292e7e2664dd1f384716e5172c17c8eecfe86d992ebdd31fb516ff2b7474b01a0f063355e0b4" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!",
-              text: "TestTestTest",
-              mac: "5515a024ef5fabd241378c6431f5b71e5740abe1f1394f73ce4b44c0b47b96346423957c7b202d4ab500abd87525e855" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!\0",
-              text: "TestTestTest",
-              mac: "5515a024ef5fabd241378c6431f5b71e5740abe1f1394f73ce4b44c0b47b96346423957c7b202d4ab500abd87525e855" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!\0\0",
-              text: "TestTestTest",
-              mac: "8a5a5653192634bc14fb4e4ad1046d4dc038d936dd551b0f9c26aa221e062e36a79315a0ca722436b2bcb54763a51257" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b( v.key ),
-                textBytes = s2b( v.text ),
-                macBytes = x2b( v.mac );
-
-            it( "'" + v.text + "' w/ key '" + v.key + "' to match '" + v.mac + "' as ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.verify( alg, key, macBytes.buffer, textBytes )
-                    })
-                    .then( function ( valid ) {
-                        expect(valid).toBe(true);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.text + "' w/ key '" + v.key + "' to match '" + v.mac + "' as Uint8Array" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.verify( alg, key, macBytes, textBytes )
-                    })
-                    .then( function ( valid ) {
-                        expect(valid).toBe(true);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/hmac_sha-512.js
+++ /dev/null
@@ -1,335 +0,0 @@
-describe( 'HMAC_SHA-512', function () {
-    var alg = { name: 'HMAC', hash: 'SHA-512' },
-        jwkAlg = 'HS512',
-        bs = 1024;
-
-    describe( "generateKey", function () {
-        it( "extractable", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 128 } ),
-                keyExt = true,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 128 } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable, w/ omited 'length' parameter", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( alg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "non-extractable, w/ 'length' parameter not a multiple of 8", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: 137 } ),
-                keyExt = false,
-                keyUse = [ 'sign', 'verify' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "w/ sign-only key usage", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-
-        it( "w/ verify-only key usage", function ( done ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: bs } ),
-                keyExt = false,
-                keyUse = [ 'sign' ];
-
-            crypto.subtle.generateKey( keyAlg, keyExt, keyUse )
-                .then( function ( key ) {
-                    expect(key).toEqual(jasmine.any(CryptoKey));
-                    expect(key.type).toBe('secret');
-                    expect(key.extractable).toBe(keyExt);
-                    expect(key.algorithm).toEqual(keyAlg);
-                    expect(key.usages).toEqual(keyUse);
-                })
-                .catch(fail)
-                .then(done);
-        });
-    });
-
-    describe( "importKey", function () {
-        var vectors = [
-            { key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "non-extractable",
-              key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "key length is't a multiple of 8",
-              key: "bits",
-              len: 31 },
-            { comment: "sign-only",
-              key: "qwerty",
-              use: [ 'sign' ] },
-            { comment: "verify-only",
-              key: "verify-only",
-              use: [ 'verify' ] },
-            { comment: "512-bit key",
-              key: "0123456789abcdefghijklmnopqrstuv0123456789abcdefghijklmnopqrstuv",
-              use: [ 'verify' ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyAlg = extend( normalizeAlg(alg), { length: v.len || 8 * v.key.length } ),
-                keyBytes = s2b(v.key),
-                keyJwk = { kty: 'oct', alg: jwkAlg, ext: v.ext || true, key_ops: v.use || [ 'sign', 'verify' ],
-                           k: btoa(v.key).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_') };
-
-            it( "'" + v.key + "' as 'raw' ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes.buffer, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'raw' Uint8Array" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'jwk' JsonWebKey" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'jwk', keyJwk, keyAlg, v.ext || true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        expect(key).toEqual(jasmine.any(CryptoKey));
-                        expect(key.type).toBe('secret');
-                        expect(key.algorithm).toEqual(keyAlg);
-                        expect(key.extractable).toBe(v.ext || true);
-                        expect(key.usages).toEqual(v.use || [ 'sign', 'verify' ] );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "exportKey", function () {
-        var vectors = [
-            { key: "test",
-              use: [ 'sign', 'verify' ] },
-            { comment: "key length is't a multiple of 8",
-              key: "bits",
-              len: 31 },
-            { comment: "sign-only",
-              key: "qwerty",
-              use: [ 'sign' ] },
-            { comment: "verify-only",
-              key: "verify-only",
-              use: [ 'verify' ] },
-            { comment: "512-bit key",
-              key: "0123456789abcdefghijklmnopqrstuv0123456789abcdefghijklmnopqrstuv",
-              use: [ 'verify' ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b(v.key),
-                keyJwk = { kty: 'oct', alg: jwkAlg, ext: true, key_ops: v.use || [ 'sign', 'verify' ],
-                           k: btoa(v.key).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_') };
-
-            it( "'" + v.key + "' as 'raw' ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.exportKey( 'raw', key )
-                    })
-                    .then( function ( keyData ) {
-                        expect(keyData).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2s(keyData) ).toEqual(v.key);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.key + "' as 'jwk' JsonWebKey" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, true, v.use || [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.exportKey( 'jwk', key )
-                    })
-                    .then( function ( jwk ) {
-                        expect(jwk).toEqual(jasmine.any(Object));
-                        expect(jwk).toEqual(keyJwk);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "sign", function () {
-        var vectors = [
-            { key: "test",
-              text: "",
-              mac: "01917bf85be0c998598a2332f75c2fe6f662c0900d4391123ca2bc61f073ede360af8f3afd6e5d3f28dff4b57cc22890aa7b7498cf441f32a6f6e78aca3cafe8" },
-            { key: "test",
-              text: "hmac",
-              mac: "64e6603dc2784ceecad217072e66deebe7293b1184e99124239ddbed2004dfae81829d52ccc16f0c3074a24e4bf838890f73abc357ee1a63f9914572d248d9c6" },
-            { key: "test",
-              text: "Hmac",
-              mac: "37be70d3db5ced641c5a2356d85811d204af8490bc96ed34b22205f01ab029f0752c3dfb8af89cf59f75bfa6ac894f9348b0ba46ea6f1383d1b9bff82f2f604e" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!",
-              text: "TestTestTest",
-              mac: "0b3a5ac27e3d9baf7ae009a40d2c72109c6cfcc124c669fc0a44dfc6f2c521532f3ad83a3a67ecafb7c035f7f24099bed67beb3f843ad2bf708a08bdced7b84f" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!\0",
-              text: "TestTestTest",
-              mac: "0b3a5ac27e3d9baf7ae009a40d2c72109c6cfcc124c669fc0a44dfc6f2c521532f3ad83a3a67ecafb7c035f7f24099bed67beb3f843ad2bf708a08bdced7b84f" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!\0\0",
-              text: "TestTestTest",
-              mac: "e1d54be191b2d73d995a0f107625dc47292ea70e24712343f2ddc0724e415155abcc3564c4971d32801e9edb6123dc8296d8e35b4047165f2145258a2a781e12" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b( v.key ),
-                textBytes = s2b( v.text );
-
-            it( "'" + v.text + "' as ArrayBuffer w/ key '" + v.key + "'" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.sign( alg, key, textBytes.buffer )
-                    })
-                    .then( function ( mac ) {
-                        expect(mac).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2x(mac) ).toEqual(v.mac);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.text + "' as Uint8Array w/ key '" + v.key + "'" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.sign( alg, key, textBytes )
-                    })
-                    .then( function ( mac ) {
-                        expect(mac).toEqual(jasmine.any(ArrayBuffer));
-                        expect( b2x(mac) ).toEqual(v.mac);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-
-    describe( "verify", function () {
-        var vectors = [
-            { key: "test",
-              text: "",
-              mac: "01917bf85be0c998598a2332f75c2fe6f662c0900d4391123ca2bc61f073ede360af8f3afd6e5d3f28dff4b57cc22890aa7b7498cf441f32a6f6e78aca3cafe8" },
-            { key: "test",
-              text: "hmac",
-              mac: "64e6603dc2784ceecad217072e66deebe7293b1184e99124239ddbed2004dfae81829d52ccc16f0c3074a24e4bf838890f73abc357ee1a63f9914572d248d9c6" },
-            { key: "test",
-              text: "Hmac",
-              mac: "37be70d3db5ced641c5a2356d85811d204af8490bc96ed34b22205f01ab029f0752c3dfb8af89cf59f75bfa6ac894f9348b0ba46ea6f1383d1b9bff82f2f604e" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!",
-              text: "TestTestTest",
-              mac: "0b3a5ac27e3d9baf7ae009a40d2c72109c6cfcc124c669fc0a44dfc6f2c521532f3ad83a3a67ecafb7c035f7f24099bed67beb3f843ad2bf708a08bdced7b84f" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!\0",
-              text: "TestTestTest",
-              mac: "0b3a5ac27e3d9baf7ae009a40d2c72109c6cfcc124c669fc0a44dfc6f2c521532f3ad83a3a67ecafb7c035f7f24099bed67beb3f843ad2bf708a08bdced7b84f" },
-            { key: "53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3tpw53cr3t!!!\0\0",
-              text: "TestTestTest",
-              mac: "e1d54be191b2d73d995a0f107625dc47292ea70e24712343f2ddc0724e415155abcc3564c4971d32801e9edb6123dc8296d8e35b4047165f2145258a2a781e12" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var keyBytes = s2b( v.key ),
-                textBytes = s2b( v.text ),
-                macBytes = x2b( v.mac );
-
-            it( "'" + v.text + "' w/ key '" + v.key + "' to match '" + v.mac + "' as ArrayBuffer" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.verify( alg, key, macBytes.buffer, textBytes )
-                    })
-                    .then( function ( valid ) {
-                        expect(valid).toBe(true);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "'" + v.text + "' w/ key '" + v.key + "' to match '" + v.mac + "' as Uint8Array" + ( v.comment ? ", " + v.comment : "" ), function ( done ) {
-                crypto.subtle.importKey( 'raw', keyBytes, alg, false, [ 'sign', 'verify' ] )
-                    .then( function ( key ) {
-                        return crypto.subtle.verify( alg, key, macBytes, textBytes )
-                    })
-                    .then( function ( valid ) {
-                        expect(valid).toBe(true);
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/rsa-oaep_sha-1.js
+++ /dev/null
@@ -1,384 +0,0 @@
-describe( 'RSA-OAEP_SHA-1', function () {
-    var alg = { name: 'RSA-OAEP', hash: 'SHA-1' },
-        pubUse = 'encrypt',
-        prvUse = 'decrypt',
-        jwkAlg = 'RSA-OAEP';
-
-    function skipModLen ( modLen ) {
-        return modLen > 2048;
-    }
-
-    describe( "generateKey", function () {
-        [ 1024, 2048, 3072, 4096 ].forEach( function ( modLen ) {
-            (skipModLen(modLen) ? xdescribe : describe)( modLen + " bits", function ( done ) {
-                var keyAlg = extend( normalizeAlg(alg), { modulusLength: modLen, publicExponent: x2b('10001') } );
-
-                var generateKeyComplete = new Promise( function ( res, rej ) {
-                        skipModLen(modLen) ? rej( new Error("Skipping large RSA moduli") )
-                                           : res( crypto.subtle.generateKey( keyAlg, true, [ prvUse, pubUse ] ) );
-                    });
-
-                var vectors = [
-                    { text: "" },
-                    { text: "Hello World!" },
-                ];
-
-                it( "generateKey", function ( done ) {
-                    generateKeyComplete
-                        .then( function ( keyPair ) {
-                            expect(keyPair).toBeDefined();
-
-                            expect(keyPair.publicKey).toEqual(jasmine.any(CryptoKey));
-                            expect(keyPair.publicKey.type).toBe('public');
-                            expect(keyPair.publicKey.algorithm).toEqual(keyAlg);
-                            expect(keyPair.publicKey.extractable).toBe(true);
-                            expect(keyPair.publicKey.usages).toEqual([pubUse]);
-
-                            expect(keyPair.privateKey).toEqual(jasmine.any(CryptoKey));
-                            expect(keyPair.privateKey.type).toBe('private');
-                            expect(keyPair.privateKey.algorithm).toEqual(keyAlg);
-                            expect(keyPair.privateKey.extractable).toBe(true);
-                            expect(keyPair.privateKey.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                }, 30000 );
-
-                describe( "exportKey", function () {
-                    it( "spki", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'spki', keyPair.publicKey );
-                            })
-                            .then( function ( spkiData ) {
-                                expect(spkiData).toEqual(jasmine.any(ArrayBuffer));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "pkcs8", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'pkcs8', keyPair.privateKey );
-                            })
-                            .then( function ( pkcs8Data ) {
-                                expect(pkcs8Data).toEqual(jasmine.any(ArrayBuffer));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "jwk publicKey", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'jwk', keyPair.publicKey );
-                            })
-                            .then( function ( jwkPubKey ) {
-                                expect(jwkPubKey).toEqual(jasmine.objectContaining( { 'kty': 'RSA', 'alg': jwkAlg, 'ext': true, 'key_ops': [pubUse] } ));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "jwk privateKey", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'jwk', keyPair.privateKey );
-                            })
-                            .then( function ( jwkPrvKey ) {
-                                expect(jwkPrvKey).toEqual(jasmine.objectContaining( { 'kty': 'RSA', 'alg': jwkAlg, 'ext': true, 'key_ops': [prvUse] } ));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-                });
-
-                describe( "encrypt", function () {
-                    vectors.forEach( function ( v ) {
-                        it( "'" + v.text + "' as ArrayBuffer", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.encrypt( alg, keyPair.publicKey, s2b(v.text).buffer );
-                                })
-                                .then( function ( ciphertext ) {
-                                    expect(ciphertext).toEqual( jasmine.any(ArrayBuffer) );
-                                    expect(ciphertext.byteLength).toBe(modLen>>3);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-
-                        it( "'" + v.text + "' as Uint8Array", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.encrypt( alg, keyPair.publicKey, s2b(v.text) );
-                                })
-                                .then( function ( ciphertext ) {
-                                    expect(ciphertext).toEqual( jasmine.any(ArrayBuffer) );
-                                    expect(ciphertext.byteLength).toBe(modLen>>3);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-                    });
-                });
-
-                describe( "decrypt", function () {
-                    vectors.forEach( function ( v ) {
-                        it( "'" + v.text + "'", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.encrypt( alg, keyPair.publicKey, s2b(v.text) )
-                                        .then( function ( ciphertext ) {
-                                            return crypto.subtle.decrypt( alg, keyPair.privateKey, ciphertext );
-                                        });
-                                })
-                                .then( function ( cleartext ) {
-                                    expect( b2s(cleartext) ).toBe(v.text);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-                    });
-                });
-            });
-        });
-    });
-
-    describe( "importKey", function () {
-        var vectors = [
-            { modLen: 1024,
-              spkiPubKey: 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDYamp78gOm8dSC7lgPB93/6FdYIWTnd1rCMhY5YvGw63T6gIyKkCS9Lr1OrKQf0D7I+OMuaV7MAF3XpLrOiYm3tTfv9LMAP+ZQ6UK6Oz00zlnNxr+VkptRfBia5qEfK2mjcxxvw/or9UZv9D69Lp1ClFCsFkXOl+FXJYcIoobi+QIDAQAB',
-              pkcsPrvKey: 'MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBANhqanvyA6bx1ILuWA8H3f/oV1ghZOd3WsIyFjli8bDrdPqAjIqQJL0uvU6spB/QPsj44y5pXswAXdekus6Jibe1N+/0swA/5lDpQro7PTTOWc3Gv5WSm1F8GJrmoR8raaNzHG/D+iv1Rm/0Pr0unUKUUKwWRc6X4VclhwiihuL5AgMBAAECgYEAseb41h7ipbASU/d+aAy9kAr9EjORcT2KXC00W8RcjmVgajSWU6meqe3sLOp6mLRliGwgxRxVkzmR6x09e19Q1zIM8qyHVL1hkVVcWcvPS0wd5Dc0FhpaXBeSiRu1Vkzk+jMCA60IBzobWvvuEqglOitqBEaLPJwTM/E6N2ddggECQQD4tYSi7goCW1b05o3O99oYN2584Ns3H3a92AawUgAyi9HkW7MeJdtvE5gQ+GVxP/iUIxpjgjksoA3p+0xEXJ+ZAkEA3sKL5BQB3ChOV7QJ8WIqButQ4qPO/0lg4MuJxqYDS9/2EhyFHOldKdbcmuFh8hJ+aQpcDChfvG+ngb+kTAv6YQJBAOSrAChNdCZ2lJzW3ctNVtitHojytJsZ8rLZzEyRGF1g8LplFWrCo96cxVPVDm/xwTtyivCy6p59Ck33H0g7YQECQEE/QrJfmdvegnP17COj2SOFsX9w86Sa3aF6fLSO09BZnT3Y1LSPNhaXNK647XN2L0idHDEDcmdDXREIDRupNoECQFCv/0EUecHxPXjRVg86aSUsvbCCkhuKoJCY7GpB7xJdza96oeAFmLUGrkMHeqKHzg3CWTxkLEkDyNnR36yMilA=',
-              jwkPubKey: {"alg":"RSA-OAEP","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"2Gpqe_IDpvHUgu5YDwfd_-hXWCFk53dawjIWOWLxsOt0-oCMipAkvS69TqykH9A-yPjjLmlezABd16S6zomJt7U37_SzAD_mUOlCujs9NM5Zzca_lZKbUXwYmuahHytpo3Mcb8P6K_VGb_Q-vS6dQpRQrBZFzpfhVyWHCKKG4vk"},
-              jwkPrvKey: {"alg":"RSA-OAEP","d":"seb41h7ipbASU_d-aAy9kAr9EjORcT2KXC00W8RcjmVgajSWU6meqe3sLOp6mLRliGwgxRxVkzmR6x09e19Q1zIM8qyHVL1hkVVcWcvPS0wd5Dc0FhpaXBeSiRu1Vkzk-jMCA60IBzobWvvuEqglOitqBEaLPJwTM_E6N2ddggE","dp":"5KsAKE10JnaUnNbdy01W2K0eiPK0mxnystnMTJEYXWDwumUVasKj3pzFU9UOb_HBO3KK8LLqnn0KTfcfSDthAQ","dq":"QT9Csl-Z296Cc_XsI6PZI4Wxf3DzpJrdoXp8tI7T0FmdPdjUtI82Fpc0rrjtc3YvSJ0cMQNyZ0NdEQgNG6k2gQ","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"2Gpqe_IDpvHUgu5YDwfd_-hXWCFk53dawjIWOWLxsOt0-oCMipAkvS69TqykH9A-yPjjLmlezABd16S6zomJt7U37_SzAD_mUOlCujs9NM5Zzca_lZKbUXwYmuahHytpo3Mcb8P6K_VGb_Q-vS6dQpRQrBZFzpfhVyWHCKKG4vk","p":"-LWEou4KAltW9OaNzvfaGDdufODbNx92vdgGsFIAMovR5FuzHiXbbxOYEPhlcT_4lCMaY4I5LKAN6ftMRFyfmQ","q":"3sKL5BQB3ChOV7QJ8WIqButQ4qPO_0lg4MuJxqYDS9_2EhyFHOldKdbcmuFh8hJ-aQpcDChfvG-ngb-kTAv6YQ","qi":"UK__QRR5wfE9eNFWDzppJSy9sIKSG4qgkJjsakHvEl3Nr3qh4AWYtQauQwd6oofODcJZPGQsSQPI2dHfrIyKUA"} },
-            { modLen: 2048,
-              spkiPubKey: 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw3bzCBUL8ZV1jwM4twWbtcAfihBMEVsjVwBxDcVnqKPgqNVtnoQAubd7QDVAIYsgXn2ozLwIxcJK4CY6NI4ihfVjaDGSZDDNuTgJK5Vb/N5+5uG/mGSvtak7jDpzfo6s2Az95U7HWcoxev49Zp+0XjIAgjiQBPh83sdj1/76LFJn1Hjv8aMD9WrSH1T4Sgpa8TbH8Y73rz+qqYdBdgoyMUPiFXwXTzM/PIbQc6KD8xRdt3J9wwk0gyH4rg9Lwk6fBQ8aQb6KoItXYaM/UqQawwVM3fAwcFTbZfDtEW8GkyMXtl65D6duYq8EsF+Hc52lnW3561eCiQ5GmBl8Db81ewIDAQAB',
-              pkcsPrvKey: 'MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDDdvMIFQvxlXWPAzi3BZu1wB+KEEwRWyNXAHENxWeoo+Co1W2ehAC5t3tANUAhiyBefajMvAjFwkrgJjo0jiKF9WNoMZJkMM25OAkrlVv83n7m4b+YZK+1qTuMOnN+jqzYDP3lTsdZyjF6/j1mn7ReMgCCOJAE+Hzex2PX/vosUmfUeO/xowP1atIfVPhKClrxNsfxjvevP6qph0F2CjIxQ+IVfBdPMz88htBzooPzFF23cn3DCTSDIfiuD0vCTp8FDxpBvoqgi1dhoz9SpBrDBUzd8DBwVNtl8O0RbwaTIxe2XrkPp25irwSwX4dznaWdbfnrV4KJDkaYGXwNvzV7AgMBAAECggEBAIMn4qVusef1uL8wkzLD0ZqgAsm6a8BNniX3xuRNrGONKuc+5uIxgucbBdmsoY6gcyTUPpq6JUzFNUa4f9/Z67JlWMGGWcter/vzbLvQ6buAdDhqDAyuqvRDTRCn++1UwQfrl8XxGXTXZmI4DG07BmUaOhsm5wRe1DMMKaO6lJV9vSOf/Q6M/51Elx8DSxo8riHtBysgi/i0wPoJL/CnAwxaOe7nes/nHwjhwgxdIVzIm81ub3q3WqcGtTNhUd0iHK56owEmynQjPyJpj8loEvp3liECm4v0tzzBfl3LoZR+puM6NM5M0lhGS5xFdpdWgdIlsifjJXL3bElGlXU8PAECgYEA7hLRavTGFovBVdmHf+tvcxVO43AkkPMj83rm4lFjfr2QwNEk93GCUz+2XYRU4ceYfpl7WuaUwX6sQhEp8hJzabZ0zX2cFZB7pLqtLLtw6kUTJTbdtcEv1VqibarjitTpxSVv+j4vB6/X2LBjWXWZ95kdoaBI9+X4KFRZpuod93sCgYEA0i7KAgHFKz8+2Fp9Yh9fk6XLTX7EvRVe6jPwxbr60sCBwZiIvKLvaPmUJn93MFk9rthTzB69RKWko5fzTxDfHZNA8uarOspAc4Um2wTUwEAhSzlqEO19wmtDiPsmaJJ5XM0P7Xx2FhZ+r5dmzo5Pob3IkwjRcWxsYSw7NX3gWgECgYEAos0biBh6nVBUlXB7yG4neHtJxx4Y40Zhf068NGeTskfPhQuAS/XDOUqIWsrzgLINBgXO5QppDyigg01ZccBMTC4JEbyjz9tNsgg2BDDptkomHXy3gGLrYurnyDbkAzw14CsJuAZuAsOsxvFX/wT8lOSP7sa9H0iTuoB0DkBq3aECgYEArJ5AyeUqSZpnwsiOsUeS92/yyHKUobYrfa2q0Ln/xZbU+mqL4mDuvwg65GNLQCoKvs5sA/g6+WYREUp6STVSCLgnX1aSynXQ+Q8iGj6dfEcvENjWg5CI+GOf06BwqvGhOtYvfpv5X6qZ4Rw3Eu1N+Ugksp1LZhvl5uisuAHpgAECgYB7x9OaYaqGaDv2LFHWH3gaEagv1OTxcJZu3cCJvDk+ihOs3x1g6szojEsbeD3wcdWmAc5xXEl8sjmbxu1oa1eRDuzoZryLuuw3SRM7uWt3Tp1WWWzOdQGp7a3FLM/DQ1iG/7woeGPjH1C1MR7B8KdqsurK13UjrjE6hY4N4H5MnA==',
-              jwkPubKey: {"alg":"RSA-OAEP","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"w3bzCBUL8ZV1jwM4twWbtcAfihBMEVsjVwBxDcVnqKPgqNVtnoQAubd7QDVAIYsgXn2ozLwIxcJK4CY6NI4ihfVjaDGSZDDNuTgJK5Vb_N5-5uG_mGSvtak7jDpzfo6s2Az95U7HWcoxev49Zp-0XjIAgjiQBPh83sdj1_76LFJn1Hjv8aMD9WrSH1T4Sgpa8TbH8Y73rz-qqYdBdgoyMUPiFXwXTzM_PIbQc6KD8xRdt3J9wwk0gyH4rg9Lwk6fBQ8aQb6KoItXYaM_UqQawwVM3fAwcFTbZfDtEW8GkyMXtl65D6duYq8EsF-Hc52lnW3561eCiQ5GmBl8Db81ew"},
-              jwkPrvKey: {"alg":"RSA-OAEP","d":"gyfipW6x5_W4vzCTMsPRmqACybprwE2eJffG5E2sY40q5z7m4jGC5xsF2ayhjqBzJNQ-mrolTMU1Rrh_39nrsmVYwYZZy16v-_Nsu9Dpu4B0OGoMDK6q9ENNEKf77VTBB-uXxfEZdNdmYjgMbTsGZRo6GybnBF7UMwwpo7qUlX29I5_9Doz_nUSXHwNLGjyuIe0HKyCL-LTA-gkv8KcDDFo57ud6z-cfCOHCDF0hXMibzW5verdapwa1M2FR3SIcrnqjASbKdCM_ImmPyWgS-neWIQKbi_S3PMF-XcuhlH6m4zo0zkzSWEZLnEV2l1aB0iWyJ-MlcvdsSUaVdTw8AQ","dp":"os0biBh6nVBUlXB7yG4neHtJxx4Y40Zhf068NGeTskfPhQuAS_XDOUqIWsrzgLINBgXO5QppDyigg01ZccBMTC4JEbyjz9tNsgg2BDDptkomHXy3gGLrYurnyDbkAzw14CsJuAZuAsOsxvFX_wT8lOSP7sa9H0iTuoB0DkBq3aE","dq":"rJ5AyeUqSZpnwsiOsUeS92_yyHKUobYrfa2q0Ln_xZbU-mqL4mDuvwg65GNLQCoKvs5sA_g6-WYREUp6STVSCLgnX1aSynXQ-Q8iGj6dfEcvENjWg5CI-GOf06BwqvGhOtYvfpv5X6qZ4Rw3Eu1N-Ugksp1LZhvl5uisuAHpgAE","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"w3bzCBUL8ZV1jwM4twWbtcAfihBMEVsjVwBxDcVnqKPgqNVtnoQAubd7QDVAIYsgXn2ozLwIxcJK4CY6NI4ihfVjaDGSZDDNuTgJK5Vb_N5-5uG_mGSvtak7jDpzfo6s2Az95U7HWcoxev49Zp-0XjIAgjiQBPh83sdj1_76LFJn1Hjv8aMD9WrSH1T4Sgpa8TbH8Y73rz-qqYdBdgoyMUPiFXwXTzM_PIbQc6KD8xRdt3J9wwk0gyH4rg9Lwk6fBQ8aQb6KoItXYaM_UqQawwVM3fAwcFTbZfDtEW8GkyMXtl65D6duYq8EsF-Hc52lnW3561eCiQ5GmBl8Db81ew","p":"7hLRavTGFovBVdmHf-tvcxVO43AkkPMj83rm4lFjfr2QwNEk93GCUz-2XYRU4ceYfpl7WuaUwX6sQhEp8hJzabZ0zX2cFZB7pLqtLLtw6kUTJTbdtcEv1VqibarjitTpxSVv-j4vB6_X2LBjWXWZ95kdoaBI9-X4KFRZpuod93s","q":"0i7KAgHFKz8-2Fp9Yh9fk6XLTX7EvRVe6jPwxbr60sCBwZiIvKLvaPmUJn93MFk9rthTzB69RKWko5fzTxDfHZNA8uarOspAc4Um2wTUwEAhSzlqEO19wmtDiPsmaJJ5XM0P7Xx2FhZ-r5dmzo5Pob3IkwjRcWxsYSw7NX3gWgE","qi":"e8fTmmGqhmg79ixR1h94GhGoL9Tk8XCWbt3Aibw5PooTrN8dYOrM6IxLG3g98HHVpgHOcVxJfLI5m8btaGtXkQ7s6Ga8i7rsN0kTO7lrd06dVllsznUBqe2txSzPw0NYhv-8KHhj4x9QtTEewfCnarLqytd1I64xOoWODeB-TJw"} },
-            { modLen: 3072,
-              spkiPubKey: 'MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAvLGhydJcuMXAzNBhpcn/O7Tcx+Ur5hUSD2QPX1pkP2Oz63tVP2jMjjw8+yoY/xgOcx/ty3McDEyalIvLA0xzh5oOe7zlaB3nPWUDkIFKirzNWBmnqCX9z3aufw7Nwyav3NG3r1imnaSX2M2KWiHUmjW5n4UKvlpLPaWaIp18Lbp1Z0QKIYyaO+9uBdyKoG/17IpFHmt+IBwUp8WtQk1k+u875Dq8ZBFlIDlhmgRSjrsxHn8uWr++VxuhlA0Dw8NcrXJVPTMI9PatqkHAnwxk8lECL3/oCADmzJIqNG4hf3NVp5W+w+N4XU1/mWD/dfnkc0EhZZARq1jltrXdon1DzlBWXrVh20gzUbg/tXY1IgJ4Ff3Ij7iv2PUj7GTkPwTSk11kM2WnvcSlaQaHElod98UNnyv8tW95861QWLuRddaExvLF+thYtJZtws3YxxnhMlwpr6MW5dhYRb7WBXgYyyaoOg4opOXKIh3pali+dp6aDo7JU/PJ2I8mlchSF+uJAgMBAAE=',
-              pkcsPrvKey: 'MIIG/AIBADANBgkqhkiG9w0BAQEFAASCBuYwggbiAgEAAoIBgQC8saHJ0ly4xcDM0GGlyf87tNzH5SvmFRIPZA9fWmQ/Y7Pre1U/aMyOPDz7Khj/GA5zH+3LcxwMTJqUi8sDTHOHmg57vOVoHec9ZQOQgUqKvM1YGaeoJf3Pdq5/Ds3DJq/c0bevWKadpJfYzYpaIdSaNbmfhQq+Wks9pZoinXwtunVnRAohjJo7724F3Iqgb/XsikUea34gHBSnxa1CTWT67zvkOrxkEWUgOWGaBFKOuzEefy5av75XG6GUDQPDw1ytclU9Mwj09q2qQcCfDGTyUQIvf+gIAObMkio0biF/c1Wnlb7D43hdTX+ZYP91+eRzQSFlkBGrWOW2td2ifUPOUFZetWHbSDNRuD+1djUiAngV/ciPuK/Y9SPsZOQ/BNKTXWQzZae9xKVpBocSWh33xQ2fK/y1b3nzrVBYu5F11oTG8sX62Fi0lm3CzdjHGeEyXCmvoxbl2FhFvtYFeBjLJqg6Diik5coiHelqWL52npoOjslT88nYjyaVyFIX64kCAwEAAQKCAYATickY3sFfGIroKkOSKSJWilm6EQ7EmjXuhgvZccCjl61Pmsuu7ykPKUmfMDK6Z0FHxmyW/mpPE7eF3hu9UbM8vUT2pw6SA1aoUsdVtS2ExBv3HWDw1k47pyxWV7ASnvTixoxgiatm814NwuqqfopHFX0M+XetUigsT/Nv1iK/kWkKsk7iPm7R+e7IiJeKGU27mm2hwruik4XIAX35OY5VNWRcM4DCU9LGzWo/ymbKBLQHVl/0YZpR5riKXfaf1KCcZnPzMPPOk2exxvzvK2SW9rMcoOuxfLH04O4d7QkFJPgQiM4dX37zD9BpDx1Jyiw7M6IavVoNPSDUf+Y2Q49Bl2C5EnDAxmn4eKEuVyJ/93NV05ZEUFe2NFgdKLnu33at8CQ8EdpO7Q3NHWCiQQAVRvEjMAk3+ZoC5qHbFfBlXfH3ZrIPMpeyJULf6aqRBGOLY5D1p3Fiw7pH18JnyzkO//UXeSNRIArkh/3ApQP7fiQdsK0bHlEvYc7hngMnXokCgcEA7WD/lMSRccxgpgPXctpvFqXRl7PA2k5Z8yVbwMou4qHP1vu0F1v7NWzzjqouoCIb6v+xpmgFu0OxGhQzDL0gIKiH/4svsXGqdTYZfIwswx+Ng4OhKWmKvk4f6ZuqyQhX/7p7Jhh8cqH5BIU4BGlb54y6XGMQe74LTfCL/sujVU/Qo7R02cKjeG6x+guNre9thOaOR5KLlR/B3UV4ABdbOKzPguRdjvKQ+nnGk2+JKReh1JbV2NcSdw/4DFZ4LGNrAoHBAMt+8w8VjLtBAD1oIrwQnu1GdkIV7jLjibJPCrQbMpZBN75PZc9mzp7BtUeeqKl/u6dr3YL34Ule13IgPmJgyhOQVFpeHJ1OnzyIbLsgxv1oVlddjhcQcgq6/21dSmBuMrIplMRWqVcUnMSooKEUqMb+0S5ehhD+sWa2eeSyTrqBcoV0Ifo0J+PrL0DHVJRDZ4nhfJO8E7hYui/2ABpxO1aH4G7MbrnGZ9YfVZfOZma5AePtIb06R/QOwI2i3UNd2wKBwF/ok/sYnKc860PIQ5FdHgspfhBsCRxrEb7CtlqjlePtetsioXXarRm95n4a1nHOtjbxjmZsmvw5cmHWDXY1J7jqPuCJ7QAlq7hl3lBLFn7Tzcp4MXJY+TzAtfYd9hf5bgyd3MnclNOAC+u+o45svzxDyLwxLmTAuTKJYRbWUizS7bpm29tr3752AyTC7EB9f2N1/8B9PjZHOX3cZoqq5Sl18PWyrPZnnRoGf6vsIZ/fs3wAYXCWHRjL8+2QNkfA9wKBwHKvZj5/D6RM2tzAvqqs11S0HFvcTjVh5S2XvFmK5nSl5subpa5Aq3vvgcIOWdHFCjYt5VY1a0NVbyiDoYUCNYDXG6MeXRQOxlFwNY80xtD0J4zvTfATtaH0h5XUOOGl2W5tXslUafWIyV1QB88gfIpB/BQc84PKdqKDfqj0EMitwaQSsj93e2/JEQV6EWHJpyWe7f24xohjgPMcuiws2ptG0qa/Ejwi5ExZtnxqt213IOiasSQbH4gddEmemwKndwKBwEdHQtRsxtXCPY3yjCtUavltiuW7shIN2/2CyC2gaIVa73Jp8D2VM4mNJ1vyVTPydwNVxpjm/tZIHUxVDj1hbuWxjKyzaiNEdBIZT18GvwYW5+Gisxn8UXoDyAcKKsGkDWhgYny2QanTMYxHY3zVwKTBCWG9Mt1LwAUVUbZIiH6bpaxPmmanpYexC5rhXNVttZvUK7uv87/Ubsz5WvqK5eMfRyqhmRZQsmrBopie4gLZGXGiIpOedXrNirlGm5XB+Q==',
-              jwkPubKey: {"alg":"RSA-OAEP","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"vLGhydJcuMXAzNBhpcn_O7Tcx-Ur5hUSD2QPX1pkP2Oz63tVP2jMjjw8-yoY_xgOcx_ty3McDEyalIvLA0xzh5oOe7zlaB3nPWUDkIFKirzNWBmnqCX9z3aufw7Nwyav3NG3r1imnaSX2M2KWiHUmjW5n4UKvlpLPaWaIp18Lbp1Z0QKIYyaO-9uBdyKoG_17IpFHmt-IBwUp8WtQk1k-u875Dq8ZBFlIDlhmgRSjrsxHn8uWr--VxuhlA0Dw8NcrXJVPTMI9PatqkHAnwxk8lECL3_oCADmzJIqNG4hf3NVp5W-w-N4XU1_mWD_dfnkc0EhZZARq1jltrXdon1DzlBWXrVh20gzUbg_tXY1IgJ4Ff3Ij7iv2PUj7GTkPwTSk11kM2WnvcSlaQaHElod98UNnyv8tW95861QWLuRddaExvLF-thYtJZtws3YxxnhMlwpr6MW5dhYRb7WBXgYyyaoOg4opOXKIh3pali-dp6aDo7JU_PJ2I8mlchSF-uJ"},
-              jwkPrvKey: {"alg":"RSA-OAEP","d":"E4nJGN7BXxiK6CpDkikiVopZuhEOxJo17oYL2XHAo5etT5rLru8pDylJnzAyumdBR8Zslv5qTxO3hd4bvVGzPL1E9qcOkgNWqFLHVbUthMQb9x1g8NZOO6csVlewEp704saMYImrZvNeDcLqqn6KRxV9DPl3rVIoLE_zb9Yiv5FpCrJO4j5u0fnuyIiXihlNu5ptocK7opOFyAF9-TmOVTVkXDOAwlPSxs1qP8pmygS0B1Zf9GGaUea4il32n9SgnGZz8zDzzpNnscb87ytklvazHKDrsXyx9ODuHe0JBST4EIjOHV9-8w_QaQ8dScosOzOiGr1aDT0g1H_mNkOPQZdguRJwwMZp-HihLlcif_dzVdOWRFBXtjRYHSi57t92rfAkPBHaTu0NzR1gokEAFUbxIzAJN_maAuah2xXwZV3x92ayDzKXsiVC3-mqkQRji2OQ9adxYsO6R9fCZ8s5Dv_1F3kjUSAK5If9wKUD-34kHbCtGx5RL2HO4Z4DJ16J","dp":"X-iT-xicpzzrQ8hDkV0eCyl-EGwJHGsRvsK2WqOV4-162yKhddqtGb3mfhrWcc62NvGOZmya_DlyYdYNdjUnuOo-4IntACWruGXeUEsWftPNyngxclj5PMC19h32F_luDJ3cydyU04AL676jjmy_PEPIvDEuZMC5MolhFtZSLNLtumbb22vfvnYDJMLsQH1_Y3X_wH0-Nkc5fdxmiqrlKXXw9bKs9medGgZ_q-whn9-zfABhcJYdGMvz7ZA2R8D3","dq":"cq9mPn8PpEza3MC-qqzXVLQcW9xONWHlLZe8WYrmdKXmy5ulrkCre--Bwg5Z0cUKNi3lVjVrQ1VvKIOhhQI1gNcbox5dFA7GUXA1jzTG0PQnjO9N8BO1ofSHldQ44aXZbm1eyVRp9YjJXVAHzyB8ikH8FBzzg8p2ooN-qPQQyK3BpBKyP3d7b8kRBXoRYcmnJZ7t_bjGiGOA8xy6LCzam0bSpr8SPCLkTFm2fGq3bXcg6JqxJBsfiB10SZ6bAqd3","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"vLGhydJcuMXAzNBhpcn_O7Tcx-Ur5hUSD2QPX1pkP2Oz63tVP2jMjjw8-yoY_xgOcx_ty3McDEyalIvLA0xzh5oOe7zlaB3nPWUDkIFKirzNWBmnqCX9z3aufw7Nwyav3NG3r1imnaSX2M2KWiHUmjW5n4UKvlpLPaWaIp18Lbp1Z0QKIYyaO-9uBdyKoG_17IpFHmt-IBwUp8WtQk1k-u875Dq8ZBFlIDlhmgRSjrsxHn8uWr--VxuhlA0Dw8NcrXJVPTMI9PatqkHAnwxk8lECL3_oCADmzJIqNG4hf3NVp5W-w-N4XU1_mWD_dfnkc0EhZZARq1jltrXdon1DzlBWXrVh20gzUbg_tXY1IgJ4Ff3Ij7iv2PUj7GTkPwTSk11kM2WnvcSlaQaHElod98UNnyv8tW95861QWLuRddaExvLF-thYtJZtws3YxxnhMlwpr6MW5dhYRb7WBXgYyyaoOg4opOXKIh3pali-dp6aDo7JU_PJ2I8mlchSF-uJ","p":"7WD_lMSRccxgpgPXctpvFqXRl7PA2k5Z8yVbwMou4qHP1vu0F1v7NWzzjqouoCIb6v-xpmgFu0OxGhQzDL0gIKiH_4svsXGqdTYZfIwswx-Ng4OhKWmKvk4f6ZuqyQhX_7p7Jhh8cqH5BIU4BGlb54y6XGMQe74LTfCL_sujVU_Qo7R02cKjeG6x-guNre9thOaOR5KLlR_B3UV4ABdbOKzPguRdjvKQ-nnGk2-JKReh1JbV2NcSdw_4DFZ4LGNr","q":"y37zDxWMu0EAPWgivBCe7UZ2QhXuMuOJsk8KtBsylkE3vk9lz2bOnsG1R56oqX-7p2vdgvfhSV7XciA-YmDKE5BUWl4cnU6fPIhsuyDG_WhWV12OFxByCrr_bV1KYG4ysimUxFapVxScxKigoRSoxv7RLl6GEP6xZrZ55LJOuoFyhXQh-jQn4-svQMdUlENnieF8k7wTuFi6L_YAGnE7VofgbsxuucZn1h9Vl85mZrkB4-0hvTpH9A7AjaLdQ13b","qi":"R0dC1GzG1cI9jfKMK1Rq-W2K5buyEg3b_YLILaBohVrvcmnwPZUziY0nW_JVM_J3A1XGmOb-1kgdTFUOPWFu5bGMrLNqI0R0EhlPXwa_Bhbn4aKzGfxRegPIBwoqwaQNaGBifLZBqdMxjEdjfNXApMEJYb0y3UvABRVRtkiIfpulrE-aZqelh7ELmuFc1W21m9Qru6_zv9RuzPla-orl4x9HKqGZFlCyasGimJ7iAtkZcaIik551es2KuUablcH5"} },
-            { modLen: 4096,
-              spkiPubKey: 'MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAqJ+9n7Lg3x3opsqG5EnTocfqwxub3Oqycgxo3aC/3OrLEEUHQusbwFTpO+05BndpyqwfBNSEfOaRNhN9gQqRshjPXsKRdS+VdJ7w6gDUPSAhqevCXqsoH3e6Epp0ceGL62jZ2gpuFhxqVJUv6S2QN1MNM3DvQ1B+wkISKFaJ4v146dvVw5kEk3ROf7HAR4szC/Y4ptxLQLQC9Cs1N1djPvdFEaD0DHJFJtkdPjWD6ofb2KslNpNacrohfYtcc0FAH+uDTIG0nJ8N86QbDojKXds0uXnWGB4kEEk3Gi9EpP2iem/1dLx0fUeQ1u9PTU6riwRfc5jZWb/SETi/1dLAwkz3g8pt0OYFLFMFcem9KG2EBk8a7vfUvxvirUuAgCe2KAN2KH1hsQ8wGAOLKSwMCnhXIFWZ1JLi74j19wQWFnVwNgtBFcP/f1z7I+W3mQj45sw87WdU+d2UKaCrSoiu3RXMK6acbq1hA4J2F+nQHvJYnzWGg6VJI5+I0NcweMyMZi7lbzHFUQXmnN+gbKuyly12FlGCcmc7UxiPnc4gL9fIzQV1dNOkZ2Tf/OnCpyWICZAZ8DBqSf73HwREmfqlq05PelvZv/tt+GdNtqvvLiWjCYYNk/ltWLpyvE+zaWNemVusGkQ4r/msSdLUwL+oQnm+nczQmE4bQYuwY211rVcCAwEAAQ==',
-              pkcsPrvKey: 'MIIJQwIBADANBgkqhkiG9w0BAQEFAASCCS0wggkpAgEAAoICAQCon72fsuDfHeimyobkSdOhx+rDG5vc6rJyDGjdoL/c6ssQRQdC6xvAVOk77TkGd2nKrB8E1IR85pE2E32BCpGyGM9ewpF1L5V0nvDqANQ9ICGp68Jeqygfd7oSmnRx4YvraNnaCm4WHGpUlS/pLZA3Uw0zcO9DUH7CQhIoVoni/Xjp29XDmQSTdE5/scBHizML9jim3EtAtAL0KzU3V2M+90URoPQMckUm2R0+NYPqh9vYqyU2k1pyuiF9i1xzQUAf64NMgbScnw3zpBsOiMpd2zS5edYYHiQQSTcaL0Sk/aJ6b/V0vHR9R5DW709NTquLBF9zmNlZv9IROL/V0sDCTPeDym3Q5gUsUwVx6b0obYQGTxru99S/G+KtS4CAJ7YoA3YofWGxDzAYA4spLAwKeFcgVZnUkuLviPX3BBYWdXA2C0EVw/9/XPsj5beZCPjmzDztZ1T53ZQpoKtKiK7dFcwrppxurWEDgnYX6dAe8lifNYaDpUkjn4jQ1zB4zIxmLuVvMcVRBeac36Bsq7KXLXYWUYJyZztTGI+dziAv18jNBXV006RnZN/86cKnJYgJkBnwMGpJ/vcfBESZ+qWrTk96W9m/+234Z022q+8uJaMJhg2T+W1YunK8T7NpY16ZW6waRDiv+axJ0tTAv6hCeb6dzNCYThtBi7BjbXWtVwIDAQABAoICAGxsAcYcg0CS/5O3J1LEMYKVg9qd9vLuKXzxg7/1a0hF4/l7GPcrKvXY4vq4RnFk+K3rTCqT5vhUXEwz7f+55wJnt3aLjnGV/fg1dlxP2ifPcDXMtHaggLTzC76Id5T93DSqf2EWUcB/1tK59kttE4yvJw7Lb9yNdmO7jedH9XLxXfyocGNLEUkqgIrUpPibhWAMmlKX1P8uf7O10Irb8qF65ns2TZVvKA2ZjpcAW+jCIFbJfK0BxCd+jKgnonMtImkjypG32ITYNGVTQF5xEAWXO+iCcWmif7fFC9wXRoD74KvvLxk3T4N6L6QzzX68tco2LpWqUx7FGvId1iNLVsrM4tiZtAHJwO+TG999K/zwJfvHqDtSWAKUMx9X87q6yzpxN3JvV+cmihZjKSwFg6hUFRvh7ztV+uTpxhcURMMAAlDITLEByLlzMkzP7aiR8z0aFbKQk24cqrgHftv7TmNUYvdLL2AIlruTci8Jkm1OwPwYZOU6l8YqMqMz8XLCagdBpw4w/gG6Q/dgLfGNlr9XT5v5POrNXU3rVcwH97ZexWbIsiEN6qOkISd8n+LLTvNFIbGcHi+e38Ue5aoWUN8lezennWbBT/S7vglIRTS2ooJrcg2lkHub5giWkaZFvOV/JZ1nymrDMieaOGsi94sxWEWQXjoslZGDuDJoFmTJAoIBAQDVFqh6iuwwXSz5hLGlngWo7ZeXpcd9zjKnzSJyZC+tPwJW3Lba3jl1tnv3W6kWfHL3Oa0jifYRcHBCgg6lPU6Sm8tuWMthewqaKpc5kkHsBTjgEyKFNZ7JUjHzrKLiu/7OF6vMal+J1zAQXXXFt9SFUimYah1/XnmGXoJJRg2AhMyoCcEEFFE32s7pmlq1Mrq4UUpvViCtvOXoaygY+bPL3r6BT9HxpR2KFDeTijJMwvlbeDXpmnHJHRFL8gnJOVfRCzFHsnNlcNWyagdUp9fURCUzYBtF3czNv1ex48JVfmI1qHKC0Fwd87eQban0UBSfShd2uC+0zKh/3C2pTg4zAoIBAQDKlM4jSPoYc6PVY/Bq1eZAsN80ug7431DflFCfoiIcG1Hyc7H0GbuKhc8SNWwnU5hCXlB7Y104L5L8JdZJ6bE9Rj9ar4EjGcmZx1VefyoGnWG+lS9MKGprEoXFlNwQP8aNT+jJg+bo1fbvfpbhEjp9XZV1DsGt3a7wuvpFQM8vZhzP9VMQOEBpiO+ryivF3DECzEMEjACYdnRHqTYbxeTbnL9NTR68eqQC04Zpc79HMWQ8f8/O2oObkkgx91hhhS07aPwI8EAJUiUF5xY7zEFOEH+AFhvn9Ty29+fJe9v1zh299W+mMSfrUPxHwsXUJKeqn3I0nEjFut5FRWUh3vhNAoIBAQCPCwjKSlvHE6VPUs5WGUA/aE8tE7JZN4Q1tLT9CVgf+n49hSiSwD7eUEPjhvp5B829PFCH3OL8TfhuDRR7xC3sqPzk9GKC66/wUcr2cMIkCFVnxjCUL6yKBM1XgHpPrlecTbOcI4RC6dtwAO1AbukRHlih4govKGJ32xWmzondzkf8PZ/+dw0Wa6IemultXcKOXLOVDcIeHwJPBTADpAwYPUyxTb3ncynjOTMdrdWaRgBScN3wFSdxFDw6OR5soDvdLqBEOvzQCfDKNfb50zpFWgGG/WsReZU0QNBDsFsSPSb8UjmcqvZLfQGqyJMgWGmfjIM3xOjxe7lZK5rTXnyVAoIBAQCodjQxzYcEfG26j0AnZ7bxBuSmsS6wMOzM8EZXaXmaC/IKf8F1L0zwtbNr/fbxgSe10T52TTwA9Dbz7fcUQfy86sTWgeoOqWwnsEbCrVbiZ1AYL3FEkLtmTOHnW5HhBVf0vYXkxgZoiz2tDYUkp4byJ7eYv2u6TQYkdCiZHHrufKjrGqQ3cb/GwzQjlJzwDdrH69qzVkVMg/zQdttjHx7gram7+6zaqdXn78TvvmxLJLypPtQtvTMCVRQqUPkzJ49kvzoPqNJnreLR1Mh9c66+3yNX/Yq5SwtxUBh1ScWx0/SRuh9dgbUjj5YrisH+V3kCf1N2gpxVqb8atcmS8BtlAoIBAAJKGqitTFKJiGLU+YMd5xNNYaYeElozEC5IM0PiDVsVSDEA4yqtIj5u4aWijeAc56kvy18CY8LaFZBUrx932y92zqOwBhF9jXwXyuxZ2YS+JHhZOyNFkbDWWpvKPuthpod4nYWjSZlCpCYNIr8HP3lo97ZLgEt2i208ET01i72VK6uHO09K3P/DvhPA9e+UOmIwHiHUmsTwduILvM/FFSKQLiFf2utDWaRmjaQ5yPkTQvASEsXJU173JycUQBkFuKUvluzvGJFw75aGKN3Fpt58Kn6/1RI2zCHjW2WDXvoy2esCl6Mtc1bXjnAJuunzxXFyALdxZDpuVr7Fylr5Ooo=',
-              jwkPubKey: {"alg":"RSA-OAEP","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"qJ-9n7Lg3x3opsqG5EnTocfqwxub3Oqycgxo3aC_3OrLEEUHQusbwFTpO-05BndpyqwfBNSEfOaRNhN9gQqRshjPXsKRdS-VdJ7w6gDUPSAhqevCXqsoH3e6Epp0ceGL62jZ2gpuFhxqVJUv6S2QN1MNM3DvQ1B-wkISKFaJ4v146dvVw5kEk3ROf7HAR4szC_Y4ptxLQLQC9Cs1N1djPvdFEaD0DHJFJtkdPjWD6ofb2KslNpNacrohfYtcc0FAH-uDTIG0nJ8N86QbDojKXds0uXnWGB4kEEk3Gi9EpP2iem_1dLx0fUeQ1u9PTU6riwRfc5jZWb_SETi_1dLAwkz3g8pt0OYFLFMFcem9KG2EBk8a7vfUvxvirUuAgCe2KAN2KH1hsQ8wGAOLKSwMCnhXIFWZ1JLi74j19wQWFnVwNgtBFcP_f1z7I-W3mQj45sw87WdU-d2UKaCrSoiu3RXMK6acbq1hA4J2F-nQHvJYnzWGg6VJI5-I0NcweMyMZi7lbzHFUQXmnN-gbKuyly12FlGCcmc7UxiPnc4gL9fIzQV1dNOkZ2Tf_OnCpyWICZAZ8DBqSf73HwREmfqlq05PelvZv_tt-GdNtqvvLiWjCYYNk_ltWLpyvE-zaWNemVusGkQ4r_msSdLUwL-oQnm-nczQmE4bQYuwY211rVc"},
-              jwkPrvKey: {"alg":"RSA-OAEP","d":"bGwBxhyDQJL_k7cnUsQxgpWD2p328u4pfPGDv_VrSEXj-XsY9ysq9dji-rhGcWT4retMKpPm-FRcTDPt_7nnAme3douOcZX9-DV2XE_aJ89wNcy0dqCAtPMLvoh3lP3cNKp_YRZRwH_W0rn2S20TjK8nDstv3I12Y7uN50f1cvFd_KhwY0sRSSqAitSk-JuFYAyaUpfU_y5_s7XQitvyoXrmezZNlW8oDZmOlwBb6MIgVsl8rQHEJ36MqCeicy0iaSPKkbfYhNg0ZVNAXnEQBZc76IJxaaJ_t8UL3BdGgPvgq-8vGTdPg3ovpDPNfry1yjYulapTHsUa8h3WI0tWyszi2Jm0AcnA75Mb330r_PAl-8eoO1JYApQzH1fzurrLOnE3cm9X5yaKFmMpLAWDqFQVG-HvO1X65OnGFxREwwACUMhMsQHIuXMyTM_tqJHzPRoVspCTbhyquAd-2_tOY1Ri90svYAiWu5NyLwmSbU7A_Bhk5TqXxioyozPxcsJqB0GnDjD-AbpD92At8Y2Wv1dPm_k86s1dTetVzAf3tl7FZsiyIQ3qo6QhJ3yf4stO80UhsZweL57fxR7lqhZQ3yV7N6edZsFP9Lu-CUhFNLaigmtyDaWQe5vmCJaRpkW85X8lnWfKasMyJ5o4ayL3izFYRZBeOiyVkYO4MmgWZMk","dp":"jwsIykpbxxOlT1LOVhlAP2hPLROyWTeENbS0_QlYH_p-PYUoksA-3lBD44b6eQfNvTxQh9zi_E34bg0Ue8Qt7Kj85PRiguuv8FHK9nDCJAhVZ8YwlC-sigTNV4B6T65XnE2znCOEQunbcADtQG7pER5YoeIKLyhid9sVps6J3c5H_D2f_ncNFmuiHprpbV3CjlyzlQ3CHh8CTwUwA6QMGD1MsU2953Mp4zkzHa3VmkYAUnDd8BUncRQ8OjkebKA73S6gRDr80AnwyjX2-dM6RVoBhv1rEXmVNEDQQ7BbEj0m_FI5nKr2S30BqsiTIFhpn4yDN8To8Xu5WSua0158lQ","dq":"qHY0Mc2HBHxtuo9AJ2e28QbkprEusDDszPBGV2l5mgvyCn_BdS9M8LWza_328YEntdE-dk08APQ28-33FEH8vOrE1oHqDqlsJ7BGwq1W4mdQGC9xRJC7Zkzh51uR4QVX9L2F5MYGaIs9rQ2FJKeG8ie3mL9ruk0GJHQomRx67nyo6xqkN3G_xsM0I5Sc8A3ax-vas1ZFTIP80HbbYx8e4K2pu_us2qnV5-_E775sSyS8qT7ULb0zAlUUKlD5MyePZL86D6jSZ63i0dTIfXOuvt8jV_2KuUsLcVAYdUnFsdP0kbofXYG1I4-WK4rB_ld5An9TdoKcVam_GrXJkvAbZQ","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"qJ-9n7Lg3x3opsqG5EnTocfqwxub3Oqycgxo3aC_3OrLEEUHQusbwFTpO-05BndpyqwfBNSEfOaRNhN9gQqRshjPXsKRdS-VdJ7w6gDUPSAhqevCXqsoH3e6Epp0ceGL62jZ2gpuFhxqVJUv6S2QN1MNM3DvQ1B-wkISKFaJ4v146dvVw5kEk3ROf7HAR4szC_Y4ptxLQLQC9Cs1N1djPvdFEaD0DHJFJtkdPjWD6ofb2KslNpNacrohfYtcc0FAH-uDTIG0nJ8N86QbDojKXds0uXnWGB4kEEk3Gi9EpP2iem_1dLx0fUeQ1u9PTU6riwRfc5jZWb_SETi_1dLAwkz3g8pt0OYFLFMFcem9KG2EBk8a7vfUvxvirUuAgCe2KAN2KH1hsQ8wGAOLKSwMCnhXIFWZ1JLi74j19wQWFnVwNgtBFcP_f1z7I-W3mQj45sw87WdU-d2UKaCrSoiu3RXMK6acbq1hA4J2F-nQHvJYnzWGg6VJI5-I0NcweMyMZi7lbzHFUQXmnN-gbKuyly12FlGCcmc7UxiPnc4gL9fIzQV1dNOkZ2Tf_OnCpyWICZAZ8DBqSf73HwREmfqlq05PelvZv_tt-GdNtqvvLiWjCYYNk_ltWLpyvE-zaWNemVusGkQ4r_msSdLUwL-oQnm-nczQmE4bQYuwY211rVc","p":"1RaoeorsMF0s-YSxpZ4FqO2Xl6XHfc4yp80icmQvrT8CVty22t45dbZ791upFnxy9zmtI4n2EXBwQoIOpT1OkpvLbljLYXsKmiqXOZJB7AU44BMihTWeyVIx86yi4rv-zherzGpfidcwEF11xbfUhVIpmGodf155hl6CSUYNgITMqAnBBBRRN9rO6ZpatTK6uFFKb1Ygrbzl6GsoGPmzy96-gU_R8aUdihQ3k4oyTML5W3g16ZpxyR0RS_IJyTlX0QsxR7JzZXDVsmoHVKfX1EQlM2AbRd3Mzb9XsePCVX5iNahygtBcHfO3kG2p9FAUn0oXdrgvtMyof9wtqU4OMw","q":"ypTOI0j6GHOj1WPwatXmQLDfNLoO-N9Q35RQn6IiHBtR8nOx9Bm7ioXPEjVsJ1OYQl5Qe2NdOC-S_CXWSemxPUY_Wq-BIxnJmcdVXn8qBp1hvpUvTChqaxKFxZTcED_GjU_oyYPm6NX2736W4RI6fV2VdQ7Brd2u8Lr6RUDPL2Ycz_VTEDhAaYjvq8orxdwxAsxDBIwAmHZ0R6k2G8Xk25y_TU0evHqkAtOGaXO_RzFkPH_PztqDm5JIMfdYYYUtO2j8CPBACVIlBecWO8xBThB_gBYb5_U8tvfnyXvb9c4dvfVvpjEn61D8R8LF1CSnqp9yNJxIxbreRUVlId74TQ","qi":"AkoaqK1MUomIYtT5gx3nE01hph4SWjMQLkgzQ-INWxVIMQDjKq0iPm7hpaKN4BznqS_LXwJjwtoVkFSvH3fbL3bOo7AGEX2NfBfK7FnZhL4keFk7I0WRsNZam8o-62Gmh3idhaNJmUKkJg0ivwc_eWj3tkuAS3aLbTwRPTWLvZUrq4c7T0rc_8O-E8D175Q6YjAeIdSaxPB24gu8z8UVIpAuIV_a60NZpGaNpDnI-RNC8BISxclTXvcnJxRAGQW4pS-W7O8YkXDvloYo3cWm3nwqfr_VEjbMIeNbZYNe-jLZ6wKXoy1zVteOcAm66fPFcXIAt3FkOm5WvsXKWvk6ig"} },
-        ];
-
-        vectors.forEach( function ( v ) {
-            describe( v.modLen + " bits", function () {
-                var keyAlg = extend( normalizeAlg(alg), { modulusLength: v.modLen, publicExponent: x2b('10001') } );
-
-                it( "spki publicKey", function ( done ) {
-                    crypto.subtle.importKey( "spki", s2b( atob(v.spkiPubKey) ), alg, true, [ pubUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('public');
-                            expect(key.extractable).toBe(true);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([pubUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "pkcs8 privateKey", function ( done ) {
-                    crypto.subtle.importKey( "pkcs8", s2b( atob(v.pkcsPrvKey) ), alg, false, [ prvUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('private');
-                            expect(key.extractable).toEqual(false);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "jwk publicKey", function ( done ) {
-                    crypto.subtle.importKey( "jwk", v.jwkPubKey, alg, true, [ pubUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('public');
-                            expect(key.extractable).toBe(true);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([pubUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "jwk privateKey", function ( done ) {
-                    crypto.subtle.importKey( "jwk", v.jwkPrvKey, alg, false, [ prvUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('private');
-                            expect(key.extractable).toEqual(false);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-            });
-        });
-    });
-
-    describe( "decrypt", function () {
-        var vectors = [
-            { modLen: 1024,
-              jwkPrvKey: {"alg":"RSA-OAEP","d":"seb41h7ipbASU_d-aAy9kAr9EjORcT2KXC00W8RcjmVgajSWU6meqe3sLOp6mLRliGwgxRxVkzmR6x09e19Q1zIM8qyHVL1hkVVcWcvPS0wd5Dc0FhpaXBeSiRu1Vkzk-jMCA60IBzobWvvuEqglOitqBEaLPJwTM_E6N2ddggE","dp":"5KsAKE10JnaUnNbdy01W2K0eiPK0mxnystnMTJEYXWDwumUVasKj3pzFU9UOb_HBO3KK8LLqnn0KTfcfSDthAQ","dq":"QT9Csl-Z296Cc_XsI6PZI4Wxf3DzpJrdoXp8tI7T0FmdPdjUtI82Fpc0rrjtc3YvSJ0cMQNyZ0NdEQgNG6k2gQ","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"2Gpqe_IDpvHUgu5YDwfd_-hXWCFk53dawjIWOWLxsOt0-oCMipAkvS69TqykH9A-yPjjLmlezABd16S6zomJt7U37_SzAD_mUOlCujs9NM5Zzca_lZKbUXwYmuahHytpo3Mcb8P6K_VGb_Q-vS6dQpRQrBZFzpfhVyWHCKKG4vk","p":"-LWEou4KAltW9OaNzvfaGDdufODbNx92vdgGsFIAMovR5FuzHiXbbxOYEPhlcT_4lCMaY4I5LKAN6ftMRFyfmQ","q":"3sKL5BQB3ChOV7QJ8WIqButQ4qPO_0lg4MuJxqYDS9_2EhyFHOldKdbcmuFh8hJ-aQpcDChfvG-ngb-kTAv6YQ","qi":"UK__QRR5wfE9eNFWDzppJSy9sIKSG4qgkJjsakHvEl3Nr3qh4AWYtQauQwd6oofODcJZPGQsSQPI2dHfrIyKUA"},
-              subvectors: [
-                { text: "",
-                  ciphertext: 'TKeCGtHTEpUOjSE2+rerTI3msiZu/CT5OJ58J8nFeKy9aK5kGvffXA6eCbXix0Q4gRWXwQlZ4du89DUchLDAHqaz1vDBPSTFQ47xdTxpraZehVLU8/frwONv1UA/0/7pVkr899AxtylYiybuQkhTNUNiNResebfsDpmnFYRY+ag=' },
-                { text: "Hello World!",
-                  ciphertext: 'UEGYBOnSU8WFJxLvG2kHMDN0y86M7xuA2c3JHovIBcUMVf2Mr12x1/n2kl2OHhTC18355GOxWA3xARbbuhRV4umUtmzIxAnI7s6FpmasJKjQkEagBXlco1DWIB3/5CyW3iUHt6RuG+mMgns4heN6F6mgDympKMM42tBHAeVjDIA=' },
-              ] },
-            { modLen: 2048,
-              jwkPrvKey: {"alg":"RSA-OAEP","d":"gyfipW6x5_W4vzCTMsPRmqACybprwE2eJffG5E2sY40q5z7m4jGC5xsF2ayhjqBzJNQ-mrolTMU1Rrh_39nrsmVYwYZZy16v-_Nsu9Dpu4B0OGoMDK6q9ENNEKf77VTBB-uXxfEZdNdmYjgMbTsGZRo6GybnBF7UMwwpo7qUlX29I5_9Doz_nUSXHwNLGjyuIe0HKyCL-LTA-gkv8KcDDFo57ud6z-cfCOHCDF0hXMibzW5verdapwa1M2FR3SIcrnqjASbKdCM_ImmPyWgS-neWIQKbi_S3PMF-XcuhlH6m4zo0zkzSWEZLnEV2l1aB0iWyJ-MlcvdsSUaVdTw8AQ","dp":"os0biBh6nVBUlXB7yG4neHtJxx4Y40Zhf068NGeTskfPhQuAS_XDOUqIWsrzgLINBgXO5QppDyigg01ZccBMTC4JEbyjz9tNsgg2BDDptkomHXy3gGLrYurnyDbkAzw14CsJuAZuAsOsxvFX_wT8lOSP7sa9H0iTuoB0DkBq3aE","dq":"rJ5AyeUqSZpnwsiOsUeS92_yyHKUobYrfa2q0Ln_xZbU-mqL4mDuvwg65GNLQCoKvs5sA_g6-WYREUp6STVSCLgnX1aSynXQ-Q8iGj6dfEcvENjWg5CI-GOf06BwqvGhOtYvfpv5X6qZ4Rw3Eu1N-Ugksp1LZhvl5uisuAHpgAE","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"w3bzCBUL8ZV1jwM4twWbtcAfihBMEVsjVwBxDcVnqKPgqNVtnoQAubd7QDVAIYsgXn2ozLwIxcJK4CY6NI4ihfVjaDGSZDDNuTgJK5Vb_N5-5uG_mGSvtak7jDpzfo6s2Az95U7HWcoxev49Zp-0XjIAgjiQBPh83sdj1_76LFJn1Hjv8aMD9WrSH1T4Sgpa8TbH8Y73rz-qqYdBdgoyMUPiFXwXTzM_PIbQc6KD8xRdt3J9wwk0gyH4rg9Lwk6fBQ8aQb6KoItXYaM_UqQawwVM3fAwcFTbZfDtEW8GkyMXtl65D6duYq8EsF-Hc52lnW3561eCiQ5GmBl8Db81ew","p":"7hLRavTGFovBVdmHf-tvcxVO43AkkPMj83rm4lFjfr2QwNEk93GCUz-2XYRU4ceYfpl7WuaUwX6sQhEp8hJzabZ0zX2cFZB7pLqtLLtw6kUTJTbdtcEv1VqibarjitTpxSVv-j4vB6_X2LBjWXWZ95kdoaBI9-X4KFRZpuod93s","q":"0i7KAgHFKz8-2Fp9Yh9fk6XLTX7EvRVe6jPwxbr60sCBwZiIvKLvaPmUJn93MFk9rthTzB69RKWko5fzTxDfHZNA8uarOspAc4Um2wTUwEAhSzlqEO19wmtDiPsmaJJ5XM0P7Xx2FhZ-r5dmzo5Pob3IkwjRcWxsYSw7NX3gWgE","qi":"e8fTmmGqhmg79ixR1h94GhGoL9Tk8XCWbt3Aibw5PooTrN8dYOrM6IxLG3g98HHVpgHOcVxJfLI5m8btaGtXkQ7s6Ga8i7rsN0kTO7lrd06dVllsznUBqe2txSzPw0NYhv-8KHhj4x9QtTEewfCnarLqytd1I64xOoWODeB-TJw"},
-              subvectors: [
-                { text: "",
-                  ciphertext: 'onOPhl9Zwldpdk0V9axvLzEQXpHlOOgaTfP8/lAg/PF050/5BGyxhPGrQcTkdvL1VJzs743+feXWj0/8UVlYcbEOurKf0NkTxNN9lD6jMyVIibnstjz5vpubk6l7o7WCPQ4cB/f/Jty47DgRjOA+HPBf2E9fmXh0AYeCEDIgpU4DBj0BAmxZgt4SrQdTzjtNNzeEAl9LQk/ePz0e4qfuBIcM7eiuY+8Lc/ww/1Cd7DegjhwBAwEoYUd8v5RdRpi3sVuNoxyYKIQJPyxkt4dLVxJyDmh6ZmjFlnrOVsHtQrlnbLdfwQYzAzgSIVb4iZ9l7TfFjzEXjLgtiJuDwT6WSQ==' },
-                { text: "Hello World!",
-                  ciphertext: 'Di/y9DtmRhUoyz6Tpn2EEuNStsgTkmKcCCHRqvCEOUtBxNFAnU0FJtovISvWHiOjQKbAHY7OlgcAJMXbGSVr9QtijKWvuxb+V6Yrucj48tdwqQByZDS9F26NCydGZOSOrqNo92hGIGT5/whBd3a8spnCq89u9ABhhK7Ak57IysXhYjYTJnPU82w+w16tsMtulmsWSy23hlyBYFRvGNF0OekzndrkM4EvALHuk70VWV07SUppeVNJklvCh0VQ0N7VtZe2PGeAoya21hKGNupmYBTKE1L4PG8K5wbdqnDQJnjnEJxIjqOjHBzGsFuw3dOH4+uUmtYpFHhYDKFwZIXfjw==' },
-              ] },
-            { modLen: 3072,
-              jwkPrvKey: {"alg":"RSA-OAEP","d":"E4nJGN7BXxiK6CpDkikiVopZuhEOxJo17oYL2XHAo5etT5rLru8pDylJnzAyumdBR8Zslv5qTxO3hd4bvVGzPL1E9qcOkgNWqFLHVbUthMQb9x1g8NZOO6csVlewEp704saMYImrZvNeDcLqqn6KRxV9DPl3rVIoLE_zb9Yiv5FpCrJO4j5u0fnuyIiXihlNu5ptocK7opOFyAF9-TmOVTVkXDOAwlPSxs1qP8pmygS0B1Zf9GGaUea4il32n9SgnGZz8zDzzpNnscb87ytklvazHKDrsXyx9ODuHe0JBST4EIjOHV9-8w_QaQ8dScosOzOiGr1aDT0g1H_mNkOPQZdguRJwwMZp-HihLlcif_dzVdOWRFBXtjRYHSi57t92rfAkPBHaTu0NzR1gokEAFUbxIzAJN_maAuah2xXwZV3x92ayDzKXsiVC3-mqkQRji2OQ9adxYsO6R9fCZ8s5Dv_1F3kjUSAK5If9wKUD-34kHbCtGx5RL2HO4Z4DJ16J","dp":"X-iT-xicpzzrQ8hDkV0eCyl-EGwJHGsRvsK2WqOV4-162yKhddqtGb3mfhrWcc62NvGOZmya_DlyYdYNdjUnuOo-4IntACWruGXeUEsWftPNyngxclj5PMC19h32F_luDJ3cydyU04AL676jjmy_PEPIvDEuZMC5MolhFtZSLNLtumbb22vfvnYDJMLsQH1_Y3X_wH0-Nkc5fdxmiqrlKXXw9bKs9medGgZ_q-whn9-zfABhcJYdGMvz7ZA2R8D3","dq":"cq9mPn8PpEza3MC-qqzXVLQcW9xONWHlLZe8WYrmdKXmy5ulrkCre--Bwg5Z0cUKNi3lVjVrQ1VvKIOhhQI1gNcbox5dFA7GUXA1jzTG0PQnjO9N8BO1ofSHldQ44aXZbm1eyVRp9YjJXVAHzyB8ikH8FBzzg8p2ooN-qPQQyK3BpBKyP3d7b8kRBXoRYcmnJZ7t_bjGiGOA8xy6LCzam0bSpr8SPCLkTFm2fGq3bXcg6JqxJBsfiB10SZ6bAqd3","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"vLGhydJcuMXAzNBhpcn_O7Tcx-Ur5hUSD2QPX1pkP2Oz63tVP2jMjjw8-yoY_xgOcx_ty3McDEyalIvLA0xzh5oOe7zlaB3nPWUDkIFKirzNWBmnqCX9z3aufw7Nwyav3NG3r1imnaSX2M2KWiHUmjW5n4UKvlpLPaWaIp18Lbp1Z0QKIYyaO-9uBdyKoG_17IpFHmt-IBwUp8WtQk1k-u875Dq8ZBFlIDlhmgRSjrsxHn8uWr--VxuhlA0Dw8NcrXJVPTMI9PatqkHAnwxk8lECL3_oCADmzJIqNG4hf3NVp5W-w-N4XU1_mWD_dfnkc0EhZZARq1jltrXdon1DzlBWXrVh20gzUbg_tXY1IgJ4Ff3Ij7iv2PUj7GTkPwTSk11kM2WnvcSlaQaHElod98UNnyv8tW95861QWLuRddaExvLF-thYtJZtws3YxxnhMlwpr6MW5dhYRb7WBXgYyyaoOg4opOXKIh3pali-dp6aDo7JU_PJ2I8mlchSF-uJ","p":"7WD_lMSRccxgpgPXctpvFqXRl7PA2k5Z8yVbwMou4qHP1vu0F1v7NWzzjqouoCIb6v-xpmgFu0OxGhQzDL0gIKiH_4svsXGqdTYZfIwswx-Ng4OhKWmKvk4f6ZuqyQhX_7p7Jhh8cqH5BIU4BGlb54y6XGMQe74LTfCL_sujVU_Qo7R02cKjeG6x-guNre9thOaOR5KLlR_B3UV4ABdbOKzPguRdjvKQ-nnGk2-JKReh1JbV2NcSdw_4DFZ4LGNr","q":"y37zDxWMu0EAPWgivBCe7UZ2QhXuMuOJsk8KtBsylkE3vk9lz2bOnsG1R56oqX-7p2vdgvfhSV7XciA-YmDKE5BUWl4cnU6fPIhsuyDG_WhWV12OFxByCrr_bV1KYG4ysimUxFapVxScxKigoRSoxv7RLl6GEP6xZrZ55LJOuoFyhXQh-jQn4-svQMdUlENnieF8k7wTuFi6L_YAGnE7VofgbsxuucZn1h9Vl85mZrkB4-0hvTpH9A7AjaLdQ13b","qi":"R0dC1GzG1cI9jfKMK1Rq-W2K5buyEg3b_YLILaBohVrvcmnwPZUziY0nW_JVM_J3A1XGmOb-1kgdTFUOPWFu5bGMrLNqI0R0EhlPXwa_Bhbn4aKzGfxRegPIBwoqwaQNaGBifLZBqdMxjEdjfNXApMEJYb0y3UvABRVRtkiIfpulrE-aZqelh7ELmuFc1W21m9Qru6_zv9RuzPla-orl4x9HKqGZFlCyasGimJ7iAtkZcaIik551es2KuUablcH5"},
-              subvectors: [
-                { text: "",
-                  ciphertext: 'ssMzh73T84FZbRCp1LL7FnMPp/YqXjLnpUOPTqV++2GeZ2/L190FXedjyRrKb5hy8ctNzLqkW+KVwCDOC+J1HUlAjvZcI8071WpNz+FjVQMl9Tp+sbm1/Q6uswIAF6IWcufrFtxuGHiGuumyWZ6zIiN9+ygwjjIMciHb4eOjnao/dZHpyXDmruBVdOSywwlub59jvVcN87ycQoI4tERsZ57U4V/KeDuSe9TJQyV4yo/51szbVoUrmm4A8LeYAyb2PY1w6JSIoqdUh/dWG/xb51kWGJeVN7MJtfEINC/dz9IfGX7kj3kQ/Hm+3842XBwAhCoppopZKlJgnCQQNQU85GTnfidsQqCfwIekAVldR2mOHhaDcVlC0nZ4WWbbeAAZLzfMPDI0DfugllNGJf8qaGyGZscnukPaOcFPTXed1kCMerI/kiPZwYY+p7IR8pC7uq7zYvxH5VcBXzbkJYuhu7+d4Idb9pmb+CYiSQMgcoq3ravuOgMvwMhvJJTGhM50' },
-                { text: "Hello World!",
-                  ciphertext: 'gzu26BVAirq2HBADWGwfEKzmXowQuhAnNZ++HZ1EDDXwkPjlTJgS+LLu3wOS1Ga3jT7AGoRoIVtm2OKJjVfBCqc8uSpiZxMYj7qy1KMJ12SVVpziSZq6Njyr5PTjgISy/64CFumBpCphBjhszl8UTXk0slIcKVqyH/JI0gJae82VdWc/t/fiTISVhA60RNukGl0WCaVdI8EhN5KdeXJHrKcJNuT9aIU7qbELUrJ2x4Zmstteng2IXdEy8bSE17QCIu6mmdliUrWKsjnEcRyAlNiFOyNdPvAsMmJsLOrzgpv6cvEOrRd0nL95Pucn0gzB8mVOuqG73wpknmujKZqFXtUsEVTZd4qs7MsdEbpzscblEX/rrMWn0qLq3Kgwu8AchKavbVBZS6srneAMTy0Bg7bHTsh/PwS373mHaYJMPQwOqScelgbpZKcxv805Tc1q7SnLTZlybY+JfvY6GoPLgHLzwQyUAh96dFeOq74lEsjVNoZAc4f/RrqbaUp7bdYt' },
-              ] },
-            { modLen: 4096,
-              jwkPrvKey: {"alg":"RSA-OAEP","d":"bGwBxhyDQJL_k7cnUsQxgpWD2p328u4pfPGDv_VrSEXj-XsY9ysq9dji-rhGcWT4retMKpPm-FRcTDPt_7nnAme3douOcZX9-DV2XE_aJ89wNcy0dqCAtPMLvoh3lP3cNKp_YRZRwH_W0rn2S20TjK8nDstv3I12Y7uN50f1cvFd_KhwY0sRSSqAitSk-JuFYAyaUpfU_y5_s7XQitvyoXrmezZNlW8oDZmOlwBb6MIgVsl8rQHEJ36MqCeicy0iaSPKkbfYhNg0ZVNAXnEQBZc76IJxaaJ_t8UL3BdGgPvgq-8vGTdPg3ovpDPNfry1yjYulapTHsUa8h3WI0tWyszi2Jm0AcnA75Mb330r_PAl-8eoO1JYApQzH1fzurrLOnE3cm9X5yaKFmMpLAWDqFQVG-HvO1X65OnGFxREwwACUMhMsQHIuXMyTM_tqJHzPRoVspCTbhyquAd-2_tOY1Ri90svYAiWu5NyLwmSbU7A_Bhk5TqXxioyozPxcsJqB0GnDjD-AbpD92At8Y2Wv1dPm_k86s1dTetVzAf3tl7FZsiyIQ3qo6QhJ3yf4stO80UhsZweL57fxR7lqhZQ3yV7N6edZsFP9Lu-CUhFNLaigmtyDaWQe5vmCJaRpkW85X8lnWfKasMyJ5o4ayL3izFYRZBeOiyVkYO4MmgWZMk","dp":"jwsIykpbxxOlT1LOVhlAP2hPLROyWTeENbS0_QlYH_p-PYUoksA-3lBD44b6eQfNvTxQh9zi_E34bg0Ue8Qt7Kj85PRiguuv8FHK9nDCJAhVZ8YwlC-sigTNV4B6T65XnE2znCOEQunbcADtQG7pER5YoeIKLyhid9sVps6J3c5H_D2f_ncNFmuiHprpbV3CjlyzlQ3CHh8CTwUwA6QMGD1MsU2953Mp4zkzHa3VmkYAUnDd8BUncRQ8OjkebKA73S6gRDr80AnwyjX2-dM6RVoBhv1rEXmVNEDQQ7BbEj0m_FI5nKr2S30BqsiTIFhpn4yDN8To8Xu5WSua0158lQ","dq":"qHY0Mc2HBHxtuo9AJ2e28QbkprEusDDszPBGV2l5mgvyCn_BdS9M8LWza_328YEntdE-dk08APQ28-33FEH8vOrE1oHqDqlsJ7BGwq1W4mdQGC9xRJC7Zkzh51uR4QVX9L2F5MYGaIs9rQ2FJKeG8ie3mL9ruk0GJHQomRx67nyo6xqkN3G_xsM0I5Sc8A3ax-vas1ZFTIP80HbbYx8e4K2pu_us2qnV5-_E775sSyS8qT7ULb0zAlUUKlD5MyePZL86D6jSZ63i0dTIfXOuvt8jV_2KuUsLcVAYdUnFsdP0kbofXYG1I4-WK4rB_ld5An9TdoKcVam_GrXJkvAbZQ","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"qJ-9n7Lg3x3opsqG5EnTocfqwxub3Oqycgxo3aC_3OrLEEUHQusbwFTpO-05BndpyqwfBNSEfOaRNhN9gQqRshjPXsKRdS-VdJ7w6gDUPSAhqevCXqsoH3e6Epp0ceGL62jZ2gpuFhxqVJUv6S2QN1MNM3DvQ1B-wkISKFaJ4v146dvVw5kEk3ROf7HAR4szC_Y4ptxLQLQC9Cs1N1djPvdFEaD0DHJFJtkdPjWD6ofb2KslNpNacrohfYtcc0FAH-uDTIG0nJ8N86QbDojKXds0uXnWGB4kEEk3Gi9EpP2iem_1dLx0fUeQ1u9PTU6riwRfc5jZWb_SETi_1dLAwkz3g8pt0OYFLFMFcem9KG2EBk8a7vfUvxvirUuAgCe2KAN2KH1hsQ8wGAOLKSwMCnhXIFWZ1JLi74j19wQWFnVwNgtBFcP_f1z7I-W3mQj45sw87WdU-d2UKaCrSoiu3RXMK6acbq1hA4J2F-nQHvJYnzWGg6VJI5-I0NcweMyMZi7lbzHFUQXmnN-gbKuyly12FlGCcmc7UxiPnc4gL9fIzQV1dNOkZ2Tf_OnCpyWICZAZ8DBqSf73HwREmfqlq05PelvZv_tt-GdNtqvvLiWjCYYNk_ltWLpyvE-zaWNemVusGkQ4r_msSdLUwL-oQnm-nczQmE4bQYuwY211rVc","p":"1RaoeorsMF0s-YSxpZ4FqO2Xl6XHfc4yp80icmQvrT8CVty22t45dbZ791upFnxy9zmtI4n2EXBwQoIOpT1OkpvLbljLYXsKmiqXOZJB7AU44BMihTWeyVIx86yi4rv-zherzGpfidcwEF11xbfUhVIpmGodf155hl6CSUYNgITMqAnBBBRRN9rO6ZpatTK6uFFKb1Ygrbzl6GsoGPmzy96-gU_R8aUdihQ3k4oyTML5W3g16ZpxyR0RS_IJyTlX0QsxR7JzZXDVsmoHVKfX1EQlM2AbRd3Mzb9XsePCVX5iNahygtBcHfO3kG2p9FAUn0oXdrgvtMyof9wtqU4OMw","q":"ypTOI0j6GHOj1WPwatXmQLDfNLoO-N9Q35RQn6IiHBtR8nOx9Bm7ioXPEjVsJ1OYQl5Qe2NdOC-S_CXWSemxPUY_Wq-BIxnJmcdVXn8qBp1hvpUvTChqaxKFxZTcED_GjU_oyYPm6NX2736W4RI6fV2VdQ7Brd2u8Lr6RUDPL2Ycz_VTEDhAaYjvq8orxdwxAsxDBIwAmHZ0R6k2G8Xk25y_TU0evHqkAtOGaXO_RzFkPH_PztqDm5JIMfdYYYUtO2j8CPBACVIlBecWO8xBThB_gBYb5_U8tvfnyXvb9c4dvfVvpjEn61D8R8LF1CSnqp9yNJxIxbreRUVlId74TQ","qi":"AkoaqK1MUomIYtT5gx3nE01hph4SWjMQLkgzQ-INWxVIMQDjKq0iPm7hpaKN4BznqS_LXwJjwtoVkFSvH3fbL3bOo7AGEX2NfBfK7FnZhL4keFk7I0WRsNZam8o-62Gmh3idhaNJmUKkJg0ivwc_eWj3tkuAS3aLbTwRPTWLvZUrq4c7T0rc_8O-E8D175Q6YjAeIdSaxPB24gu8z8UVIpAuIV_a60NZpGaNpDnI-RNC8BISxclTXvcnJxRAGQW4pS-W7O8YkXDvloYo3cWm3nwqfr_VEjbMIeNbZYNe-jLZ6wKXoy1zVteOcAm66fPFcXIAt3FkOm5WvsXKWvk6ig"},
-              subvectors: [
-                { text: "",
-                  ciphertext: 'fIIhjRQ9lH6uVsISeJgcz/S+6y3EOpoGQs7j98JvuQmd5P2/ak0L3d1IaTFQTHirXKbSu5RNmVKxnGjNsP33Ch3yEazUsUw6PvjZaB7neCEWuVZQBtjbIr10K8BIZ+4Kqu72IpAPsmzXDOadTWC1tFUDVkAI3aOblXJssIwHFmc1rfwuHOSurkot7LL2oy8H4DANU9ypxuLR4s2a0KCg0R9XboOU/dFoEwt0oj9KRT6Z5b//B0pw4stFb7X7qP1ifbogqBFw3aza4JBhaoq/vN11QW2LS3WmWKdAiqngnks9Yq3yfyiYlSuaSF+DD9ysauPID77xNb1NSjzFMdS/KzQWdIZx0A3+nPCgSmn9UGJH7LrEgfCQH9IpnOWAPNsyVApT+qG1Z3YHLKKgdRIaCgfKiJyyl9DwiFeDIHOVzSxaJb+KoerU2gkLYh5bQ+Ns3+tCXI/cXYVyY4Kn4HfXF/N6SrIgkBs4/IlhHn886PQW++0XP8RzUWK3KnOCWCs+2UXh/92K/2iaSQGwF9s/ke6DiKygwvEzmNgO20k8NTKcHo/Wq98yop2+KvkeR9Mxr1aioeUAVZU+ZMmY115Vo3/2JV+UE8HlDN+9+o9LJNaGIj98ZCrUAACTIHCK/HY+VBrzilZLhsbrsoVO7ve7Wh8roEqstFMTZ+3gUeZUsiI=' },
-                { text: "Hello World!",
-                  ciphertext: 'ZPn/xhqsZ10ZwEED71HNfFEk6jhiTFzf2cwMKL/yEco0NsT3UNxEDPTuCkqYh5A3QT/4Ifc5PPHScIUjImbfYJ0JkhxGWu9u/bvWRkRd1YCYidIujcnxuOkd+NoJaPBG5FUSp0m++q9GbcvDTjgErcU3zEjB99HFL76pLKuzxBUn8U4b5N3DdGiKZ586bGzP2lPLHT3rLLBQJS7Sp0pxxpAVvM4ttP/lB9k2pQQxavkAtYOSkY5O26b64D0Jl5qQ6D4K5jsjYyjUtOu52khGr2kZWNypXtyRUlY63R0plTOh6JzZh1M29gJxO7Vs3/nt0mwrupIbx3ROlEznJ4YRN4i3C4vpM5LRjbeT5Hb7oGf8hNasAmRZR1FgwVyJ6yIy0bOPG41CeL7UXi0XDemHKPJazdY2lMHR0TVGMmbV9hkd6NNC8hivurupkiKZP9Q8E/MGT+8nSusYxLT6NXmxzkRyr1XVfmNXDIsBepVrEhwEXkoFkGw3xPKbUqt78tfpUzhavniSqi2mQzIDuSENnwFSy0cYinuyYxyYaDKR10H3HgrbvA3iNSTAMjcRFa5KeuCsTchD1ttWBzRHrlDgkdqIQMsLSaqHHhPxEUFDIGwBB2EOkD0/nwj09uh7JBfXzCvOII9ybc19++8SuRy6jWNu80RqlH2IOIwPiBniePg=' },
-              ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            describe( v.modLen + " bits", function ( done ) {
-                v.subvectors.forEach( function ( sv ) {
-                    it( "'" + sv.ciphertext + "'", function ( done ) {
-                        crypto.subtle.importKey( "jwk", v.jwkPrvKey, alg, true, [ prvUse ] )
-                            .then( function ( key ) {
-                                return crypto.subtle.decrypt( alg, key, s2b( atob(sv.ciphertext) ) );
-                            })
-                            .then( function ( plaintext ) {
-                                expect( b2s(plaintext) ).toBe(sv.text);
-                            })
-                            .catch(fail)
-                            .then(done);
-                    });
-                });
-            });
-        });
-    });
-
-    describe( "unwrapKey", function () {
-        var vectors = [
-            { modLen: 2048,
-              jwkWrapKey: {"alg":"RSA-OAEP","e":"AQAB","ext":true,"key_ops":["encrypt","wrapKey"],"kty":"RSA","n":"vEsQ2OX9oR6ygnUZv2O7IA6TiXdHHyQSxDI_tJxGaQiqiWz5rQ9waWQL64-Dvo1F7-2A_oYoMW0MdcS5Vpqci4NLxHizohZ6Q1fhin5CttYqkm-s8scePCrbDI2FKcmGxgLA-zHSiOxqxuKIh8AqVwqCSfcP9IQnXAAP3mrC3RCamcYiWvzK17gXihb6oB3C_Mcr7oVpwq9M-IQuv2PSDtha4LdgOmOlHymlp1VyU_pHwj2Y3Y8qLWYu_AO1_Hvkybxj8q6TUwRhbZrFHSWBJRL2SweCbEanyL8l5Ml6WoTq3RkikA_2y8Hm191uwCsKytn4BM7Q0Fcvm_IH0eVXjQ"},
-              jwkUnwrapKey: {"alg":"RSA-OAEP","d":"YOFesbrkXNomjukhblAqH7xgPQKaHXO6FCimjo85yyEiXcMsU9b1x8QqPfGBn7GgompZTJxKYePx3UZy9hRnJ4FOorBX_LYEAlJdQZzlRp27Gc1L9z5sWBjUzAik03NVXNxd3uErqje6WMqF5RMCtfY6Q0RTeUPl3HhLsezMhmD5ff4fMJuzWZEA_DsSGa50Jki74YKEKWFPzP8pRMoFw754leguS33TY2mSRQi0BDOeveqAQvIlvVE_3-sX8xhInovzkZEYNOf3r_2h8oQ1xG1C6KtF0URo54uHx3OJ2omiQxQjfV4ZnWK7-ENW0-Ae6z_tNXbaYNeFsxO4U1_kAQ","dp":"amUYdod7LMkxZZ_oGMh5zyb3LDYlDhlhpgJw1Pb-IDxcaqVGLlwilSUc0GR1MFtFMR7tl5EdT74DQjeKwYfGCDu6rwJlMfcQZBY1flkuhwju64rvncac_AWHowlkggEaRKbCtH6saktF8Cy0Gp4QgFe-jdi_LkeiygT77Wz3b_E","dq":"X7pSwpOzjPDkmerbZM7n03kxkvTw2IAsLT8SLeKWQJ-5O-xuInqjonOuXQGWXpLQotIa_D_AmX0T9Q8OOwi6ebvXBFIGgDGgF7yTU84bW1ygcvs0OComfE9Dyq-oGexbQp5kbWPw6EpfYh9DMR-5hH26NdX2or979D8ZZeyCIwE","e":"AQAB","ext":true,"key_ops":["decrypt","unwrapKey"],"kty":"RSA","n":"vEsQ2OX9oR6ygnUZv2O7IA6TiXdHHyQSxDI_tJxGaQiqiWz5rQ9waWQL64-Dvo1F7-2A_oYoMW0MdcS5Vpqci4NLxHizohZ6Q1fhin5CttYqkm-s8scePCrbDI2FKcmGxgLA-zHSiOxqxuKIh8AqVwqCSfcP9IQnXAAP3mrC3RCamcYiWvzK17gXihb6oB3C_Mcr7oVpwq9M-IQuv2PSDtha4LdgOmOlHymlp1VyU_pHwj2Y3Y8qLWYu_AO1_Hvkybxj8q6TUwRhbZrFHSWBJRL2SweCbEanyL8l5Ml6WoTq3RkikA_2y8Hm191uwCsKytn4BM7Q0Fcvm_IH0eVXjQ","p":"89ahUS3Qssx0TDayMVmnVUTGRKh1NKlNvIAdbgpE49clxRK8UTxrJxCrN5-CI0_eTpou0zDsWTHWZEp0v2MUhMvaI2zKShdwuEL6NDKtiIkhhYyUU_4XTLCkzI0n4tR1XMp1oGbaKIiBu1dy1YOOHMr06dPtldnWQuO6aJIlJG0","q":"xa85u0K2HZd4T6DsDonQZO_X1G28WXM6YYjeWqRVNWqfXCInfCqkBJOHEmQudvFYQuCvIKzr4Ds4WqC2UiQuvcazh8jY-c5P93Rw70w0vByeW_z15UU7fIeE0splZKRXXlwUfL58Y1eA18kPrzqd4VdNRiXqpUCWIed1bMjjy6E","qi":"qHAp5_62ytVWUXtBNOS6OXVxoMx22sn3x0h6k3owUvAeGLjPg_pTfKKlLxH7EEEnu3iFoAAxaYRfTmnhguwlhI9gq2tdg2mEXPTAZgYBHpdfAAULKKobDuk8rtHwTXxupEXKfeNzUPliH-PfaIGdjp6OVjiH1qWLImnkZu7PYS4"},
-              wrappedSecret: 'DyW4O4mImw/HG/dEA4TlY1eel6wGZ3AheqgSEQ4ruxuotGQbMBW2XTKFJWS5HlY3Be1zsOYg+RJzr+69Ma5RodE9Q+huI0CLKxs99nrADPDjIpQu1wWKipgjWY7iCSooMQkfAdmhWbrIhTfzTrYk4NANFUT5fHbmMy1I9BGbHolPxerKIF85KNGEzRt3a5vokyTedwdBWqNIyfVa5DY4FSTY7Fyv7Na3wTR1Yx/tj0pDXR10HZBcGTPn0rzzs9667wv+3Kbggk11eWQkOvKop2R/p37/zKoMXgprGd6OvoXDeZFVE9dNzCoNIxbLV2o4dXgKFuBOFclINnjOyqfgGA==',
-              secretIv: '16eu2GxWu4Wo/ly1uOas6Q==',
-              secretAlg: { name: 'AES-CBC', length: 128 },
-              ciphertext: 'lXIyndrvPD+XxeYLLmpNrg==',
-              text: 'test' },
-        ];
-
-        vectors.forEach( function ( v ) {
-            describe( v.modLen + " bits", function ( done ) {
-                var unwrapKeyAlg = extend( normalizeAlg(alg), { modulusLength: v.modLen, publicExponent: x2b('10001') } );
-
-                it( "'" + v.wrappedSecret + "'", function ( done ) {
-                    crypto.subtle.importKey( "jwk", v.jwkUnwrapKey, alg, false, [ 'unwrapKey' ] )
-                        .then( function ( unwrapKey ) {
-                            expect(unwrapKey).toEqual(jasmine.any(CryptoKey));
-                            expect(unwrapKey.type).toBe('private');
-                            expect(unwrapKey.extractable).toBe(false);
-                            expect(unwrapKey.algorithm).toEqual(unwrapKeyAlg);
-                            expect(unwrapKey.usages).toEqual(['unwrapKey']);
-                            return unwrapKey;
-                        })
-                        .then( function ( unwrapKey ) {
-                            return crypto.subtle.unwrapKey( "raw", s2b( atob(v.wrappedSecret) ), unwrapKey, alg, v.secretAlg, false, [ prvUse ] )
-                        })
-                        .then( function ( secretKey ) {
-                            expect(secretKey).toEqual(jasmine.any(CryptoKey));
-                            expect(secretKey.type).toBe('secret');
-                            expect(secretKey.extractable).toBe(false);
-                            expect(secretKey.algorithm).toEqual(v.secretAlg);
-                            expect(secretKey.usages).toEqual([prvUse]);
-                            return crypto.subtle.decrypt( extend( v.secretAlg, { iv: s2b( atob(v.secretIv) ) } ), secretKey, s2b( atob(v.ciphertext) ) );
-                        })
-                        .then( function ( plaintext ) {
-                            expect( b2s(plaintext) ).toBe(v.text);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-            });
-        });
-    });
-});
-
-/*
-
-var vectors = [
-    { modLen: 1024,
-      spkiPubKey: 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDYamp78gOm8dSC7lgPB93/6FdYIWTnd1rCMhY5YvGw63T6gIyKkCS9Lr1OrKQf0D7I+OMuaV7MAF3XpLrOiYm3tTfv9LMAP+ZQ6UK6Oz00zlnNxr+VkptRfBia5qEfK2mjcxxvw/or9UZv9D69Lp1ClFCsFkXOl+FXJYcIoobi+QIDAQAB',
-      pkcsPrvKey: 'MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBANhqanvyA6bx1ILuWA8H3f/oV1ghZOd3WsIyFjli8bDrdPqAjIqQJL0uvU6spB/QPsj44y5pXswAXdekus6Jibe1N+/0swA/5lDpQro7PTTOWc3Gv5WSm1F8GJrmoR8raaNzHG/D+iv1Rm/0Pr0unUKUUKwWRc6X4VclhwiihuL5AgMBAAECgYEAseb41h7ipbASU/d+aAy9kAr9EjORcT2KXC00W8RcjmVgajSWU6meqe3sLOp6mLRliGwgxRxVkzmR6x09e19Q1zIM8qyHVL1hkVVcWcvPS0wd5Dc0FhpaXBeSiRu1Vkzk+jMCA60IBzobWvvuEqglOitqBEaLPJwTM/E6N2ddggECQQD4tYSi7goCW1b05o3O99oYN2584Ns3H3a92AawUgAyi9HkW7MeJdtvE5gQ+GVxP/iUIxpjgjksoA3p+0xEXJ+ZAkEA3sKL5BQB3ChOV7QJ8WIqButQ4qPO/0lg4MuJxqYDS9/2EhyFHOldKdbcmuFh8hJ+aQpcDChfvG+ngb+kTAv6YQJBAOSrAChNdCZ2lJzW3ctNVtitHojytJsZ8rLZzEyRGF1g8LplFWrCo96cxVPVDm/xwTtyivCy6p59Ck33H0g7YQECQEE/QrJfmdvegnP17COj2SOFsX9w86Sa3aF6fLSO09BZnT3Y1LSPNhaXNK647XN2L0idHDEDcmdDXREIDRupNoECQFCv/0EUecHxPXjRVg86aSUsvbCCkhuKoJCY7GpB7xJdza96oeAFmLUGrkMHeqKHzg3CWTxkLEkDyNnR36yMilA=',
-      jwkPubKey: {"alg":"RSA-OAEP","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"2Gpqe_IDpvHUgu5YDwfd_-hXWCFk53dawjIWOWLxsOt0-oCMipAkvS69TqykH9A-yPjjLmlezABd16S6zomJt7U37_SzAD_mUOlCujs9NM5Zzca_lZKbUXwYmuahHytpo3Mcb8P6K_VGb_Q-vS6dQpRQrBZFzpfhVyWHCKKG4vk"},
-      jwkPrvKey: {"alg":"RSA-OAEP","d":"seb41h7ipbASU_d-aAy9kAr9EjORcT2KXC00W8RcjmVgajSWU6meqe3sLOp6mLRliGwgxRxVkzmR6x09e19Q1zIM8qyHVL1hkVVcWcvPS0wd5Dc0FhpaXBeSiRu1Vkzk-jMCA60IBzobWvvuEqglOitqBEaLPJwTM_E6N2ddggE","dp":"5KsAKE10JnaUnNbdy01W2K0eiPK0mxnystnMTJEYXWDwumUVasKj3pzFU9UOb_HBO3KK8LLqnn0KTfcfSDthAQ","dq":"QT9Csl-Z296Cc_XsI6PZI4Wxf3DzpJrdoXp8tI7T0FmdPdjUtI82Fpc0rrjtc3YvSJ0cMQNyZ0NdEQgNG6k2gQ","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"2Gpqe_IDpvHUgu5YDwfd_-hXWCFk53dawjIWOWLxsOt0-oCMipAkvS69TqykH9A-yPjjLmlezABd16S6zomJt7U37_SzAD_mUOlCujs9NM5Zzca_lZKbUXwYmuahHytpo3Mcb8P6K_VGb_Q-vS6dQpRQrBZFzpfhVyWHCKKG4vk","p":"-LWEou4KAltW9OaNzvfaGDdufODbNx92vdgGsFIAMovR5FuzHiXbbxOYEPhlcT_4lCMaY4I5LKAN6ftMRFyfmQ","q":"3sKL5BQB3ChOV7QJ8WIqButQ4qPO_0lg4MuJxqYDS9_2EhyFHOldKdbcmuFh8hJ-aQpcDChfvG-ngb-kTAv6YQ","qi":"UK__QRR5wfE9eNFWDzppJSy9sIKSG4qgkJjsakHvEl3Nr3qh4AWYtQauQwd6oofODcJZPGQsSQPI2dHfrIyKUA"},
-      subvectors: [
-        { text: "",
-          ciphertext: 'TKeCGtHTEpUOjSE2+rerTI3msiZu/CT5OJ58J8nFeKy9aK5kGvffXA6eCbXix0Q4gRWXwQlZ4du89DUchLDAHqaz1vDBPSTFQ47xdTxpraZehVLU8/frwONv1UA/0/7pVkr899AxtylYiybuQkhTNUNiNResebfsDpmnFYRY+ag=' },
-        { text: "Hello World!",
-          ciphertext: 'UEGYBOnSU8WFJxLvG2kHMDN0y86M7xuA2c3JHovIBcUMVf2Mr12x1/n2kl2OHhTC18355GOxWA3xARbbuhRV4umUtmzIxAnI7s6FpmasJKjQkEagBXlco1DWIB3/5CyW3iUHt6RuG+mMgns4heN6F6mgDympKMM42tBHAeVjDIA=' },
-      ] },
-    { modLen: 2048,
-      spkiPubKey: 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw3bzCBUL8ZV1jwM4twWbtcAfihBMEVsjVwBxDcVnqKPgqNVtnoQAubd7QDVAIYsgXn2ozLwIxcJK4CY6NI4ihfVjaDGSZDDNuTgJK5Vb/N5+5uG/mGSvtak7jDpzfo6s2Az95U7HWcoxev49Zp+0XjIAgjiQBPh83sdj1/76LFJn1Hjv8aMD9WrSH1T4Sgpa8TbH8Y73rz+qqYdBdgoyMUPiFXwXTzM/PIbQc6KD8xRdt3J9wwk0gyH4rg9Lwk6fBQ8aQb6KoItXYaM/UqQawwVM3fAwcFTbZfDtEW8GkyMXtl65D6duYq8EsF+Hc52lnW3561eCiQ5GmBl8Db81ewIDAQAB',
-      pkcsPrvKey: 'MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDDdvMIFQvxlXWPAzi3BZu1wB+KEEwRWyNXAHENxWeoo+Co1W2ehAC5t3tANUAhiyBefajMvAjFwkrgJjo0jiKF9WNoMZJkMM25OAkrlVv83n7m4b+YZK+1qTuMOnN+jqzYDP3lTsdZyjF6/j1mn7ReMgCCOJAE+Hzex2PX/vosUmfUeO/xowP1atIfVPhKClrxNsfxjvevP6qph0F2CjIxQ+IVfBdPMz88htBzooPzFF23cn3DCTSDIfiuD0vCTp8FDxpBvoqgi1dhoz9SpBrDBUzd8DBwVNtl8O0RbwaTIxe2XrkPp25irwSwX4dznaWdbfnrV4KJDkaYGXwNvzV7AgMBAAECggEBAIMn4qVusef1uL8wkzLD0ZqgAsm6a8BNniX3xuRNrGONKuc+5uIxgucbBdmsoY6gcyTUPpq6JUzFNUa4f9/Z67JlWMGGWcter/vzbLvQ6buAdDhqDAyuqvRDTRCn++1UwQfrl8XxGXTXZmI4DG07BmUaOhsm5wRe1DMMKaO6lJV9vSOf/Q6M/51Elx8DSxo8riHtBysgi/i0wPoJL/CnAwxaOe7nes/nHwjhwgxdIVzIm81ub3q3WqcGtTNhUd0iHK56owEmynQjPyJpj8loEvp3liECm4v0tzzBfl3LoZR+puM6NM5M0lhGS5xFdpdWgdIlsifjJXL3bElGlXU8PAECgYEA7hLRavTGFovBVdmHf+tvcxVO43AkkPMj83rm4lFjfr2QwNEk93GCUz+2XYRU4ceYfpl7WuaUwX6sQhEp8hJzabZ0zX2cFZB7pLqtLLtw6kUTJTbdtcEv1VqibarjitTpxSVv+j4vB6/X2LBjWXWZ95kdoaBI9+X4KFRZpuod93sCgYEA0i7KAgHFKz8+2Fp9Yh9fk6XLTX7EvRVe6jPwxbr60sCBwZiIvKLvaPmUJn93MFk9rthTzB69RKWko5fzTxDfHZNA8uarOspAc4Um2wTUwEAhSzlqEO19wmtDiPsmaJJ5XM0P7Xx2FhZ+r5dmzo5Pob3IkwjRcWxsYSw7NX3gWgECgYEAos0biBh6nVBUlXB7yG4neHtJxx4Y40Zhf068NGeTskfPhQuAS/XDOUqIWsrzgLINBgXO5QppDyigg01ZccBMTC4JEbyjz9tNsgg2BDDptkomHXy3gGLrYurnyDbkAzw14CsJuAZuAsOsxvFX/wT8lOSP7sa9H0iTuoB0DkBq3aECgYEArJ5AyeUqSZpnwsiOsUeS92/yyHKUobYrfa2q0Ln/xZbU+mqL4mDuvwg65GNLQCoKvs5sA/g6+WYREUp6STVSCLgnX1aSynXQ+Q8iGj6dfEcvENjWg5CI+GOf06BwqvGhOtYvfpv5X6qZ4Rw3Eu1N+Ugksp1LZhvl5uisuAHpgAECgYB7x9OaYaqGaDv2LFHWH3gaEagv1OTxcJZu3cCJvDk+ihOs3x1g6szojEsbeD3wcdWmAc5xXEl8sjmbxu1oa1eRDuzoZryLuuw3SRM7uWt3Tp1WWWzOdQGp7a3FLM/DQ1iG/7woeGPjH1C1MR7B8KdqsurK13UjrjE6hY4N4H5MnA==',
-      jwkPubKey: {"alg":"RSA-OAEP","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"w3bzCBUL8ZV1jwM4twWbtcAfihBMEVsjVwBxDcVnqKPgqNVtnoQAubd7QDVAIYsgXn2ozLwIxcJK4CY6NI4ihfVjaDGSZDDNuTgJK5Vb_N5-5uG_mGSvtak7jDpzfo6s2Az95U7HWcoxev49Zp-0XjIAgjiQBPh83sdj1_76LFJn1Hjv8aMD9WrSH1T4Sgpa8TbH8Y73rz-qqYdBdgoyMUPiFXwXTzM_PIbQc6KD8xRdt3J9wwk0gyH4rg9Lwk6fBQ8aQb6KoItXYaM_UqQawwVM3fAwcFTbZfDtEW8GkyMXtl65D6duYq8EsF-Hc52lnW3561eCiQ5GmBl8Db81ew"},
-      jwkPrvKey: {"alg":"RSA-OAEP","d":"gyfipW6x5_W4vzCTMsPRmqACybprwE2eJffG5E2sY40q5z7m4jGC5xsF2ayhjqBzJNQ-mrolTMU1Rrh_39nrsmVYwYZZy16v-_Nsu9Dpu4B0OGoMDK6q9ENNEKf77VTBB-uXxfEZdNdmYjgMbTsGZRo6GybnBF7UMwwpo7qUlX29I5_9Doz_nUSXHwNLGjyuIe0HKyCL-LTA-gkv8KcDDFo57ud6z-cfCOHCDF0hXMibzW5verdapwa1M2FR3SIcrnqjASbKdCM_ImmPyWgS-neWIQKbi_S3PMF-XcuhlH6m4zo0zkzSWEZLnEV2l1aB0iWyJ-MlcvdsSUaVdTw8AQ","dp":"os0biBh6nVBUlXB7yG4neHtJxx4Y40Zhf068NGeTskfPhQuAS_XDOUqIWsrzgLINBgXO5QppDyigg01ZccBMTC4JEbyjz9tNsgg2BDDptkomHXy3gGLrYurnyDbkAzw14CsJuAZuAsOsxvFX_wT8lOSP7sa9H0iTuoB0DkBq3aE","dq":"rJ5AyeUqSZpnwsiOsUeS92_yyHKUobYrfa2q0Ln_xZbU-mqL4mDuvwg65GNLQCoKvs5sA_g6-WYREUp6STVSCLgnX1aSynXQ-Q8iGj6dfEcvENjWg5CI-GOf06BwqvGhOtYvfpv5X6qZ4Rw3Eu1N-Ugksp1LZhvl5uisuAHpgAE","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"w3bzCBUL8ZV1jwM4twWbtcAfihBMEVsjVwBxDcVnqKPgqNVtnoQAubd7QDVAIYsgXn2ozLwIxcJK4CY6NI4ihfVjaDGSZDDNuTgJK5Vb_N5-5uG_mGSvtak7jDpzfo6s2Az95U7HWcoxev49Zp-0XjIAgjiQBPh83sdj1_76LFJn1Hjv8aMD9WrSH1T4Sgpa8TbH8Y73rz-qqYdBdgoyMUPiFXwXTzM_PIbQc6KD8xRdt3J9wwk0gyH4rg9Lwk6fBQ8aQb6KoItXYaM_UqQawwVM3fAwcFTbZfDtEW8GkyMXtl65D6duYq8EsF-Hc52lnW3561eCiQ5GmBl8Db81ew","p":"7hLRavTGFovBVdmHf-tvcxVO43AkkPMj83rm4lFjfr2QwNEk93GCUz-2XYRU4ceYfpl7WuaUwX6sQhEp8hJzabZ0zX2cFZB7pLqtLLtw6kUTJTbdtcEv1VqibarjitTpxSVv-j4vB6_X2LBjWXWZ95kdoaBI9-X4KFRZpuod93s","q":"0i7KAgHFKz8-2Fp9Yh9fk6XLTX7EvRVe6jPwxbr60sCBwZiIvKLvaPmUJn93MFk9rthTzB69RKWko5fzTxDfHZNA8uarOspAc4Um2wTUwEAhSzlqEO19wmtDiPsmaJJ5XM0P7Xx2FhZ-r5dmzo5Pob3IkwjRcWxsYSw7NX3gWgE","qi":"e8fTmmGqhmg79ixR1h94GhGoL9Tk8XCWbt3Aibw5PooTrN8dYOrM6IxLG3g98HHVpgHOcVxJfLI5m8btaGtXkQ7s6Ga8i7rsN0kTO7lrd06dVllsznUBqe2txSzPw0NYhv-8KHhj4x9QtTEewfCnarLqytd1I64xOoWODeB-TJw"},
-      subvectors: [
-        { text: "",
-          ciphertext: 'onOPhl9Zwldpdk0V9axvLzEQXpHlOOgaTfP8/lAg/PF050/5BGyxhPGrQcTkdvL1VJzs743+feXWj0/8UVlYcbEOurKf0NkTxNN9lD6jMyVIibnstjz5vpubk6l7o7WCPQ4cB/f/Jty47DgRjOA+HPBf2E9fmXh0AYeCEDIgpU4DBj0BAmxZgt4SrQdTzjtNNzeEAl9LQk/ePz0e4qfuBIcM7eiuY+8Lc/ww/1Cd7DegjhwBAwEoYUd8v5RdRpi3sVuNoxyYKIQJPyxkt4dLVxJyDmh6ZmjFlnrOVsHtQrlnbLdfwQYzAzgSIVb4iZ9l7TfFjzEXjLgtiJuDwT6WSQ==' },
-        { text: "Hello World!",
-          ciphertext: 'Di/y9DtmRhUoyz6Tpn2EEuNStsgTkmKcCCHRqvCEOUtBxNFAnU0FJtovISvWHiOjQKbAHY7OlgcAJMXbGSVr9QtijKWvuxb+V6Yrucj48tdwqQByZDS9F26NCydGZOSOrqNo92hGIGT5/whBd3a8spnCq89u9ABhhK7Ak57IysXhYjYTJnPU82w+w16tsMtulmsWSy23hlyBYFRvGNF0OekzndrkM4EvALHuk70VWV07SUppeVNJklvCh0VQ0N7VtZe2PGeAoya21hKGNupmYBTKE1L4PG8K5wbdqnDQJnjnEJxIjqOjHBzGsFuw3dOH4+uUmtYpFHhYDKFwZIXfjw==' },
-      ] },
-    { modLen: 3072,
-      spkiPubKey: 'MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAvLGhydJcuMXAzNBhpcn/O7Tcx+Ur5hUSD2QPX1pkP2Oz63tVP2jMjjw8+yoY/xgOcx/ty3McDEyalIvLA0xzh5oOe7zlaB3nPWUDkIFKirzNWBmnqCX9z3aufw7Nwyav3NG3r1imnaSX2M2KWiHUmjW5n4UKvlpLPaWaIp18Lbp1Z0QKIYyaO+9uBdyKoG/17IpFHmt+IBwUp8WtQk1k+u875Dq8ZBFlIDlhmgRSjrsxHn8uWr++VxuhlA0Dw8NcrXJVPTMI9PatqkHAnwxk8lECL3/oCADmzJIqNG4hf3NVp5W+w+N4XU1/mWD/dfnkc0EhZZARq1jltrXdon1DzlBWXrVh20gzUbg/tXY1IgJ4Ff3Ij7iv2PUj7GTkPwTSk11kM2WnvcSlaQaHElod98UNnyv8tW95861QWLuRddaExvLF+thYtJZtws3YxxnhMlwpr6MW5dhYRb7WBXgYyyaoOg4opOXKIh3pali+dp6aDo7JU/PJ2I8mlchSF+uJAgMBAAE=',
-      pkcsPrvKey: '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',
-      jwkPubKey: {"alg":"RSA-OAEP","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"vLGhydJcuMXAzNBhpcn_O7Tcx-Ur5hUSD2QPX1pkP2Oz63tVP2jMjjw8-yoY_xgOcx_ty3McDEyalIvLA0xzh5oOe7zlaB3nPWUDkIFKirzNWBmnqCX9z3aufw7Nwyav3NG3r1imnaSX2M2KWiHUmjW5n4UKvlpLPaWaIp18Lbp1Z0QKIYyaO-9uBdyKoG_17IpFHmt-IBwUp8WtQk1k-u875Dq8ZBFlIDlhmgRSjrsxHn8uWr--VxuhlA0Dw8NcrXJVPTMI9PatqkHAnwxk8lECL3_oCADmzJIqNG4hf3NVp5W-w-N4XU1_mWD_dfnkc0EhZZARq1jltrXdon1DzlBWXrVh20gzUbg_tXY1IgJ4Ff3Ij7iv2PUj7GTkPwTSk11kM2WnvcSlaQaHElod98UNnyv8tW95861QWLuRddaExvLF-thYtJZtws3YxxnhMlwpr6MW5dhYRb7WBXgYyyaoOg4opOXKIh3pali-dp6aDo7JU_PJ2I8mlchSF-uJ"},
-      jwkPrvKey: {"alg":"RSA-OAEP","d":"E4nJGN7BXxiK6CpDkikiVopZuhEOxJo17oYL2XHAo5etT5rLru8pDylJnzAyumdBR8Zslv5qTxO3hd4bvVGzPL1E9qcOkgNWqFLHVbUthMQb9x1g8NZOO6csVlewEp704saMYImrZvNeDcLqqn6KRxV9DPl3rVIoLE_zb9Yiv5FpCrJO4j5u0fnuyIiXihlNu5ptocK7opOFyAF9-TmOVTVkXDOAwlPSxs1qP8pmygS0B1Zf9GGaUea4il32n9SgnGZz8zDzzpNnscb87ytklvazHKDrsXyx9ODuHe0JBST4EIjOHV9-8w_QaQ8dScosOzOiGr1aDT0g1H_mNkOPQZdguRJwwMZp-HihLlcif_dzVdOWRFBXtjRYHSi57t92rfAkPBHaTu0NzR1gokEAFUbxIzAJN_maAuah2xXwZV3x92ayDzKXsiVC3-mqkQRji2OQ9adxYsO6R9fCZ8s5Dv_1F3kjUSAK5If9wKUD-34kHbCtGx5RL2HO4Z4DJ16J","dp":"X-iT-xicpzzrQ8hDkV0eCyl-EGwJHGsRvsK2WqOV4-162yKhddqtGb3mfhrWcc62NvGOZmya_DlyYdYNdjUnuOo-4IntACWruGXeUEsWftPNyngxclj5PMC19h32F_luDJ3cydyU04AL676jjmy_PEPIvDEuZMC5MolhFtZSLNLtumbb22vfvnYDJMLsQH1_Y3X_wH0-Nkc5fdxmiqrlKXXw9bKs9medGgZ_q-whn9-zfABhcJYdGMvz7ZA2R8D3","dq":"cq9mPn8PpEza3MC-qqzXVLQcW9xONWHlLZe8WYrmdKXmy5ulrkCre--Bwg5Z0cUKNi3lVjVrQ1VvKIOhhQI1gNcbox5dFA7GUXA1jzTG0PQnjO9N8BO1ofSHldQ44aXZbm1eyVRp9YjJXVAHzyB8ikH8FBzzg8p2ooN-qPQQyK3BpBKyP3d7b8kRBXoRYcmnJZ7t_bjGiGOA8xy6LCzam0bSpr8SPCLkTFm2fGq3bXcg6JqxJBsfiB10SZ6bAqd3","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"vLGhydJcuMXAzNBhpcn_O7Tcx-Ur5hUSD2QPX1pkP2Oz63tVP2jMjjw8-yoY_xgOcx_ty3McDEyalIvLA0xzh5oOe7zlaB3nPWUDkIFKirzNWBmnqCX9z3aufw7Nwyav3NG3r1imnaSX2M2KWiHUmjW5n4UKvlpLPaWaIp18Lbp1Z0QKIYyaO-9uBdyKoG_17IpFHmt-IBwUp8WtQk1k-u875Dq8ZBFlIDlhmgRSjrsxHn8uWr--VxuhlA0Dw8NcrXJVPTMI9PatqkHAnwxk8lECL3_oCADmzJIqNG4hf3NVp5W-w-N4XU1_mWD_dfnkc0EhZZARq1jltrXdon1DzlBWXrVh20gzUbg_tXY1IgJ4Ff3Ij7iv2PUj7GTkPwTSk11kM2WnvcSlaQaHElod98UNnyv8tW95861QWLuRddaExvLF-thYtJZtws3YxxnhMlwpr6MW5dhYRb7WBXgYyyaoOg4opOXKIh3pali-dp6aDo7JU_PJ2I8mlchSF-uJ","p":"7WD_lMSRccxgpgPXctpvFqXRl7PA2k5Z8yVbwMou4qHP1vu0F1v7NWzzjqouoCIb6v-xpmgFu0OxGhQzDL0gIKiH_4svsXGqdTYZfIwswx-Ng4OhKWmKvk4f6ZuqyQhX_7p7Jhh8cqH5BIU4BGlb54y6XGMQe74LTfCL_sujVU_Qo7R02cKjeG6x-guNre9thOaOR5KLlR_B3UV4ABdbOKzPguRdjvKQ-nnGk2-JKReh1JbV2NcSdw_4DFZ4LGNr","q":"y37zDxWMu0EAPWgivBCe7UZ2QhXuMuOJsk8KtBsylkE3vk9lz2bOnsG1R56oqX-7p2vdgvfhSV7XciA-YmDKE5BUWl4cnU6fPIhsuyDG_WhWV12OFxByCrr_bV1KYG4ysimUxFapVxScxKigoRSoxv7RLl6GEP6xZrZ55LJOuoFyhXQh-jQn4-svQMdUlENnieF8k7wTuFi6L_YAGnE7VofgbsxuucZn1h9Vl85mZrkB4-0hvTpH9A7AjaLdQ13b","qi":"R0dC1GzG1cI9jfKMK1Rq-W2K5buyEg3b_YLILaBohVrvcmnwPZUziY0nW_JVM_J3A1XGmOb-1kgdTFUOPWFu5bGMrLNqI0R0EhlPXwa_Bhbn4aKzGfxRegPIBwoqwaQNaGBifLZBqdMxjEdjfNXApMEJYb0y3UvABRVRtkiIfpulrE-aZqelh7ELmuFc1W21m9Qru6_zv9RuzPla-orl4x9HKqGZFlCyasGimJ7iAtkZcaIik551es2KuUablcH5"},
-      subvectors: [
-        { text: "",
-          ciphertext: 'ssMzh73T84FZbRCp1LL7FnMPp/YqXjLnpUOPTqV++2GeZ2/L190FXedjyRrKb5hy8ctNzLqkW+KVwCDOC+J1HUlAjvZcI8071WpNz+FjVQMl9Tp+sbm1/Q6uswIAF6IWcufrFtxuGHiGuumyWZ6zIiN9+ygwjjIMciHb4eOjnao/dZHpyXDmruBVdOSywwlub59jvVcN87ycQoI4tERsZ57U4V/KeDuSe9TJQyV4yo/51szbVoUrmm4A8LeYAyb2PY1w6JSIoqdUh/dWG/xb51kWGJeVN7MJtfEINC/dz9IfGX7kj3kQ/Hm+3842XBwAhCoppopZKlJgnCQQNQU85GTnfidsQqCfwIekAVldR2mOHhaDcVlC0nZ4WWbbeAAZLzfMPDI0DfugllNGJf8qaGyGZscnukPaOcFPTXed1kCMerI/kiPZwYY+p7IR8pC7uq7zYvxH5VcBXzbkJYuhu7+d4Idb9pmb+CYiSQMgcoq3ravuOgMvwMhvJJTGhM50' },
-        { text: "Hello World!",
-          ciphertext: 'gzu26BVAirq2HBADWGwfEKzmXowQuhAnNZ++HZ1EDDXwkPjlTJgS+LLu3wOS1Ga3jT7AGoRoIVtm2OKJjVfBCqc8uSpiZxMYj7qy1KMJ12SVVpziSZq6Njyr5PTjgISy/64CFumBpCphBjhszl8UTXk0slIcKVqyH/JI0gJae82VdWc/t/fiTISVhA60RNukGl0WCaVdI8EhN5KdeXJHrKcJNuT9aIU7qbELUrJ2x4Zmstteng2IXdEy8bSE17QCIu6mmdliUrWKsjnEcRyAlNiFOyNdPvAsMmJsLOrzgpv6cvEOrRd0nL95Pucn0gzB8mVOuqG73wpknmujKZqFXtUsEVTZd4qs7MsdEbpzscblEX/rrMWn0qLq3Kgwu8AchKavbVBZS6srneAMTy0Bg7bHTsh/PwS373mHaYJMPQwOqScelgbpZKcxv805Tc1q7SnLTZlybY+JfvY6GoPLgHLzwQyUAh96dFeOq74lEsjVNoZAc4f/RrqbaUp7bdYt' },
-      ] },
-    { modLen: 4096,
-      spkiPubKey: 'MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAqJ+9n7Lg3x3opsqG5EnTocfqwxub3Oqycgxo3aC/3OrLEEUHQusbwFTpO+05BndpyqwfBNSEfOaRNhN9gQqRshjPXsKRdS+VdJ7w6gDUPSAhqevCXqsoH3e6Epp0ceGL62jZ2gpuFhxqVJUv6S2QN1MNM3DvQ1B+wkISKFaJ4v146dvVw5kEk3ROf7HAR4szC/Y4ptxLQLQC9Cs1N1djPvdFEaD0DHJFJtkdPjWD6ofb2KslNpNacrohfYtcc0FAH+uDTIG0nJ8N86QbDojKXds0uXnWGB4kEEk3Gi9EpP2iem/1dLx0fUeQ1u9PTU6riwRfc5jZWb/SETi/1dLAwkz3g8pt0OYFLFMFcem9KG2EBk8a7vfUvxvirUuAgCe2KAN2KH1hsQ8wGAOLKSwMCnhXIFWZ1JLi74j19wQWFnVwNgtBFcP/f1z7I+W3mQj45sw87WdU+d2UKaCrSoiu3RXMK6acbq1hA4J2F+nQHvJYnzWGg6VJI5+I0NcweMyMZi7lbzHFUQXmnN+gbKuyly12FlGCcmc7UxiPnc4gL9fIzQV1dNOkZ2Tf/OnCpyWICZAZ8DBqSf73HwREmfqlq05PelvZv/tt+GdNtqvvLiWjCYYNk/ltWLpyvE+zaWNemVusGkQ4r/msSdLUwL+oQnm+nczQmE4bQYuwY211rVcCAwEAAQ==',
-      pkcsPrvKey: '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',
-      jwkPubKey: {"alg":"RSA-OAEP","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"qJ-9n7Lg3x3opsqG5EnTocfqwxub3Oqycgxo3aC_3OrLEEUHQusbwFTpO-05BndpyqwfBNSEfOaRNhN9gQqRshjPXsKRdS-VdJ7w6gDUPSAhqevCXqsoH3e6Epp0ceGL62jZ2gpuFhxqVJUv6S2QN1MNM3DvQ1B-wkISKFaJ4v146dvVw5kEk3ROf7HAR4szC_Y4ptxLQLQC9Cs1N1djPvdFEaD0DHJFJtkdPjWD6ofb2KslNpNacrohfYtcc0FAH-uDTIG0nJ8N86QbDojKXds0uXnWGB4kEEk3Gi9EpP2iem_1dLx0fUeQ1u9PTU6riwRfc5jZWb_SETi_1dLAwkz3g8pt0OYFLFMFcem9KG2EBk8a7vfUvxvirUuAgCe2KAN2KH1hsQ8wGAOLKSwMCnhXIFWZ1JLi74j19wQWFnVwNgtBFcP_f1z7I-W3mQj45sw87WdU-d2UKaCrSoiu3RXMK6acbq1hA4J2F-nQHvJYnzWGg6VJI5-I0NcweMyMZi7lbzHFUQXmnN-gbKuyly12FlGCcmc7UxiPnc4gL9fIzQV1dNOkZ2Tf_OnCpyWICZAZ8DBqSf73HwREmfqlq05PelvZv_tt-GdNtqvvLiWjCYYNk_ltWLpyvE-zaWNemVusGkQ4r_msSdLUwL-oQnm-nczQmE4bQYuwY211rVc"},
-      jwkPrvKey: {"alg":"RSA-OAEP","d":"bGwBxhyDQJL_k7cnUsQxgpWD2p328u4pfPGDv_VrSEXj-XsY9ysq9dji-rhGcWT4retMKpPm-FRcTDPt_7nnAme3douOcZX9-DV2XE_aJ89wNcy0dqCAtPMLvoh3lP3cNKp_YRZRwH_W0rn2S20TjK8nDstv3I12Y7uN50f1cvFd_KhwY0sRSSqAitSk-JuFYAyaUpfU_y5_s7XQitvyoXrmezZNlW8oDZmOlwBb6MIgVsl8rQHEJ36MqCeicy0iaSPKkbfYhNg0ZVNAXnEQBZc76IJxaaJ_t8UL3BdGgPvgq-8vGTdPg3ovpDPNfry1yjYulapTHsUa8h3WI0tWyszi2Jm0AcnA75Mb330r_PAl-8eoO1JYApQzH1fzurrLOnE3cm9X5yaKFmMpLAWDqFQVG-HvO1X65OnGFxREwwACUMhMsQHIuXMyTM_tqJHzPRoVspCTbhyquAd-2_tOY1Ri90svYAiWu5NyLwmSbU7A_Bhk5TqXxioyozPxcsJqB0GnDjD-AbpD92At8Y2Wv1dPm_k86s1dTetVzAf3tl7FZsiyIQ3qo6QhJ3yf4stO80UhsZweL57fxR7lqhZQ3yV7N6edZsFP9Lu-CUhFNLaigmtyDaWQe5vmCJaRpkW85X8lnWfKasMyJ5o4ayL3izFYRZBeOiyVkYO4MmgWZMk","dp":"jwsIykpbxxOlT1LOVhlAP2hPLROyWTeENbS0_QlYH_p-PYUoksA-3lBD44b6eQfNvTxQh9zi_E34bg0Ue8Qt7Kj85PRiguuv8FHK9nDCJAhVZ8YwlC-sigTNV4B6T65XnE2znCOEQunbcADtQG7pER5YoeIKLyhid9sVps6J3c5H_D2f_ncNFmuiHprpbV3CjlyzlQ3CHh8CTwUwA6QMGD1MsU2953Mp4zkzHa3VmkYAUnDd8BUncRQ8OjkebKA73S6gRDr80AnwyjX2-dM6RVoBhv1rEXmVNEDQQ7BbEj0m_FI5nKr2S30BqsiTIFhpn4yDN8To8Xu5WSua0158lQ","dq":"qHY0Mc2HBHxtuo9AJ2e28QbkprEusDDszPBGV2l5mgvyCn_BdS9M8LWza_328YEntdE-dk08APQ28-33FEH8vOrE1oHqDqlsJ7BGwq1W4mdQGC9xRJC7Zkzh51uR4QVX9L2F5MYGaIs9rQ2FJKeG8ie3mL9ruk0GJHQomRx67nyo6xqkN3G_xsM0I5Sc8A3ax-vas1ZFTIP80HbbYx8e4K2pu_us2qnV5-_E775sSyS8qT7ULb0zAlUUKlD5MyePZL86D6jSZ63i0dTIfXOuvt8jV_2KuUsLcVAYdUnFsdP0kbofXYG1I4-WK4rB_ld5An9TdoKcVam_GrXJkvAbZQ","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"qJ-9n7Lg3x3opsqG5EnTocfqwxub3Oqycgxo3aC_3OrLEEUHQusbwFTpO-05BndpyqwfBNSEfOaRNhN9gQqRshjPXsKRdS-VdJ7w6gDUPSAhqevCXqsoH3e6Epp0ceGL62jZ2gpuFhxqVJUv6S2QN1MNM3DvQ1B-wkISKFaJ4v146dvVw5kEk3ROf7HAR4szC_Y4ptxLQLQC9Cs1N1djPvdFEaD0DHJFJtkdPjWD6ofb2KslNpNacrohfYtcc0FAH-uDTIG0nJ8N86QbDojKXds0uXnWGB4kEEk3Gi9EpP2iem_1dLx0fUeQ1u9PTU6riwRfc5jZWb_SETi_1dLAwkz3g8pt0OYFLFMFcem9KG2EBk8a7vfUvxvirUuAgCe2KAN2KH1hsQ8wGAOLKSwMCnhXIFWZ1JLi74j19wQWFnVwNgtBFcP_f1z7I-W3mQj45sw87WdU-d2UKaCrSoiu3RXMK6acbq1hA4J2F-nQHvJYnzWGg6VJI5-I0NcweMyMZi7lbzHFUQXmnN-gbKuyly12FlGCcmc7UxiPnc4gL9fIzQV1dNOkZ2Tf_OnCpyWICZAZ8DBqSf73HwREmfqlq05PelvZv_tt-GdNtqvvLiWjCYYNk_ltWLpyvE-zaWNemVusGkQ4r_msSdLUwL-oQnm-nczQmE4bQYuwY211rVc","p":"1RaoeorsMF0s-YSxpZ4FqO2Xl6XHfc4yp80icmQvrT8CVty22t45dbZ791upFnxy9zmtI4n2EXBwQoIOpT1OkpvLbljLYXsKmiqXOZJB7AU44BMihTWeyVIx86yi4rv-zherzGpfidcwEF11xbfUhVIpmGodf155hl6CSUYNgITMqAnBBBRRN9rO6ZpatTK6uFFKb1Ygrbzl6GsoGPmzy96-gU_R8aUdihQ3k4oyTML5W3g16ZpxyR0RS_IJyTlX0QsxR7JzZXDVsmoHVKfX1EQlM2AbRd3Mzb9XsePCVX5iNahygtBcHfO3kG2p9FAUn0oXdrgvtMyof9wtqU4OMw","q":"ypTOI0j6GHOj1WPwatXmQLDfNLoO-N9Q35RQn6IiHBtR8nOx9Bm7ioXPEjVsJ1OYQl5Qe2NdOC-S_CXWSemxPUY_Wq-BIxnJmcdVXn8qBp1hvpUvTChqaxKFxZTcED_GjU_oyYPm6NX2736W4RI6fV2VdQ7Brd2u8Lr6RUDPL2Ycz_VTEDhAaYjvq8orxdwxAsxDBIwAmHZ0R6k2G8Xk25y_TU0evHqkAtOGaXO_RzFkPH_PztqDm5JIMfdYYYUtO2j8CPBACVIlBecWO8xBThB_gBYb5_U8tvfnyXvb9c4dvfVvpjEn61D8R8LF1CSnqp9yNJxIxbreRUVlId74TQ","qi":"AkoaqK1MUomIYtT5gx3nE01hph4SWjMQLkgzQ-INWxVIMQDjKq0iPm7hpaKN4BznqS_LXwJjwtoVkFSvH3fbL3bOo7AGEX2NfBfK7FnZhL4keFk7I0WRsNZam8o-62Gmh3idhaNJmUKkJg0ivwc_eWj3tkuAS3aLbTwRPTWLvZUrq4c7T0rc_8O-E8D175Q6YjAeIdSaxPB24gu8z8UVIpAuIV_a60NZpGaNpDnI-RNC8BISxclTXvcnJxRAGQW4pS-W7O8YkXDvloYo3cWm3nwqfr_VEjbMIeNbZYNe-jLZ6wKXoy1zVteOcAm66fPFcXIAt3FkOm5WvsXKWvk6ig"},
-      subvectors: [
-        { text: "",
-          ciphertext: 'fIIhjRQ9lH6uVsISeJgcz/S+6y3EOpoGQs7j98JvuQmd5P2/ak0L3d1IaTFQTHirXKbSu5RNmVKxnGjNsP33Ch3yEazUsUw6PvjZaB7neCEWuVZQBtjbIr10K8BIZ+4Kqu72IpAPsmzXDOadTWC1tFUDVkAI3aOblXJssIwHFmc1rfwuHOSurkot7LL2oy8H4DANU9ypxuLR4s2a0KCg0R9XboOU/dFoEwt0oj9KRT6Z5b//B0pw4stFb7X7qP1ifbogqBFw3aza4JBhaoq/vN11QW2LS3WmWKdAiqngnks9Yq3yfyiYlSuaSF+DD9ysauPID77xNb1NSjzFMdS/KzQWdIZx0A3+nPCgSmn9UGJH7LrEgfCQH9IpnOWAPNsyVApT+qG1Z3YHLKKgdRIaCgfKiJyyl9DwiFeDIHOVzSxaJb+KoerU2gkLYh5bQ+Ns3+tCXI/cXYVyY4Kn4HfXF/N6SrIgkBs4/IlhHn886PQW++0XP8RzUWK3KnOCWCs+2UXh/92K/2iaSQGwF9s/ke6DiKygwvEzmNgO20k8NTKcHo/Wq98yop2+KvkeR9Mxr1aioeUAVZU+ZMmY115Vo3/2JV+UE8HlDN+9+o9LJNaGIj98ZCrUAACTIHCK/HY+VBrzilZLhsbrsoVO7ve7Wh8roEqstFMTZ+3gUeZUsiI=' },
-        { text: "Hello World!",
-          ciphertext: 'ZPn/xhqsZ10ZwEED71HNfFEk6jhiTFzf2cwMKL/yEco0NsT3UNxEDPTuCkqYh5A3QT/4Ifc5PPHScIUjImbfYJ0JkhxGWu9u/bvWRkRd1YCYidIujcnxuOkd+NoJaPBG5FUSp0m++q9GbcvDTjgErcU3zEjB99HFL76pLKuzxBUn8U4b5N3DdGiKZ586bGzP2lPLHT3rLLBQJS7Sp0pxxpAVvM4ttP/lB9k2pQQxavkAtYOSkY5O26b64D0Jl5qQ6D4K5jsjYyjUtOu52khGr2kZWNypXtyRUlY63R0plTOh6JzZh1M29gJxO7Vs3/nt0mwrupIbx3ROlEznJ4YRN4i3C4vpM5LRjbeT5Hb7oGf8hNasAmRZR1FgwVyJ6yIy0bOPG41CeL7UXi0XDemHKPJazdY2lMHR0TVGMmbV9hkd6NNC8hivurupkiKZP9Q8E/MGT+8nSusYxLT6NXmxzkRyr1XVfmNXDIsBepVrEhwEXkoFkGw3xPKbUqt78tfpUzhavniSqi2mQzIDuSENnwFSy0cYinuyYxyYaDKR10H3HgrbvA3iNSTAMjcRFa5KeuCsTchD1ttWBzRHrlDgkdqIQMsLSaqHHhPxEUFDIGwBB2EOkD0/nwj09uh7JBfXzCvOII9ybc19++8SuRy6jWNu80RqlH2IOIwPiBniePg=' },
-      ] },
-];
-
-*/
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/rsa-oaep_sha-256.js
+++ /dev/null
@@ -1,337 +0,0 @@
-describe( 'RSA-OAEP_SHA-256', function () {
-    var alg = { name: 'RSA-OAEP', hash: 'SHA-256' },
-        pubUse = 'encrypt',
-        prvUse = 'decrypt',
-        jwkAlg = 'RSA-OAEP-256';
-
-    function skipModLen ( modLen ) {
-        return modLen > 2048;
-    }
-
-    describe( "generateKey", function () {
-        [ 1024, 2048, 3072, 4096 ].forEach( function ( modLen ) {
-            (skipModLen(modLen) ? xdescribe : describe)( modLen + " bits", function ( done ) {
-                var keyAlg = extend( normalizeAlg(alg), { modulusLength: modLen, publicExponent: x2b('10001') } );
-
-                var generateKeyComplete = new Promise( function ( res, rej ) {
-                        skipModLen(modLen) ? rej( new Error("Skipping large RSA moduli") )
-                                           : res( crypto.subtle.generateKey( keyAlg, true, [ prvUse, pubUse ] ) );
-                    });
-
-                var vectors = [
-                    { text: "" },
-                    { text: "Hello World!" },
-                ];
-
-                it( "generateKey", function ( done ) {
-                    generateKeyComplete
-                        .then( function ( keyPair ) {
-                            expect(keyPair).toBeDefined();
-
-                            expect(keyPair.publicKey).toEqual(jasmine.any(CryptoKey));
-                            expect(keyPair.publicKey.type).toBe('public');
-                            expect(keyPair.publicKey.algorithm).toEqual(keyAlg);
-                            expect(keyPair.publicKey.extractable).toBe(true);
-                            expect(keyPair.publicKey.usages).toEqual([pubUse]);
-
-                            expect(keyPair.privateKey).toEqual(jasmine.any(CryptoKey));
-                            expect(keyPair.privateKey.type).toBe('private');
-                            expect(keyPair.privateKey.algorithm).toEqual(keyAlg);
-                            expect(keyPair.privateKey.extractable).toBe(true);
-                            expect(keyPair.privateKey.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                }, 30000 );
-
-                describe( "exportKey", function () {
-                    it( "spki", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'spki', keyPair.publicKey );
-                            })
-                            .then( function ( spkiData ) {
-                                expect(spkiData).toEqual(jasmine.any(ArrayBuffer));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "pkcs8", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'pkcs8', keyPair.privateKey );
-                            })
-                            .then( function ( pkcs8Data ) {
-                                expect(pkcs8Data).toEqual(jasmine.any(ArrayBuffer));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "jwk publicKey", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'jwk', keyPair.publicKey );
-                            })
-                            .then( function ( jwkPubKey ) {
-                                expect(jwkPubKey).toEqual(jasmine.objectContaining( { 'kty': 'RSA', 'alg': jwkAlg, 'ext': true, 'key_ops': [pubUse] } ));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "jwk privateKey", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'jwk', keyPair.privateKey );
-                            })
-                            .then( function ( jwkPrvKey ) {
-                                expect(jwkPrvKey).toEqual(jasmine.objectContaining( { 'kty': 'RSA', 'alg': jwkAlg, 'ext': true, 'key_ops': [prvUse] } ));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-                });
-
-                describe( "encrypt", function () {
-                    vectors.forEach( function ( v ) {
-                        it( "'" + v.text + "' as ArrayBuffer", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.encrypt( alg, keyPair.publicKey, s2b(v.text).buffer );
-                                })
-                                .then( function ( ciphertext ) {
-                                    expect(ciphertext).toEqual( jasmine.any(ArrayBuffer) );
-                                    expect(ciphertext.byteLength).toBe(modLen>>3);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-
-                        it( "'" + v.text + "' as Uint8Array", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.encrypt( alg, keyPair.publicKey, s2b(v.text) );
-                                })
-                                .then( function ( ciphertext ) {
-                                    expect(ciphertext).toEqual( jasmine.any(ArrayBuffer) );
-                                    expect(ciphertext.byteLength).toBe(modLen>>3);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-                    });
-                });
-
-                describe( "decrypt", function () {
-                    vectors.forEach( function ( v ) {
-                        it( "'" + v.text + "'", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.encrypt( alg, keyPair.publicKey, s2b(v.text) )
-                                        .then( function ( ciphertext ) {
-                                            return crypto.subtle.decrypt( alg, keyPair.privateKey, ciphertext );
-                                        });
-                                })
-                                .then( function ( cleartext ) {
-                                    expect( b2s(cleartext) ).toBe(v.text);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-                    });
-                });
-            });
-        });
-    });
-
-    describe( "importKey", function () {
-        var vectors = [
-            { modLen: 1024,
-              spkiPubKey: 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCOLweTVN8Q/9IcadFwyH0tSyXHilAYykuyxBIi8xcmsl+zPs5k2o9I6COF5/CV2ISA0d4OeTzuRhDotgct+pUwrIHGfatQ0xx+VUpRJCcW05lkhaeR6OL7c6msheEfsbrnNS9gb+uPbHXcm02sNhJDYDd4k4ha+sDlMEU5IOH0wIDAQAB',
-              pkcsPrvKey: 'MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAMI4vB5NU3xD/0hxp0XDIfS1LJceKUBjKS7LEEiLzFyayX7M+zmTaj0joI4Xn8JXYhIDR3g55PO5GEOi2By36lTCsgcZ9q1DTHH5VSlEkJxbTmWSFp5Ho4vtzqayF4R+xuuc1L2Bv649sddybTaw2EkNgN3iTiFr6wOUwRTkg4fTAgMBAAECgYEArCMmr+Cu/rMxfh6lN5Jz9PPiemlT/GompP97BiFJVkYmEglRHD2Ianm6IlXT1aYnGHnpjSgawNyrIb8htYpX145yVoOHCePQQ57/wrT+tKuRq7f9hie0u2O6xshlOay4uUHPN8zL9yC2yz3SwoacnJvHquLFgTjCVu6ILaERm8kCQQDlP8qgiL/GNUHTuze/X8Hbgf2fljG3FOIbmLVJWhn/BJAfWzv9/1a5kEOWX7t9kD7mch5r8b7Dtmhu9qTAKdo/AkEA2OKWkdSTusHflqXU0P7C3+vBD4b8Z+Qsjck/QC7/QpIH84A99qAIMuHeqHuBIGU3GesKiPHkGEpTpeOzPzmlbQJARhtuEg3/59Odn+yfLc1Q8ZodP9KkvYKLazkWJ6qATLbOhGhYPmL52KG/qZr5MXsNYVgA6a3yUtPTuCuBUqr57QJBAKCi0pqYNAKy7YOKt6FDz9pBpvB1LiVUnps1Xx+Or4kC19jGNx6fUPM+z8dCElWIIdOUfm0Hm8VR57qKd4xwidECQQCsHOwYLvOO65MtfHYc7bW+0Qi7IxlVKj95ue1amMg6syETGUpPVqSRlgQMBRJmrPCeAwTfDZrUfJDwI7N7y2Bz',
-              jwkPubKey: {"alg":"RSA-OAEP-256","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"wji8Hk1TfEP_SHGnRcMh9LUslx4pQGMpLssQSIvMXJrJfsz7OZNqPSOgjhefwldiEgNHeDnk87kYQ6LYHLfqVMKyBxn2rUNMcflVKUSQnFtOZZIWnkeji-3OprIXhH7G65zUvYG_rj2x13JtNrDYSQ2A3eJOIWvrA5TBFOSDh9M"},
-              jwkPrvKey: {"alg":"RSA-OAEP-256","d":"rCMmr-Cu_rMxfh6lN5Jz9PPiemlT_GompP97BiFJVkYmEglRHD2Ianm6IlXT1aYnGHnpjSgawNyrIb8htYpX145yVoOHCePQQ57_wrT-tKuRq7f9hie0u2O6xshlOay4uUHPN8zL9yC2yz3SwoacnJvHquLFgTjCVu6ILaERm8k","dp":"RhtuEg3_59Odn-yfLc1Q8ZodP9KkvYKLazkWJ6qATLbOhGhYPmL52KG_qZr5MXsNYVgA6a3yUtPTuCuBUqr57Q","dq":"oKLSmpg0ArLtg4q3oUPP2kGm8HUuJVSemzVfH46viQLX2MY3Hp9Q8z7Px0ISVYgh05R-bQebxVHnuop3jHCJ0Q","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"wji8Hk1TfEP_SHGnRcMh9LUslx4pQGMpLssQSIvMXJrJfsz7OZNqPSOgjhefwldiEgNHeDnk87kYQ6LYHLfqVMKyBxn2rUNMcflVKUSQnFtOZZIWnkeji-3OprIXhH7G65zUvYG_rj2x13JtNrDYSQ2A3eJOIWvrA5TBFOSDh9M","p":"5T_KoIi_xjVB07s3v1_B24H9n5YxtxTiG5i1SVoZ_wSQH1s7_f9WuZBDll-7fZA-5nIea_G-w7ZobvakwCnaPw","q":"2OKWkdSTusHflqXU0P7C3-vBD4b8Z-Qsjck_QC7_QpIH84A99qAIMuHeqHuBIGU3GesKiPHkGEpTpeOzPzmlbQ","qi":"rBzsGC7zjuuTLXx2HO21vtEIuyMZVSo_ebntWpjIOrMhExlKT1akkZYEDAUSZqzwngME3w2a1HyQ8COze8tgcw"} },
-            { modLen: 2048,
-              spkiPubKey: 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAviC6FqJnk6d6ycPAnIZ6vdqUxN9HGN9ApNYnul9h3P4vR0ApmiDDSQSRi4WVC0aOAtrEQ/lLRfs4ggsU46sYEDtRhW4WMfjEd3XXzKJuy4jYXgu3ODNlnnaXNzN1lHcmGhG3oZQTT628/MWwCiZEwTZIJXpAHkyMjQNhEYjLpdIMqhXEicpk38rB+WpemllcTJYf/cYu/k9LMTAm9PiP3ANQZyYrDCluyIN+wN8P35W/eLNonyZANLUdIdMMJPa9sbDLez0jmHdeJtpeGXn8juWPsI/S3yQDJtW+LqitRrmjGD4RvRMdfyd/WmQ98HeDd++GxAkRVpLqtx3pPNknoQIDAQAB',
-              pkcsPrvKey: 'MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC+ILoWomeTp3rJw8Cchnq92pTE30cY30Ck1ie6X2Hc/i9HQCmaIMNJBJGLhZULRo4C2sRD+UtF+ziCCxTjqxgQO1GFbhYx+MR3ddfMom7LiNheC7c4M2Wedpc3M3WUdyYaEbehlBNPrbz8xbAKJkTBNkglekAeTIyNA2ERiMul0gyqFcSJymTfysH5al6aWVxMlh/9xi7+T0sxMCb0+I/cA1BnJisMKW7Ig37A3w/flb94s2ifJkA0tR0h0wwk9r2xsMt7PSOYd14m2l4ZefyO5Y+wj9LfJAMm1b4uqK1GuaMYPhG9Ex1/J39aZD3wd4N374bECRFWkuq3Hek82SehAgMBAAECggEATMD3ftW3TLNq7XL6GfZsLKLGNigREqhl92WBCkshPc7blT8AzHj3fU272ABoZ/HmuJ5KZ0qHqcu+RzlkCHj0sPDRezUy/p936OYI5VKZuc8X0feW0rhlCLDFYQKEMBhdqF6IrFET7rGrvrur0p0aWomoXIDay6CJiQ/ZKvP3iovsaDEshaDuwT+jai9HPdDGckWCxx/DfbzgdzXwdN8+6NMfwn0apZb6DU/J0FZ8hjGGJCMfhrjTJnXvoq/VJt34ii0xj3ldPi+DVxDCAAaYmPpVX2YWvnpHVbz0/DQLt6+hJtUTSf9nBJ8MNCNSWNYmJ1ANHsJYNxZiKJGSIdcx9QKBgQDhPnIj6wVqso1srEfY32wOhtbQx0ls97OAt0v5Qtyosy+4UuiH8dZw7Vv7+1mbg6kYmO5h0Y3nPd3rcfXoGqIi6vutCTsiXI378/9pYXjl/bGdqHR9996dB3uhW7LyRk23Cw3hRt4hp0NYZZCvD4RnOutAD3acx9PBlwCkY6WfywKBgQDYFsY7Wi5WG31m2v03i+ugluzYNdVz24vkIuFO1BWngnIwYmBc/jCWQt00/njHuzRMywf/etUL+oRE6EVVmC48KX4/mUseuK1n+ra36B4cQE1IoB+Hmb8CemG4fcL/42PVni6cZc8aq8v0OQ6Yy4+LJphiPFKuNpKPrEjc0SNQwwKBgCJi2x/6oCAS1B5UCr/kE+X/1cmXsvDsu72ZvgJ2n6Mtf8p+9brTQ66HvfQxAhQIvIbhyfqq+CPmQPvRsP3XGwuDnhpjf2CWiqJ9NG/NDpzl5vivn+EfNx/35XrTufTcoL6h9GOA4yZ2F4TmNHlVQBxWVVW5Rp1WsFAskk+GWuGTAoGBAJCctS81S/s+TG8QMRQCZL9FId4UMPRnQjh8C1Ko5pEC4I5218yEJFn7B3UWtBfetcKKwaB9QKTSk8BVvUjqHk8O6bmASmCV8R68D5oGEliPw+jNmCw0fTsYUduY9m4vbDmiscji7XYI8OZRZO5mlHroamSbwC1swiq6fsygfcTnAoGBAJEpnjZHT7gvS8xLdpL8ckEmY6AaZfOTEJ6thqRROeB7ZSLhXyOm9IIQgiFD8vtlhUvee2Fc0Ypvoym3B5mFXpESja/uRr8cYS31gTZtSWX74xpWCer7ldR+JhxjmVcGgj+oIOyuAzlcgSKlhRrYxjVziY6FAfuu0xPSB4TfvgSC',
-              jwkPubKey: {"alg":"RSA-OAEP-256","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"viC6FqJnk6d6ycPAnIZ6vdqUxN9HGN9ApNYnul9h3P4vR0ApmiDDSQSRi4WVC0aOAtrEQ_lLRfs4ggsU46sYEDtRhW4WMfjEd3XXzKJuy4jYXgu3ODNlnnaXNzN1lHcmGhG3oZQTT628_MWwCiZEwTZIJXpAHkyMjQNhEYjLpdIMqhXEicpk38rB-WpemllcTJYf_cYu_k9LMTAm9PiP3ANQZyYrDCluyIN-wN8P35W_eLNonyZANLUdIdMMJPa9sbDLez0jmHdeJtpeGXn8juWPsI_S3yQDJtW-LqitRrmjGD4RvRMdfyd_WmQ98HeDd--GxAkRVpLqtx3pPNknoQ"},
-              jwkPrvKey: {"alg":"RSA-OAEP-256","d":"TMD3ftW3TLNq7XL6GfZsLKLGNigREqhl92WBCkshPc7blT8AzHj3fU272ABoZ_HmuJ5KZ0qHqcu-RzlkCHj0sPDRezUy_p936OYI5VKZuc8X0feW0rhlCLDFYQKEMBhdqF6IrFET7rGrvrur0p0aWomoXIDay6CJiQ_ZKvP3iovsaDEshaDuwT-jai9HPdDGckWCxx_DfbzgdzXwdN8-6NMfwn0apZb6DU_J0FZ8hjGGJCMfhrjTJnXvoq_VJt34ii0xj3ldPi-DVxDCAAaYmPpVX2YWvnpHVbz0_DQLt6-hJtUTSf9nBJ8MNCNSWNYmJ1ANHsJYNxZiKJGSIdcx9Q","dp":"ImLbH_qgIBLUHlQKv-QT5f_VyZey8Oy7vZm-Anafoy1_yn71utNDroe99DECFAi8huHJ-qr4I-ZA-9Gw_dcbC4OeGmN_YJaKon00b80OnOXm-K-f4R83H_fletO59NygvqH0Y4DjJnYXhOY0eVVAHFZVVblGnVawUCyST4Za4ZM","dq":"kJy1LzVL-z5MbxAxFAJkv0Uh3hQw9GdCOHwLUqjmkQLgjnbXzIQkWfsHdRa0F961worBoH1ApNKTwFW9SOoeTw7puYBKYJXxHrwPmgYSWI_D6M2YLDR9OxhR25j2bi9sOaKxyOLtdgjw5lFk7maUeuhqZJvALWzCKrp-zKB9xOc","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"viC6FqJnk6d6ycPAnIZ6vdqUxN9HGN9ApNYnul9h3P4vR0ApmiDDSQSRi4WVC0aOAtrEQ_lLRfs4ggsU46sYEDtRhW4WMfjEd3XXzKJuy4jYXgu3ODNlnnaXNzN1lHcmGhG3oZQTT628_MWwCiZEwTZIJXpAHkyMjQNhEYjLpdIMqhXEicpk38rB-WpemllcTJYf_cYu_k9LMTAm9PiP3ANQZyYrDCluyIN-wN8P35W_eLNonyZANLUdIdMMJPa9sbDLez0jmHdeJtpeGXn8juWPsI_S3yQDJtW-LqitRrmjGD4RvRMdfyd_WmQ98HeDd--GxAkRVpLqtx3pPNknoQ","p":"4T5yI-sFarKNbKxH2N9sDobW0MdJbPezgLdL-ULcqLMvuFLoh_HWcO1b-_tZm4OpGJjuYdGN5z3d63H16BqiIur7rQk7IlyN-_P_aWF45f2xnah0fffenQd7oVuy8kZNtwsN4UbeIadDWGWQrw-EZzrrQA92nMfTwZcApGOln8s","q":"2BbGO1ouVht9Ztr9N4vroJbs2DXVc9uL5CLhTtQVp4JyMGJgXP4wlkLdNP54x7s0TMsH_3rVC_qEROhFVZguPCl-P5lLHritZ_q2t-geHEBNSKAfh5m_AnphuH3C_-Nj1Z4unGXPGqvL9DkOmMuPiyaYYjxSrjaSj6xI3NEjUMM","qi":"kSmeNkdPuC9LzEt2kvxyQSZjoBpl85MQnq2GpFE54HtlIuFfI6b0ghCCIUPy-2WFS957YVzRim-jKbcHmYVekRKNr-5GvxxhLfWBNm1JZfvjGlYJ6vuV1H4mHGOZVwaCP6gg7K4DOVyBIqWFGtjGNXOJjoUB-67TE9IHhN--BII"} },
-            { modLen: 3072,
-              spkiPubKey: 'MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAuUuAFGMt/JC59sGxLP7p+vgE2vgZ7DAeFGHM7kaaYwNKN8KI5E3HZepkVaWpxSRzqoqYIDpeRqmBF0k0omvytfRofeilFTCmIXuZIJO1BfAc2v2tb6LRivyCCJpJdd5QHm56eFJeP5PltjQfEclrjO+icMc5W+5SdH+/bukyJTjwyU4rpzfoRcGgHJbFdIGLT1YyKyIvjd2tuhFEV6TOvySsAUykq6uScFoOpp5FouOX+A7ZFbW7pCsIf9a+MU2ZQS4im09tzeBPqFpctg4Rr7IQs77xHSeGPvcuuR+RIk5/ny3y2NJC1K3l/Q9TQrvWj4iQ681w3ipXedv6kwPa9r860hE/HTIiR08FedmkhbtLANx8Kkk6rmKxYCTL7kcH6l/cPE4M/s3EarvID7S1l44NOpfJCorNWlNN+RV2oVMJAvGy0sr/x0Y/Ba42s6GLkvbviOqHkhvUgrPXI57hq2TnkSKCxGACoJA9tOg1I90hb3R2odIFXNkloYnBUsKjAgMBAAE=',
-              pkcsPrvKey: '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',
-              jwkPubKey: {"alg":"RSA-OAEP-256","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"uUuAFGMt_JC59sGxLP7p-vgE2vgZ7DAeFGHM7kaaYwNKN8KI5E3HZepkVaWpxSRzqoqYIDpeRqmBF0k0omvytfRofeilFTCmIXuZIJO1BfAc2v2tb6LRivyCCJpJdd5QHm56eFJeP5PltjQfEclrjO-icMc5W-5SdH-_bukyJTjwyU4rpzfoRcGgHJbFdIGLT1YyKyIvjd2tuhFEV6TOvySsAUykq6uScFoOpp5FouOX-A7ZFbW7pCsIf9a-MU2ZQS4im09tzeBPqFpctg4Rr7IQs77xHSeGPvcuuR-RIk5_ny3y2NJC1K3l_Q9TQrvWj4iQ681w3ipXedv6kwPa9r860hE_HTIiR08FedmkhbtLANx8Kkk6rmKxYCTL7kcH6l_cPE4M_s3EarvID7S1l44NOpfJCorNWlNN-RV2oVMJAvGy0sr_x0Y_Ba42s6GLkvbviOqHkhvUgrPXI57hq2TnkSKCxGACoJA9tOg1I90hb3R2odIFXNkloYnBUsKj"},
-              jwkPrvKey: {"alg":"RSA-OAEP-256","d":"mzzPz0TQcDroMf1QbLwcVzCXEMSvIxuk97qAMFhiW_WTpmeKvIsVNSNMcBzcwNerOAPpM4bzGQxFpLamLDV4IEzlhib0t24MoRyly480KAdkhWvmdBLarzCh2Ic6aE-anAQ_ArMvVuCXoTDFnuc6_dZ-JzIhsg1Wc1fbkBY69shfoqelFvFV3as8cvc18kfd6Nf0LAL2CErik3KH6U2gEK-uk2Aczd5uT0aD47_R44f998qowPGChSWwdzn4GeJBxleQ3dfNgAGhaVKvQuOLv8J51jXvE0Taew1IQCH7AVsbmjvnDYRQGuBRV8enObLHw8rn39XWmDFpWIvaiQqoyU3J5hEzjmxQbsG_CyfiOejxtTs1si40vvoPrmqtjZAOOyqHPhbwj8dJj2iLNJ3DTtnFLM5tg1A3MJKp_A2gLBOi6PwtmqSULcB0GZ53HIWsDuEDsQUjckyNewR4zuTrhgFTllZxYiynPvzcX4sQsoJ8DkCJJGFTFqddWChwRUzB","dp":"6XMsJgXRKRilrOFwlQxq00CeWjzOQ8DSzZXIlEd5Yvpn134lVqP92tqHlRv-o7x2QfprljNxp4quqJuvFEd9MXUo1jxkGrsTk4wQZ1kF_YRalwAXiPl_lhs9I-2GbvlU2T033NE0J7UE5wPcFcu8gZXqGG2w3O9yOTO6yfrj7OGhc_qsnF3pF-nMHVxDv978KQ7M5s-U6Fubmb20EhnpgX3WeHwhrflfZgeXfD_wPNzf9mfHnGNk39gLVRPnBfKB","dq":"IB_IrB1SHuVDxz-MdOj6b06qe2UzX5rt_3rBGXQ7jxwGhsIk9mVEGs_ExmElPxscqKG5k3ej5pTu0Y0HSQ_gvACpfo2B7y9nVpM1ExlZfIwfCXH5JmSezDO9hJ389SuZJMSfGtBpXkcW8i5i61yUBib2LEGx-kT-6scA7gK8jqVEPHL63XZKLc9ZekSf3Vg4y1KB6mSfGEsTmLYqEoNwKVwxGJ16tWxSoEIBN1FSAK3pvotnL2HHfE9ECR8u_r2B","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"uUuAFGMt_JC59sGxLP7p-vgE2vgZ7DAeFGHM7kaaYwNKN8KI5E3HZepkVaWpxSRzqoqYIDpeRqmBF0k0omvytfRofeilFTCmIXuZIJO1BfAc2v2tb6LRivyCCJpJdd5QHm56eFJeP5PltjQfEclrjO-icMc5W-5SdH-_bukyJTjwyU4rpzfoRcGgHJbFdIGLT1YyKyIvjd2tuhFEV6TOvySsAUykq6uScFoOpp5FouOX-A7ZFbW7pCsIf9a-MU2ZQS4im09tzeBPqFpctg4Rr7IQs77xHSeGPvcuuR-RIk5_ny3y2NJC1K3l_Q9TQrvWj4iQ681w3ipXedv6kwPa9r860hE_HTIiR08FedmkhbtLANx8Kkk6rmKxYCTL7kcH6l_cPE4M_s3EarvID7S1l44NOpfJCorNWlNN-RV2oVMJAvGy0sr_x0Y_Ba42s6GLkvbviOqHkhvUgrPXI57hq2TnkSKCxGACoJA9tOg1I90hb3R2odIFXNkloYnBUsKj","p":"8bcXqDGpvBedZsqJqxYAYw4tqm5uyfZBSa1CLRq3b4OJx3dQ2CzdDQp-QFaI7dxiWw1isCRFOKw5J2L5uQml5IHJ8m6BQiHWYn1tcQZlTOtjxFBuTj2j6dj97QSSXS8gLBO91yOH3b1l1yM3PP18TPPAgtBo4EreQWIN9-8aC6uses6xJQ7GwOrrlHuapUj6mMOl4Q2zm4EuSmQ60n_aUbIvEjHN9DPS1CdVsan72HMLd55oEs-ZxLYk8FYuLetT","q":"xD7TbAC4tAGXTWUTYzU_ASvzQjxLtkVuZiaTeh0jA87htoTEEc6dr-nYcGRPa95M1QInEWawu61G-r8c-LnKcvTeMQm_ZWarkqx4zP3Rj4BfM8I1pvx_KRrEcm8kiadhj1B2WJEvgN63fMlVLyQQ3VO36mzFrbJUwVWc2bdT1s8BwlHhd1dsuKOWFnsu0WwBnJ5iDMFrZ4VXtu0qxz4bad0fnRQfwlDAutAeYpDtJfzP_72z5XzSteZtZXIpkTFx","qi":"2V8GBEvcw2ZGeHSUQIJgfhpjmoUUn-CxQi9ADDSzptjhGT9WQEm8KHw8WdnV9vPQ_QudDcLe-4XFGyMgIDot8ByMWpVd5kRBk1RZCQYV89CXQ7YEK4WQGzU_Kqe5k3I-LHHyE3vN7XuZkeRWgSa6b_MghrXU8YH-bYIKo3yDluYZz75kJj_C0ld0HzW5NZ-v69gskjB8faq7dG-9OmT7eHHS50j8E6XmNYsVlZAQShtNeh6xYgD6n8mfEeXeGgmR"} },
-            { modLen: 4096,
-              spkiPubKey: 'MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAosZ8eDUKrI6AXDBF+Yd2RhlqEDyfCM8/tvIxsYVLMjUGq5RZLqeYixOuMi7cGZkxKVWhldOW3VSZE+MjVPLUg4rBVfYr9uD1XHByxi+xESgiZqJEXsoU7JwQqGAQamTpPbqo6ZN2+BnqHIJtSGVQwOe3IBcJecg223cUgCESPpl/X70MVNsHj8JriFAI7pXph+I/KAdGSJIoZ76+/BapR9wwBM42+8kTVSB08jodNWLOTm0SmgCUQe68m5hN2cdZ3Dimph/M5JwWCTC5mxt7vV//7xNNNYaM5w/t7X6tySXSxJBftKbH4C4TqGuVHZmo1u78g8/uljoFet5185as67JexTWvzunGOMNSOUT+4FZAq+y0Jr5QfNhyGuN3j+jPTcJv0zT/EWbXpMOu1Z61wsbn5PlAH2+p0O3SZ6aBEU3VqIcoY7lix2e6ZZVSzfwCKsLxvElctwaKbFrwBrAJmIWjQhqrjztWGW7QKUFR/Uw6wV5mr7ijtDzgUX8PqEoFWVpsFKfE5TYygGFrxgLy/GzRyg+37+BItaM2EBN4yxuQtV6PT60GXMFhbNIMgssh70orjO9wERGiBM1cKyJSfC8SQXTRXSSDHLQOeVwgDqcHie+Gh01adkvyz7I+LLnjxHGJb76yM39PoYuYj5jZN1sQyEnEmQDvcqTGijhse50CAwEAAQ==',
-              pkcsPrvKey: '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',
-              jwkPubKey: {"alg":"RSA-OAEP-256","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"osZ8eDUKrI6AXDBF-Yd2RhlqEDyfCM8_tvIxsYVLMjUGq5RZLqeYixOuMi7cGZkxKVWhldOW3VSZE-MjVPLUg4rBVfYr9uD1XHByxi-xESgiZqJEXsoU7JwQqGAQamTpPbqo6ZN2-BnqHIJtSGVQwOe3IBcJecg223cUgCESPpl_X70MVNsHj8JriFAI7pXph-I_KAdGSJIoZ76-_BapR9wwBM42-8kTVSB08jodNWLOTm0SmgCUQe68m5hN2cdZ3Dimph_M5JwWCTC5mxt7vV__7xNNNYaM5w_t7X6tySXSxJBftKbH4C4TqGuVHZmo1u78g8_uljoFet5185as67JexTWvzunGOMNSOUT-4FZAq-y0Jr5QfNhyGuN3j-jPTcJv0zT_EWbXpMOu1Z61wsbn5PlAH2-p0O3SZ6aBEU3VqIcoY7lix2e6ZZVSzfwCKsLxvElctwaKbFrwBrAJmIWjQhqrjztWGW7QKUFR_Uw6wV5mr7ijtDzgUX8PqEoFWVpsFKfE5TYygGFrxgLy_GzRyg-37-BItaM2EBN4yxuQtV6PT60GXMFhbNIMgssh70orjO9wERGiBM1cKyJSfC8SQXTRXSSDHLQOeVwgDqcHie-Gh01adkvyz7I-LLnjxHGJb76yM39PoYuYj5jZN1sQyEnEmQDvcqTGijhse50"},
-              jwkPrvKey: {"alg":"RSA-OAEP-256","d":"X19KyKfTZD1uahWCumyrWPFFGtRaHjBIVancgfXmlDlLejbGdjaOg1Z5pz-biIggrOZWcdHywCX0NxnLttc8uwIOu44sPk-ak5nzNbn11macmWQUCTIARo4-mFkI5T3RB3EZzRmxCDcu25tz6ooqYYyi2HOHAsrTkY1Y_qXh6bnITtEWq5VV_d5dYRX71ccSeKKQfKSegqDYecjiYBPrBYa2v-oPf0FWSXdl7hMsz_3fgUYZMxCJzYPTEJuRabuLJCQxSH6zb3Mg2iupZH8a5l-cNnkpsOXwIuZLcu7ZZlT6BF_PI6rgy7JTpEe8rAY_Tgfi_lxTn8PJOC-mDp5HHDcJkhnO6RfFo0h1TnA8aWBccFj1sGFvf230l2vl6bWWLEYe4CKwt6OUqbvuFkAzR2MG3bRJZOe4nAiJ1-PeHirNb9Kctbi3ru8E7fcgHp4evzD1tByxWglA176IJN6_hfHMCZXL_bBi1uJUBWmqLauE5lerquEhmw8mICW9BCois3DlnbUTxPvsUf21U7NGMdsW_gpk0RLQIsxLHeWryvE5_PfbmDG405OCSFidAWCNT16PjzfYstnEjeHHt0GmLMnpBwtG6WlPVActLmSC9CB7_d6UTVY6hcPb5y7VmAUeFvnLz13cW9_cDDSy-bbWN_YAqeCwQSqYf-wq_lpepAE","dp":"UrZ-DkqNRN2JtEjEFAwFthcNtq11LlVEfdQIUc5lcnFbhP2awu96Wh8HSGCgj5QbZ-B4yyMIYYoZhGaX_yURgVzv-ENZpEQqVXwG1LlWZlH33yyYBO53GhbWz4lnFp3ygPcqk3-ja1UyCFzyk1xndnM-ewaG7xg1jag1fBR54pUugzE8x3Xo6cf4E8pHBcWwHeOX9xjW-O7uxkac0RYquvGsKTpQEIMvpYIbRnuEsQ-7cT7cmzOoeUqOWTlathYJFj430cPzFEEEmYZz711jQJCxRpDf3dP8ME9UlIfpVZfzPkzmkVHW4r6UCDISrypBXwK57pOFfnZXGZsblzUJnQ","dq":"nGRRKT3AypqmUdeLABinNFc9CSEZulpKsNfxz01fafqURTA1STyOy0Eerj-7nzTR3NvnZXjI_s6rZbG-nja1DZE-D3meEIdwZ4G6XO03djvHFhuWOn0Cdw5iIjy_r98bVUiDOtNliUWaUZRAbziP_fEqKwvbyN5Zs3SIPpAHu_KlCZ-ht2aGMn3v7JSadj9x6dFNmcWTaukzgG0HQ3FGCc25CTawqkjTft1FbpiFV7EuSmWItI9wn67tnOd224IgeRBSI2Sz_uTc9yYiGWnrXUI1kUrkcY11ds0wa471RYS8uJGU9hIDDWefTUZazclr-gH-RO330yzbKXZ9MTOaAQ","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"osZ8eDUKrI6AXDBF-Yd2RhlqEDyfCM8_tvIxsYVLMjUGq5RZLqeYixOuMi7cGZkxKVWhldOW3VSZE-MjVPLUg4rBVfYr9uD1XHByxi-xESgiZqJEXsoU7JwQqGAQamTpPbqo6ZN2-BnqHIJtSGVQwOe3IBcJecg223cUgCESPpl_X70MVNsHj8JriFAI7pXph-I_KAdGSJIoZ76-_BapR9wwBM42-8kTVSB08jodNWLOTm0SmgCUQe68m5hN2cdZ3Dimph_M5JwWCTC5mxt7vV__7xNNNYaM5w_t7X6tySXSxJBftKbH4C4TqGuVHZmo1u78g8_uljoFet5185as67JexTWvzunGOMNSOUT-4FZAq-y0Jr5QfNhyGuN3j-jPTcJv0zT_EWbXpMOu1Z61wsbn5PlAH2-p0O3SZ6aBEU3VqIcoY7lix2e6ZZVSzfwCKsLxvElctwaKbFrwBrAJmIWjQhqrjztWGW7QKUFR_Uw6wV5mr7ijtDzgUX8PqEoFWVpsFKfE5TYygGFrxgLy_GzRyg-37-BItaM2EBN4yxuQtV6PT60GXMFhbNIMgssh70orjO9wERGiBM1cKyJSfC8SQXTRXSSDHLQOeVwgDqcHie-Gh01adkvyz7I-LLnjxHGJb76yM39PoYuYj5jZN1sQyEnEmQDvcqTGijhse50","p":"1VcBwDr0mV9TsVFSAo9jK8jJPR4iJxifOAiGa9oRzRu8j3ECvF4nxdHZhuprGePMqCIZ46WPd1M4srHACkmTUDuoj0MW7_LEbAeUZ51gGoWEoYeiRqbn1dMiXsTqWUGcWHoQ7tgZ-8t2L_e6SG4hQbUR_KUhspgKdOjt5dguvUNDRpL0xfGYpVKBD302WyWrgV9R2PoWKcAkACzYc7FpbX2twWCk27Y2B7HnuYrRRGJrWchsgp3-3GowTFOVPORLhrpue_FCKmrdqMJ3KtKeGV5khceVWfCGUzx4ViCkZtHqHod6v34nPRSSPSMe7uRJ4kd7lcg0VIyVoslf2SgOnQ","q":"w1MNHI3XPHF2HQvq7DNvxhLWkBrdpGY9vUsEQp5GdqNOxNMofV6ipt4QaJbvBuuGWvIi4QWQWyF33n_SLg99qhvTZL3dBWcv5Jy1wDSN4v9zRWqFaSZXOtSTkjTVvpntCKxkl_i-DePbsv01ogD9zB3lihqNraPYjPauLm0YywArsbEelYpL-YCaIyDoCloZUP2lStzyuQnvUrboPlTqHC17gulD3b1s6xMTqP6kuOlX-o37ipoXeLlLuZPjj_3zbcNEaAuWrb26c11pcalwE7ycZ9unMSgHb68q3fk7h_UBOdybuTJXyuUQVASHGVwvW9WxrvAv7tmi43Ldd7wRAQ","qi":"Di2Kfv6XKuzKZKOVInQWZINOE1e9RVRZkDyeC-Mu5xxL8vifycvKQcwDL-2MFyNu6HaAg070-zh7n2DEnY7yzvntUX6_Uwk741KmJeHCR6sjJe1h9K5OihXvjGqbXNqadiVebXTQBJRvbKz9DH1OFcyXWWf_JlB_fxqMbYwq_mdlPd12-wd1gPPlVsdfFFUvxUoaYoqynzJS_GAu0Pl5XKMRgXo7K2i6q8trxxf86MwEPey_MS8wUxc6oV6QdAzgM_VHk2OrBSQ1H6oWIBDwUlarXwDMA7zlYwVHdJ56MgeWvX5QGu6-ZXntcT-NZYY0Xv_2v3r7BSKXSq_fIpoHLA"} },
-        ];
-
-        vectors.forEach( function ( v ) {
-            describe( v.modLen + " bits", function () {
-                var keyAlg = extend( normalizeAlg(alg), { modulusLength: v.modLen, publicExponent: x2b('10001') } );
-
-                it( "spki publicKey", function ( done ) {
-                    crypto.subtle.importKey( "spki", s2b( atob(v.spkiPubKey) ), alg, true, [ pubUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('public');
-                            expect(key.extractable).toBe(true);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([pubUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "pkcs8 privateKey", function ( done ) {
-                    crypto.subtle.importKey( "pkcs8", s2b( atob(v.pkcsPrvKey) ), alg, false, [ prvUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('private');
-                            expect(key.extractable).toEqual(false);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "jwk publicKey", function ( done ) {
-                    crypto.subtle.importKey( "jwk", v.jwkPubKey, alg, true, [ pubUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('public');
-                            expect(key.extractable).toBe(true);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([pubUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "jwk privateKey", function ( done ) {
-                    crypto.subtle.importKey( "jwk", v.jwkPrvKey, alg, false, [ prvUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('private');
-                            expect(key.extractable).toEqual(false);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-            });
-        });
-    });
-
-    describe( "decrypt", function () {
-        var vectors = [
-            { modLen: 1024,
-              jwkPrvKey: {"alg":"RSA-OAEP-256","d":"rCMmr-Cu_rMxfh6lN5Jz9PPiemlT_GompP97BiFJVkYmEglRHD2Ianm6IlXT1aYnGHnpjSgawNyrIb8htYpX145yVoOHCePQQ57_wrT-tKuRq7f9hie0u2O6xshlOay4uUHPN8zL9yC2yz3SwoacnJvHquLFgTjCVu6ILaERm8k","dp":"RhtuEg3_59Odn-yfLc1Q8ZodP9KkvYKLazkWJ6qATLbOhGhYPmL52KG_qZr5MXsNYVgA6a3yUtPTuCuBUqr57Q","dq":"oKLSmpg0ArLtg4q3oUPP2kGm8HUuJVSemzVfH46viQLX2MY3Hp9Q8z7Px0ISVYgh05R-bQebxVHnuop3jHCJ0Q","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"wji8Hk1TfEP_SHGnRcMh9LUslx4pQGMpLssQSIvMXJrJfsz7OZNqPSOgjhefwldiEgNHeDnk87kYQ6LYHLfqVMKyBxn2rUNMcflVKUSQnFtOZZIWnkeji-3OprIXhH7G65zUvYG_rj2x13JtNrDYSQ2A3eJOIWvrA5TBFOSDh9M","p":"5T_KoIi_xjVB07s3v1_B24H9n5YxtxTiG5i1SVoZ_wSQH1s7_f9WuZBDll-7fZA-5nIea_G-w7ZobvakwCnaPw","q":"2OKWkdSTusHflqXU0P7C3-vBD4b8Z-Qsjck_QC7_QpIH84A99qAIMuHeqHuBIGU3GesKiPHkGEpTpeOzPzmlbQ","qi":"rBzsGC7zjuuTLXx2HO21vtEIuyMZVSo_ebntWpjIOrMhExlKT1akkZYEDAUSZqzwngME3w2a1HyQ8COze8tgcw"},
-              subvectors: [
-                { text: "",
-                  ciphertext: 'IvNeJAcxG6f+4A1kZ2uRA0hyi5Jm4RBrhvkLtYPVeUQZ/dEzS1QA/S8ar4KbdRuKuOVeAzTJ7NP86Nd+73yCZr1LY/NF4exPciBQLkms89DGQkWAmq1owvW5YKarJWxpxtcYlDJnylrKmKDV/BJcWj2urI9uK+qgc65gLgasHRg=' },
-                { text: "Hello World!",
-                  ciphertext: 'YivS33H5siq8hxvOhFHd7KZl3+JwTJ8/gqM/6CnWYrFS9RKNlyNtQ4H5diiKlee0zt1pg2LJpZN9PUJ4IZBSBMxeVjGPQaG/DjFaYztFV9A6Io+84bu3LF3JeovIzCIPSOw6T9e0I+cycj8mobRSMSqNCFxAiO43dWwgEHzfZI4=' },
-              ] },
-            { modLen: 2048,
-              jwkPrvKey: {"alg":"RSA-OAEP-256","d":"TMD3ftW3TLNq7XL6GfZsLKLGNigREqhl92WBCkshPc7blT8AzHj3fU272ABoZ_HmuJ5KZ0qHqcu-RzlkCHj0sPDRezUy_p936OYI5VKZuc8X0feW0rhlCLDFYQKEMBhdqF6IrFET7rGrvrur0p0aWomoXIDay6CJiQ_ZKvP3iovsaDEshaDuwT-jai9HPdDGckWCxx_DfbzgdzXwdN8-6NMfwn0apZb6DU_J0FZ8hjGGJCMfhrjTJnXvoq_VJt34ii0xj3ldPi-DVxDCAAaYmPpVX2YWvnpHVbz0_DQLt6-hJtUTSf9nBJ8MNCNSWNYmJ1ANHsJYNxZiKJGSIdcx9Q","dp":"ImLbH_qgIBLUHlQKv-QT5f_VyZey8Oy7vZm-Anafoy1_yn71utNDroe99DECFAi8huHJ-qr4I-ZA-9Gw_dcbC4OeGmN_YJaKon00b80OnOXm-K-f4R83H_fletO59NygvqH0Y4DjJnYXhOY0eVVAHFZVVblGnVawUCyST4Za4ZM","dq":"kJy1LzVL-z5MbxAxFAJkv0Uh3hQw9GdCOHwLUqjmkQLgjnbXzIQkWfsHdRa0F961worBoH1ApNKTwFW9SOoeTw7puYBKYJXxHrwPmgYSWI_D6M2YLDR9OxhR25j2bi9sOaKxyOLtdgjw5lFk7maUeuhqZJvALWzCKrp-zKB9xOc","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"viC6FqJnk6d6ycPAnIZ6vdqUxN9HGN9ApNYnul9h3P4vR0ApmiDDSQSRi4WVC0aOAtrEQ_lLRfs4ggsU46sYEDtRhW4WMfjEd3XXzKJuy4jYXgu3ODNlnnaXNzN1lHcmGhG3oZQTT628_MWwCiZEwTZIJXpAHkyMjQNhEYjLpdIMqhXEicpk38rB-WpemllcTJYf_cYu_k9LMTAm9PiP3ANQZyYrDCluyIN-wN8P35W_eLNonyZANLUdIdMMJPa9sbDLez0jmHdeJtpeGXn8juWPsI_S3yQDJtW-LqitRrmjGD4RvRMdfyd_WmQ98HeDd--GxAkRVpLqtx3pPNknoQ","p":"4T5yI-sFarKNbKxH2N9sDobW0MdJbPezgLdL-ULcqLMvuFLoh_HWcO1b-_tZm4OpGJjuYdGN5z3d63H16BqiIur7rQk7IlyN-_P_aWF45f2xnah0fffenQd7oVuy8kZNtwsN4UbeIadDWGWQrw-EZzrrQA92nMfTwZcApGOln8s","q":"2BbGO1ouVht9Ztr9N4vroJbs2DXVc9uL5CLhTtQVp4JyMGJgXP4wlkLdNP54x7s0TMsH_3rVC_qEROhFVZguPCl-P5lLHritZ_q2t-geHEBNSKAfh5m_AnphuH3C_-Nj1Z4unGXPGqvL9DkOmMuPiyaYYjxSrjaSj6xI3NEjUMM","qi":"kSmeNkdPuC9LzEt2kvxyQSZjoBpl85MQnq2GpFE54HtlIuFfI6b0ghCCIUPy-2WFS957YVzRim-jKbcHmYVekRKNr-5GvxxhLfWBNm1JZfvjGlYJ6vuV1H4mHGOZVwaCP6gg7K4DOVyBIqWFGtjGNXOJjoUB-67TE9IHhN--BII"},
-              subvectors: [
-                { text: "",
-                  ciphertext: 'W2ndc5Y0coQobSi5n3foHj2CZ74yrsYnpV/7YthrWnDm8yehKFPvj2mjlEYguUmQQdKLStcKwmdzgfItB+8EFBRyHzXOwezfer0hO0znctF6+vJ3ZYzcyvJH+01INQcx4/LMDaZOU8LTlI+Vjb2DUgSktGgoj872TLjYPo5d01X9L5a2UZq9b5kdC8Fsp1/UZ2QySVbhbxBssCoWF2Ra4CyQAFFq9e8XnKokYmYgaXQihpAa9dYVEl3kuF1TJL9yzmIRJ/dzHVrZITmXlyRCQhqtGE+WpXYhOrTJWoiPIChqof1PRzNsCFfEbjZ2omhnigdHuwvDJa6Z46JmLCHNow==' },
-                { text: "Hello World!",
-                  ciphertext: 'Aih/ZciL0YYP/6yoJj/5c0fWY6FaiFYo/wwNjZ+JmxhVfF34PealEz98LnhWZMXLPEJlseNRZWOtJbof6L4iyEavhYQq8Yp7gG2Xr1D2+8VsLQBb5N3s7skuC8C+YPhm/IMFSFzneZf/DlwvSD4Ew+MhZy+NtRlHsyq9h+zoaQtBodYRjRf98NIHbRk88DelXh3bQ4yO/TysvLQWHoJ2CUGi4/VCXTgyOa/z6bqgaIQ/JitdGP8/+la07lTE4/xi58r76PpyYjDbuF8hrsAROh0X1lcaqf8Iqkve7r1Ec5WPe/L5DsBFStmsfiG4Vkb3RB5g9JLmIN0qMswQSaH2zQ==' },
-              ] },
-            { modLen: 3072,
-              jwkPrvKey: {"alg":"RSA-OAEP-256","d":"mzzPz0TQcDroMf1QbLwcVzCXEMSvIxuk97qAMFhiW_WTpmeKvIsVNSNMcBzcwNerOAPpM4bzGQxFpLamLDV4IEzlhib0t24MoRyly480KAdkhWvmdBLarzCh2Ic6aE-anAQ_ArMvVuCXoTDFnuc6_dZ-JzIhsg1Wc1fbkBY69shfoqelFvFV3as8cvc18kfd6Nf0LAL2CErik3KH6U2gEK-uk2Aczd5uT0aD47_R44f998qowPGChSWwdzn4GeJBxleQ3dfNgAGhaVKvQuOLv8J51jXvE0Taew1IQCH7AVsbmjvnDYRQGuBRV8enObLHw8rn39XWmDFpWIvaiQqoyU3J5hEzjmxQbsG_CyfiOejxtTs1si40vvoPrmqtjZAOOyqHPhbwj8dJj2iLNJ3DTtnFLM5tg1A3MJKp_A2gLBOi6PwtmqSULcB0GZ53HIWsDuEDsQUjckyNewR4zuTrhgFTllZxYiynPvzcX4sQsoJ8DkCJJGFTFqddWChwRUzB","dp":"6XMsJgXRKRilrOFwlQxq00CeWjzOQ8DSzZXIlEd5Yvpn134lVqP92tqHlRv-o7x2QfprljNxp4quqJuvFEd9MXUo1jxkGrsTk4wQZ1kF_YRalwAXiPl_lhs9I-2GbvlU2T033NE0J7UE5wPcFcu8gZXqGG2w3O9yOTO6yfrj7OGhc_qsnF3pF-nMHVxDv978KQ7M5s-U6Fubmb20EhnpgX3WeHwhrflfZgeXfD_wPNzf9mfHnGNk39gLVRPnBfKB","dq":"IB_IrB1SHuVDxz-MdOj6b06qe2UzX5rt_3rBGXQ7jxwGhsIk9mVEGs_ExmElPxscqKG5k3ej5pTu0Y0HSQ_gvACpfo2B7y9nVpM1ExlZfIwfCXH5JmSezDO9hJ389SuZJMSfGtBpXkcW8i5i61yUBib2LEGx-kT-6scA7gK8jqVEPHL63XZKLc9ZekSf3Vg4y1KB6mSfGEsTmLYqEoNwKVwxGJ16tWxSoEIBN1FSAK3pvotnL2HHfE9ECR8u_r2B","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"uUuAFGMt_JC59sGxLP7p-vgE2vgZ7DAeFGHM7kaaYwNKN8KI5E3HZepkVaWpxSRzqoqYIDpeRqmBF0k0omvytfRofeilFTCmIXuZIJO1BfAc2v2tb6LRivyCCJpJdd5QHm56eFJeP5PltjQfEclrjO-icMc5W-5SdH-_bukyJTjwyU4rpzfoRcGgHJbFdIGLT1YyKyIvjd2tuhFEV6TOvySsAUykq6uScFoOpp5FouOX-A7ZFbW7pCsIf9a-MU2ZQS4im09tzeBPqFpctg4Rr7IQs77xHSeGPvcuuR-RIk5_ny3y2NJC1K3l_Q9TQrvWj4iQ681w3ipXedv6kwPa9r860hE_HTIiR08FedmkhbtLANx8Kkk6rmKxYCTL7kcH6l_cPE4M_s3EarvID7S1l44NOpfJCorNWlNN-RV2oVMJAvGy0sr_x0Y_Ba42s6GLkvbviOqHkhvUgrPXI57hq2TnkSKCxGACoJA9tOg1I90hb3R2odIFXNkloYnBUsKj","p":"8bcXqDGpvBedZsqJqxYAYw4tqm5uyfZBSa1CLRq3b4OJx3dQ2CzdDQp-QFaI7dxiWw1isCRFOKw5J2L5uQml5IHJ8m6BQiHWYn1tcQZlTOtjxFBuTj2j6dj97QSSXS8gLBO91yOH3b1l1yM3PP18TPPAgtBo4EreQWIN9-8aC6uses6xJQ7GwOrrlHuapUj6mMOl4Q2zm4EuSmQ60n_aUbIvEjHN9DPS1CdVsan72HMLd55oEs-ZxLYk8FYuLetT","q":"xD7TbAC4tAGXTWUTYzU_ASvzQjxLtkVuZiaTeh0jA87htoTEEc6dr-nYcGRPa95M1QInEWawu61G-r8c-LnKcvTeMQm_ZWarkqx4zP3Rj4BfM8I1pvx_KRrEcm8kiadhj1B2WJEvgN63fMlVLyQQ3VO36mzFrbJUwVWc2bdT1s8BwlHhd1dsuKOWFnsu0WwBnJ5iDMFrZ4VXtu0qxz4bad0fnRQfwlDAutAeYpDtJfzP_72z5XzSteZtZXIpkTFx","qi":"2V8GBEvcw2ZGeHSUQIJgfhpjmoUUn-CxQi9ADDSzptjhGT9WQEm8KHw8WdnV9vPQ_QudDcLe-4XFGyMgIDot8ByMWpVd5kRBk1RZCQYV89CXQ7YEK4WQGzU_Kqe5k3I-LHHyE3vN7XuZkeRWgSa6b_MghrXU8YH-bYIKo3yDluYZz75kJj_C0ld0HzW5NZ-v69gskjB8faq7dG-9OmT7eHHS50j8E6XmNYsVlZAQShtNeh6xYgD6n8mfEeXeGgmR"},
-              subvectors: [
-                { text: "",
-                  ciphertext: 'Lfao8rG4gi0wBxHAwqrjy7WbmLvBWsgt7MsHApwc7/uZwEt2Y6ZFRjPbjXKV7ZoMKM+h37jjlnp8ajk9GnNB2vuTYBzVH15NHkB/iNVm5MkA6Gxl0Ix6FwhrKzTnBcLEViO32jm5kNHWb57PQCyGC5swooWGVdHM+vyDlpeyiYgQ/wCteiQLuuXe9fdM3mcO/6u4FlpipohDuTslRcm2niOkv8VYhBio9Ytmcms+WkvymTMPzFsbsscDYhrjmYkHVGOKMizGWCrh99n9G1MkwkEJt6Aj0LzXn0N50PfBVaLxHt4lKHnw/QdoBHtF7Y5S2KeF1kBhimi3MrLr9ZEK903aivKwINUYFieEuasgDufPLIv10Pm4S4rXJBLeTUtNigTUmrd4sTA59ocp5bwlaoF6gBHxsOyjt0zM2OmmesNONMIQ/IL4smVotOdfHggsEUmws9JAehVZVRzb79T68uarYt9rnrbl99ssNdcZYv/RGSjh131TV/1/3jltEwrJ' },
-                { text: "Hello World!",
-                  ciphertext: 'uCHyQf7FMt7nPWocl2clkeORUD2SYwmcU86OLxLUddGKAffAwt7K7LamuS/zkHfNHSUdzifuVuHXwyW7YXq15rCEtZyWnqqr9lct9uThXbpUSwUp6xTtsaR46k+7S6jGDJ/hzIM+JwkPv1nif+oUheZwDbZBXwaWuQ9hFf5Z1R0pEBEzQqcpZbYXVTNW3o978OKkxgNhF2SkjqveBUSqjXxraUsGzNu7A4vE4Kd7xRla/QbFZHRcfzRPcRyaamf4mxuQQYTKnsEshZluWlHaoQHKLA4uPKfbiKB9jAbS0mc1pazGQcUNGZYro3jXhSTybxukJHZYHDVBgULFtxrEOumpfA8Fj4ufL+EWHRTCxZd32CB78tgpfjbXgFJFUh7Sm0djX2Xssob4T8IkyPODehukJnqXi4wYHvZlZlhcge5lStJmSlbckr39GeHobbkzNgopfHzsIUc397m+JNxp/XOGaFaso/kqos6Ncgm8HE3v0QzRF9ZPovoVU5q3TYUi' },
-              ] },
-            { modLen: 4096,
-              jwkPrvKey: {"alg":"RSA-OAEP-256","d":"X19KyKfTZD1uahWCumyrWPFFGtRaHjBIVancgfXmlDlLejbGdjaOg1Z5pz-biIggrOZWcdHywCX0NxnLttc8uwIOu44sPk-ak5nzNbn11macmWQUCTIARo4-mFkI5T3RB3EZzRmxCDcu25tz6ooqYYyi2HOHAsrTkY1Y_qXh6bnITtEWq5VV_d5dYRX71ccSeKKQfKSegqDYecjiYBPrBYa2v-oPf0FWSXdl7hMsz_3fgUYZMxCJzYPTEJuRabuLJCQxSH6zb3Mg2iupZH8a5l-cNnkpsOXwIuZLcu7ZZlT6BF_PI6rgy7JTpEe8rAY_Tgfi_lxTn8PJOC-mDp5HHDcJkhnO6RfFo0h1TnA8aWBccFj1sGFvf230l2vl6bWWLEYe4CKwt6OUqbvuFkAzR2MG3bRJZOe4nAiJ1-PeHirNb9Kctbi3ru8E7fcgHp4evzD1tByxWglA176IJN6_hfHMCZXL_bBi1uJUBWmqLauE5lerquEhmw8mICW9BCois3DlnbUTxPvsUf21U7NGMdsW_gpk0RLQIsxLHeWryvE5_PfbmDG405OCSFidAWCNT16PjzfYstnEjeHHt0GmLMnpBwtG6WlPVActLmSC9CB7_d6UTVY6hcPb5y7VmAUeFvnLz13cW9_cDDSy-bbWN_YAqeCwQSqYf-wq_lpepAE","dp":"UrZ-DkqNRN2JtEjEFAwFthcNtq11LlVEfdQIUc5lcnFbhP2awu96Wh8HSGCgj5QbZ-B4yyMIYYoZhGaX_yURgVzv-ENZpEQqVXwG1LlWZlH33yyYBO53GhbWz4lnFp3ygPcqk3-ja1UyCFzyk1xndnM-ewaG7xg1jag1fBR54pUugzE8x3Xo6cf4E8pHBcWwHeOX9xjW-O7uxkac0RYquvGsKTpQEIMvpYIbRnuEsQ-7cT7cmzOoeUqOWTlathYJFj430cPzFEEEmYZz711jQJCxRpDf3dP8ME9UlIfpVZfzPkzmkVHW4r6UCDISrypBXwK57pOFfnZXGZsblzUJnQ","dq":"nGRRKT3AypqmUdeLABinNFc9CSEZulpKsNfxz01fafqURTA1STyOy0Eerj-7nzTR3NvnZXjI_s6rZbG-nja1DZE-D3meEIdwZ4G6XO03djvHFhuWOn0Cdw5iIjy_r98bVUiDOtNliUWaUZRAbziP_fEqKwvbyN5Zs3SIPpAHu_KlCZ-ht2aGMn3v7JSadj9x6dFNmcWTaukzgG0HQ3FGCc25CTawqkjTft1FbpiFV7EuSmWItI9wn67tnOd224IgeRBSI2Sz_uTc9yYiGWnrXUI1kUrkcY11ds0wa471RYS8uJGU9hIDDWefTUZazclr-gH-RO330yzbKXZ9MTOaAQ","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"osZ8eDUKrI6AXDBF-Yd2RhlqEDyfCM8_tvIxsYVLMjUGq5RZLqeYixOuMi7cGZkxKVWhldOW3VSZE-MjVPLUg4rBVfYr9uD1XHByxi-xESgiZqJEXsoU7JwQqGAQamTpPbqo6ZN2-BnqHIJtSGVQwOe3IBcJecg223cUgCESPpl_X70MVNsHj8JriFAI7pXph-I_KAdGSJIoZ76-_BapR9wwBM42-8kTVSB08jodNWLOTm0SmgCUQe68m5hN2cdZ3Dimph_M5JwWCTC5mxt7vV__7xNNNYaM5w_t7X6tySXSxJBftKbH4C4TqGuVHZmo1u78g8_uljoFet5185as67JexTWvzunGOMNSOUT-4FZAq-y0Jr5QfNhyGuN3j-jPTcJv0zT_EWbXpMOu1Z61wsbn5PlAH2-p0O3SZ6aBEU3VqIcoY7lix2e6ZZVSzfwCKsLxvElctwaKbFrwBrAJmIWjQhqrjztWGW7QKUFR_Uw6wV5mr7ijtDzgUX8PqEoFWVpsFKfE5TYygGFrxgLy_GzRyg-37-BItaM2EBN4yxuQtV6PT60GXMFhbNIMgssh70orjO9wERGiBM1cKyJSfC8SQXTRXSSDHLQOeVwgDqcHie-Gh01adkvyz7I-LLnjxHGJb76yM39PoYuYj5jZN1sQyEnEmQDvcqTGijhse50","p":"1VcBwDr0mV9TsVFSAo9jK8jJPR4iJxifOAiGa9oRzRu8j3ECvF4nxdHZhuprGePMqCIZ46WPd1M4srHACkmTUDuoj0MW7_LEbAeUZ51gGoWEoYeiRqbn1dMiXsTqWUGcWHoQ7tgZ-8t2L_e6SG4hQbUR_KUhspgKdOjt5dguvUNDRpL0xfGYpVKBD302WyWrgV9R2PoWKcAkACzYc7FpbX2twWCk27Y2B7HnuYrRRGJrWchsgp3-3GowTFOVPORLhrpue_FCKmrdqMJ3KtKeGV5khceVWfCGUzx4ViCkZtHqHod6v34nPRSSPSMe7uRJ4kd7lcg0VIyVoslf2SgOnQ","q":"w1MNHI3XPHF2HQvq7DNvxhLWkBrdpGY9vUsEQp5GdqNOxNMofV6ipt4QaJbvBuuGWvIi4QWQWyF33n_SLg99qhvTZL3dBWcv5Jy1wDSN4v9zRWqFaSZXOtSTkjTVvpntCKxkl_i-DePbsv01ogD9zB3lihqNraPYjPauLm0YywArsbEelYpL-YCaIyDoCloZUP2lStzyuQnvUrboPlTqHC17gulD3b1s6xMTqP6kuOlX-o37ipoXeLlLuZPjj_3zbcNEaAuWrb26c11pcalwE7ycZ9unMSgHb68q3fk7h_UBOdybuTJXyuUQVASHGVwvW9WxrvAv7tmi43Ldd7wRAQ","qi":"Di2Kfv6XKuzKZKOVInQWZINOE1e9RVRZkDyeC-Mu5xxL8vifycvKQcwDL-2MFyNu6HaAg070-zh7n2DEnY7yzvntUX6_Uwk741KmJeHCR6sjJe1h9K5OihXvjGqbXNqadiVebXTQBJRvbKz9DH1OFcyXWWf_JlB_fxqMbYwq_mdlPd12-wd1gPPlVsdfFFUvxUoaYoqynzJS_GAu0Pl5XKMRgXo7K2i6q8trxxf86MwEPey_MS8wUxc6oV6QdAzgM_VHk2OrBSQ1H6oWIBDwUlarXwDMA7zlYwVHdJ56MgeWvX5QGu6-ZXntcT-NZYY0Xv_2v3r7BSKXSq_fIpoHLA"},
-              subvectors: [
-                { text: "",
-                  ciphertext: 'bx06qbSPTFt+zNZfBQVAZPDKq6E7stZZBRSP0LpUHzJGNK7uS5RtpaxwhnGMxW0/UixRpqRVEoX5DcGeI5hRb044fA84dey2zQAHnsm2QjTdkMBc6ntrk6cZjQ950nl+mEIUGBkefE7FGmaqKKLr0j/RTXmL5Yx1VWjnBf7P6h+9RYd+tpWrClz4idDv7Jy2ldAsju6yVHEZhc/9KnV9sKYi9RGrGEtrW/Yywv2wKpg90LTk+9eS/rl+35AFu+gR9hGAbi0et5Sn5cwiv0xVUt4G2iCkirLRJaR0oGJz5QoEHpaJVgOb2/SAD23W3yv7OPqOcybr2HFwVoG0IbeVwtmnWPW7omzmCEjBrvpHbRZBJpPlAhKtgJGSWXg0vgjOOSwvleczgTDhu6O1npbqFtlNi/XMpKoNsdnSEFNwx/os+40bQMOJCJ2tHFFSps2B1xtWQPPY9sh044YszPnz4/nOs/nGHrhJOxCGPoxsGH8ezAl4eb3LclZ1VUqNr5vFWpF7zGP1AiYCPnJXZFC2++bd9r7ov662XV6lfxv8CFxAF4MIRRsCaHCgZIF/P2LkU1zzvxjjoH/gqusY03nZqahmiuXMHvfJbOjUw62ch1RT4o70NvAQb6YCgnd6z9HdC1QjDemK0wX/H499UtlLk956Ofr4iWodEiEYJOHA7tE=' },
-                { text: "Hello World!",
-                  ciphertext: 'dzQ3NlKfoqKcX3E9GQWMjrh7lh2ef4Hu+4/yyxcfPF3rQMQWQkJon0lrASwLq2sFx75eP+bvMDbK6FykOyCAavqpFegYhyFO2t7vBpDhsx+w0LUMeW0OYOELiNUtF9Bs2JlLj/hW4ZDQWQHS1flfStsqmngNMrcbjJn2iTXONZRwuROpx4KRudNNdb9yYYgiHUswLwsd6RqyPsa5AqPuDEFjJSvH4jqdAYsmtCshsYUFogHDdYgC1a1Fm0PfxFoCNbcD9a++yhDcT+aK3UZl69c/M6Saz4iHZx7aMFTXlbpEdFDgM8D1SHphRG4Pxiu2MD1iQIavukXzQdAgXoLScA4eGp24P0G4lWGbQ0HILtc4dvmUINbOKlMXCw80kh7us2ifoqj9kefs/EHTAxym5EFk9hehcpajG5i89xSvAc1+oyT14zb1Zz57MFH7A4gOKolQ8mqd2a8fHkag4e+N9YYBm+bE3Cyu/ihf07+KGsMv/u4UwKO4TYufqfBO4I+DTj9fjKECTu72tDYVkK7xoTYw4kSpTUEDp78TYV8szGcVNJ0jr3o5YXM2sZA6L0zssorpR9TBxMvbXHrEXKVbnPBv8P30r526MVPNkiYTlPoRNlS2rAwbeiv5DA9jgU53X0geb7JLchOKLwLv03JofbsW0CIh5nVUldsNvpWU+Jw=' },
-              ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            describe( v.modLen + " bits", function ( done ) {
-                v.subvectors.forEach( function ( sv ) {
-                    it( "'" + sv.ciphertext + "'", function ( done ) {
-                        crypto.subtle.importKey( "jwk", v.jwkPrvKey, alg, true, [ prvUse ] )
-                            .then( function ( key ) {
-                                return crypto.subtle.decrypt( alg, key, s2b( atob(sv.ciphertext) ) );
-                            })
-                            .then( function ( plaintext ) {
-                                expect( b2s(plaintext) ).toBe(sv.text);
-                            })
-                            .catch(fail)
-                            .then(done);
-                    });
-                });
-            });
-        });
-    });
-});
-
-/*
-
-var vectors = [
-    { modLen: 1024,
-      spkiPubKey: 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCOLweTVN8Q/9IcadFwyH0tSyXHilAYykuyxBIi8xcmsl+zPs5k2o9I6COF5/CV2ISA0d4OeTzuRhDotgct+pUwrIHGfatQ0xx+VUpRJCcW05lkhaeR6OL7c6msheEfsbrnNS9gb+uPbHXcm02sNhJDYDd4k4ha+sDlMEU5IOH0wIDAQAB',
-      pkcsPrvKey: 'MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAMI4vB5NU3xD/0hxp0XDIfS1LJceKUBjKS7LEEiLzFyayX7M+zmTaj0joI4Xn8JXYhIDR3g55PO5GEOi2By36lTCsgcZ9q1DTHH5VSlEkJxbTmWSFp5Ho4vtzqayF4R+xuuc1L2Bv649sddybTaw2EkNgN3iTiFr6wOUwRTkg4fTAgMBAAECgYEArCMmr+Cu/rMxfh6lN5Jz9PPiemlT/GompP97BiFJVkYmEglRHD2Ianm6IlXT1aYnGHnpjSgawNyrIb8htYpX145yVoOHCePQQ57/wrT+tKuRq7f9hie0u2O6xshlOay4uUHPN8zL9yC2yz3SwoacnJvHquLFgTjCVu6ILaERm8kCQQDlP8qgiL/GNUHTuze/X8Hbgf2fljG3FOIbmLVJWhn/BJAfWzv9/1a5kEOWX7t9kD7mch5r8b7Dtmhu9qTAKdo/AkEA2OKWkdSTusHflqXU0P7C3+vBD4b8Z+Qsjck/QC7/QpIH84A99qAIMuHeqHuBIGU3GesKiPHkGEpTpeOzPzmlbQJARhtuEg3/59Odn+yfLc1Q8ZodP9KkvYKLazkWJ6qATLbOhGhYPmL52KG/qZr5MXsNYVgA6a3yUtPTuCuBUqr57QJBAKCi0pqYNAKy7YOKt6FDz9pBpvB1LiVUnps1Xx+Or4kC19jGNx6fUPM+z8dCElWIIdOUfm0Hm8VR57qKd4xwidECQQCsHOwYLvOO65MtfHYc7bW+0Qi7IxlVKj95ue1amMg6syETGUpPVqSRlgQMBRJmrPCeAwTfDZrUfJDwI7N7y2Bz',
-      jwkPubKey: {"alg":"RSA-OAEP-256","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"wji8Hk1TfEP_SHGnRcMh9LUslx4pQGMpLssQSIvMXJrJfsz7OZNqPSOgjhefwldiEgNHeDnk87kYQ6LYHLfqVMKyBxn2rUNMcflVKUSQnFtOZZIWnkeji-3OprIXhH7G65zUvYG_rj2x13JtNrDYSQ2A3eJOIWvrA5TBFOSDh9M"},
-      jwkPrvKey: {"alg":"RSA-OAEP-256","d":"rCMmr-Cu_rMxfh6lN5Jz9PPiemlT_GompP97BiFJVkYmEglRHD2Ianm6IlXT1aYnGHnpjSgawNyrIb8htYpX145yVoOHCePQQ57_wrT-tKuRq7f9hie0u2O6xshlOay4uUHPN8zL9yC2yz3SwoacnJvHquLFgTjCVu6ILaERm8k","dp":"RhtuEg3_59Odn-yfLc1Q8ZodP9KkvYKLazkWJ6qATLbOhGhYPmL52KG_qZr5MXsNYVgA6a3yUtPTuCuBUqr57Q","dq":"oKLSmpg0ArLtg4q3oUPP2kGm8HUuJVSemzVfH46viQLX2MY3Hp9Q8z7Px0ISVYgh05R-bQebxVHnuop3jHCJ0Q","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"wji8Hk1TfEP_SHGnRcMh9LUslx4pQGMpLssQSIvMXJrJfsz7OZNqPSOgjhefwldiEgNHeDnk87kYQ6LYHLfqVMKyBxn2rUNMcflVKUSQnFtOZZIWnkeji-3OprIXhH7G65zUvYG_rj2x13JtNrDYSQ2A3eJOIWvrA5TBFOSDh9M","p":"5T_KoIi_xjVB07s3v1_B24H9n5YxtxTiG5i1SVoZ_wSQH1s7_f9WuZBDll-7fZA-5nIea_G-w7ZobvakwCnaPw","q":"2OKWkdSTusHflqXU0P7C3-vBD4b8Z-Qsjck_QC7_QpIH84A99qAIMuHeqHuBIGU3GesKiPHkGEpTpeOzPzmlbQ","qi":"rBzsGC7zjuuTLXx2HO21vtEIuyMZVSo_ebntWpjIOrMhExlKT1akkZYEDAUSZqzwngME3w2a1HyQ8COze8tgcw"},
-      subvectors: [
-        { text: "",
-          ciphertext: 'IvNeJAcxG6f+4A1kZ2uRA0hyi5Jm4RBrhvkLtYPVeUQZ/dEzS1QA/S8ar4KbdRuKuOVeAzTJ7NP86Nd+73yCZr1LY/NF4exPciBQLkms89DGQkWAmq1owvW5YKarJWxpxtcYlDJnylrKmKDV/BJcWj2urI9uK+qgc65gLgasHRg=' },
-        { text: "Hello World!",
-          ciphertext: 'YivS33H5siq8hxvOhFHd7KZl3+JwTJ8/gqM/6CnWYrFS9RKNlyNtQ4H5diiKlee0zt1pg2LJpZN9PUJ4IZBSBMxeVjGPQaG/DjFaYztFV9A6Io+84bu3LF3JeovIzCIPSOw6T9e0I+cycj8mobRSMSqNCFxAiO43dWwgEHzfZI4=' },
-      ] },
-    { modLen: 2048,
-      spkiPubKey: 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAviC6FqJnk6d6ycPAnIZ6vdqUxN9HGN9ApNYnul9h3P4vR0ApmiDDSQSRi4WVC0aOAtrEQ/lLRfs4ggsU46sYEDtRhW4WMfjEd3XXzKJuy4jYXgu3ODNlnnaXNzN1lHcmGhG3oZQTT628/MWwCiZEwTZIJXpAHkyMjQNhEYjLpdIMqhXEicpk38rB+WpemllcTJYf/cYu/k9LMTAm9PiP3ANQZyYrDCluyIN+wN8P35W/eLNonyZANLUdIdMMJPa9sbDLez0jmHdeJtpeGXn8juWPsI/S3yQDJtW+LqitRrmjGD4RvRMdfyd/WmQ98HeDd++GxAkRVpLqtx3pPNknoQIDAQAB',
-      pkcsPrvKey: 'MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC+ILoWomeTp3rJw8Cchnq92pTE30cY30Ck1ie6X2Hc/i9HQCmaIMNJBJGLhZULRo4C2sRD+UtF+ziCCxTjqxgQO1GFbhYx+MR3ddfMom7LiNheC7c4M2Wedpc3M3WUdyYaEbehlBNPrbz8xbAKJkTBNkglekAeTIyNA2ERiMul0gyqFcSJymTfysH5al6aWVxMlh/9xi7+T0sxMCb0+I/cA1BnJisMKW7Ig37A3w/flb94s2ifJkA0tR0h0wwk9r2xsMt7PSOYd14m2l4ZefyO5Y+wj9LfJAMm1b4uqK1GuaMYPhG9Ex1/J39aZD3wd4N374bECRFWkuq3Hek82SehAgMBAAECggEATMD3ftW3TLNq7XL6GfZsLKLGNigREqhl92WBCkshPc7blT8AzHj3fU272ABoZ/HmuJ5KZ0qHqcu+RzlkCHj0sPDRezUy/p936OYI5VKZuc8X0feW0rhlCLDFYQKEMBhdqF6IrFET7rGrvrur0p0aWomoXIDay6CJiQ/ZKvP3iovsaDEshaDuwT+jai9HPdDGckWCxx/DfbzgdzXwdN8+6NMfwn0apZb6DU/J0FZ8hjGGJCMfhrjTJnXvoq/VJt34ii0xj3ldPi+DVxDCAAaYmPpVX2YWvnpHVbz0/DQLt6+hJtUTSf9nBJ8MNCNSWNYmJ1ANHsJYNxZiKJGSIdcx9QKBgQDhPnIj6wVqso1srEfY32wOhtbQx0ls97OAt0v5Qtyosy+4UuiH8dZw7Vv7+1mbg6kYmO5h0Y3nPd3rcfXoGqIi6vutCTsiXI378/9pYXjl/bGdqHR9996dB3uhW7LyRk23Cw3hRt4hp0NYZZCvD4RnOutAD3acx9PBlwCkY6WfywKBgQDYFsY7Wi5WG31m2v03i+ugluzYNdVz24vkIuFO1BWngnIwYmBc/jCWQt00/njHuzRMywf/etUL+oRE6EVVmC48KX4/mUseuK1n+ra36B4cQE1IoB+Hmb8CemG4fcL/42PVni6cZc8aq8v0OQ6Yy4+LJphiPFKuNpKPrEjc0SNQwwKBgCJi2x/6oCAS1B5UCr/kE+X/1cmXsvDsu72ZvgJ2n6Mtf8p+9brTQ66HvfQxAhQIvIbhyfqq+CPmQPvRsP3XGwuDnhpjf2CWiqJ9NG/NDpzl5vivn+EfNx/35XrTufTcoL6h9GOA4yZ2F4TmNHlVQBxWVVW5Rp1WsFAskk+GWuGTAoGBAJCctS81S/s+TG8QMRQCZL9FId4UMPRnQjh8C1Ko5pEC4I5218yEJFn7B3UWtBfetcKKwaB9QKTSk8BVvUjqHk8O6bmASmCV8R68D5oGEliPw+jNmCw0fTsYUduY9m4vbDmiscji7XYI8OZRZO5mlHroamSbwC1swiq6fsygfcTnAoGBAJEpnjZHT7gvS8xLdpL8ckEmY6AaZfOTEJ6thqRROeB7ZSLhXyOm9IIQgiFD8vtlhUvee2Fc0Ypvoym3B5mFXpESja/uRr8cYS31gTZtSWX74xpWCer7ldR+JhxjmVcGgj+oIOyuAzlcgSKlhRrYxjVziY6FAfuu0xPSB4TfvgSC',
-      jwkPubKey: {"alg":"RSA-OAEP-256","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"viC6FqJnk6d6ycPAnIZ6vdqUxN9HGN9ApNYnul9h3P4vR0ApmiDDSQSRi4WVC0aOAtrEQ_lLRfs4ggsU46sYEDtRhW4WMfjEd3XXzKJuy4jYXgu3ODNlnnaXNzN1lHcmGhG3oZQTT628_MWwCiZEwTZIJXpAHkyMjQNhEYjLpdIMqhXEicpk38rB-WpemllcTJYf_cYu_k9LMTAm9PiP3ANQZyYrDCluyIN-wN8P35W_eLNonyZANLUdIdMMJPa9sbDLez0jmHdeJtpeGXn8juWPsI_S3yQDJtW-LqitRrmjGD4RvRMdfyd_WmQ98HeDd--GxAkRVpLqtx3pPNknoQ"},
-      jwkPrvKey: {"alg":"RSA-OAEP-256","d":"TMD3ftW3TLNq7XL6GfZsLKLGNigREqhl92WBCkshPc7blT8AzHj3fU272ABoZ_HmuJ5KZ0qHqcu-RzlkCHj0sPDRezUy_p936OYI5VKZuc8X0feW0rhlCLDFYQKEMBhdqF6IrFET7rGrvrur0p0aWomoXIDay6CJiQ_ZKvP3iovsaDEshaDuwT-jai9HPdDGckWCxx_DfbzgdzXwdN8-6NMfwn0apZb6DU_J0FZ8hjGGJCMfhrjTJnXvoq_VJt34ii0xj3ldPi-DVxDCAAaYmPpVX2YWvnpHVbz0_DQLt6-hJtUTSf9nBJ8MNCNSWNYmJ1ANHsJYNxZiKJGSIdcx9Q","dp":"ImLbH_qgIBLUHlQKv-QT5f_VyZey8Oy7vZm-Anafoy1_yn71utNDroe99DECFAi8huHJ-qr4I-ZA-9Gw_dcbC4OeGmN_YJaKon00b80OnOXm-K-f4R83H_fletO59NygvqH0Y4DjJnYXhOY0eVVAHFZVVblGnVawUCyST4Za4ZM","dq":"kJy1LzVL-z5MbxAxFAJkv0Uh3hQw9GdCOHwLUqjmkQLgjnbXzIQkWfsHdRa0F961worBoH1ApNKTwFW9SOoeTw7puYBKYJXxHrwPmgYSWI_D6M2YLDR9OxhR25j2bi9sOaKxyOLtdgjw5lFk7maUeuhqZJvALWzCKrp-zKB9xOc","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"viC6FqJnk6d6ycPAnIZ6vdqUxN9HGN9ApNYnul9h3P4vR0ApmiDDSQSRi4WVC0aOAtrEQ_lLRfs4ggsU46sYEDtRhW4WMfjEd3XXzKJuy4jYXgu3ODNlnnaXNzN1lHcmGhG3oZQTT628_MWwCiZEwTZIJXpAHkyMjQNhEYjLpdIMqhXEicpk38rB-WpemllcTJYf_cYu_k9LMTAm9PiP3ANQZyYrDCluyIN-wN8P35W_eLNonyZANLUdIdMMJPa9sbDLez0jmHdeJtpeGXn8juWPsI_S3yQDJtW-LqitRrmjGD4RvRMdfyd_WmQ98HeDd--GxAkRVpLqtx3pPNknoQ","p":"4T5yI-sFarKNbKxH2N9sDobW0MdJbPezgLdL-ULcqLMvuFLoh_HWcO1b-_tZm4OpGJjuYdGN5z3d63H16BqiIur7rQk7IlyN-_P_aWF45f2xnah0fffenQd7oVuy8kZNtwsN4UbeIadDWGWQrw-EZzrrQA92nMfTwZcApGOln8s","q":"2BbGO1ouVht9Ztr9N4vroJbs2DXVc9uL5CLhTtQVp4JyMGJgXP4wlkLdNP54x7s0TMsH_3rVC_qEROhFVZguPCl-P5lLHritZ_q2t-geHEBNSKAfh5m_AnphuH3C_-Nj1Z4unGXPGqvL9DkOmMuPiyaYYjxSrjaSj6xI3NEjUMM","qi":"kSmeNkdPuC9LzEt2kvxyQSZjoBpl85MQnq2GpFE54HtlIuFfI6b0ghCCIUPy-2WFS957YVzRim-jKbcHmYVekRKNr-5GvxxhLfWBNm1JZfvjGlYJ6vuV1H4mHGOZVwaCP6gg7K4DOVyBIqWFGtjGNXOJjoUB-67TE9IHhN--BII"},
-      subvectors: [
-        { text: "",
-          ciphertext: 'W2ndc5Y0coQobSi5n3foHj2CZ74yrsYnpV/7YthrWnDm8yehKFPvj2mjlEYguUmQQdKLStcKwmdzgfItB+8EFBRyHzXOwezfer0hO0znctF6+vJ3ZYzcyvJH+01INQcx4/LMDaZOU8LTlI+Vjb2DUgSktGgoj872TLjYPo5d01X9L5a2UZq9b5kdC8Fsp1/UZ2QySVbhbxBssCoWF2Ra4CyQAFFq9e8XnKokYmYgaXQihpAa9dYVEl3kuF1TJL9yzmIRJ/dzHVrZITmXlyRCQhqtGE+WpXYhOrTJWoiPIChqof1PRzNsCFfEbjZ2omhnigdHuwvDJa6Z46JmLCHNow==' },
-        { text: "Hello World!",
-          ciphertext: 'Aih/ZciL0YYP/6yoJj/5c0fWY6FaiFYo/wwNjZ+JmxhVfF34PealEz98LnhWZMXLPEJlseNRZWOtJbof6L4iyEavhYQq8Yp7gG2Xr1D2+8VsLQBb5N3s7skuC8C+YPhm/IMFSFzneZf/DlwvSD4Ew+MhZy+NtRlHsyq9h+zoaQtBodYRjRf98NIHbRk88DelXh3bQ4yO/TysvLQWHoJ2CUGi4/VCXTgyOa/z6bqgaIQ/JitdGP8/+la07lTE4/xi58r76PpyYjDbuF8hrsAROh0X1lcaqf8Iqkve7r1Ec5WPe/L5DsBFStmsfiG4Vkb3RB5g9JLmIN0qMswQSaH2zQ==' },
-      ] },
-    { modLen: 3072,
-      spkiPubKey: 'MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAuUuAFGMt/JC59sGxLP7p+vgE2vgZ7DAeFGHM7kaaYwNKN8KI5E3HZepkVaWpxSRzqoqYIDpeRqmBF0k0omvytfRofeilFTCmIXuZIJO1BfAc2v2tb6LRivyCCJpJdd5QHm56eFJeP5PltjQfEclrjO+icMc5W+5SdH+/bukyJTjwyU4rpzfoRcGgHJbFdIGLT1YyKyIvjd2tuhFEV6TOvySsAUykq6uScFoOpp5FouOX+A7ZFbW7pCsIf9a+MU2ZQS4im09tzeBPqFpctg4Rr7IQs77xHSeGPvcuuR+RIk5/ny3y2NJC1K3l/Q9TQrvWj4iQ681w3ipXedv6kwPa9r860hE/HTIiR08FedmkhbtLANx8Kkk6rmKxYCTL7kcH6l/cPE4M/s3EarvID7S1l44NOpfJCorNWlNN+RV2oVMJAvGy0sr/x0Y/Ba42s6GLkvbviOqHkhvUgrPXI57hq2TnkSKCxGACoJA9tOg1I90hb3R2odIFXNkloYnBUsKjAgMBAAE=',
-      pkcsPrvKey: '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',
-      jwkPubKey: {"alg":"RSA-OAEP-256","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"uUuAFGMt_JC59sGxLP7p-vgE2vgZ7DAeFGHM7kaaYwNKN8KI5E3HZepkVaWpxSRzqoqYIDpeRqmBF0k0omvytfRofeilFTCmIXuZIJO1BfAc2v2tb6LRivyCCJpJdd5QHm56eFJeP5PltjQfEclrjO-icMc5W-5SdH-_bukyJTjwyU4rpzfoRcGgHJbFdIGLT1YyKyIvjd2tuhFEV6TOvySsAUykq6uScFoOpp5FouOX-A7ZFbW7pCsIf9a-MU2ZQS4im09tzeBPqFpctg4Rr7IQs77xHSeGPvcuuR-RIk5_ny3y2NJC1K3l_Q9TQrvWj4iQ681w3ipXedv6kwPa9r860hE_HTIiR08FedmkhbtLANx8Kkk6rmKxYCTL7kcH6l_cPE4M_s3EarvID7S1l44NOpfJCorNWlNN-RV2oVMJAvGy0sr_x0Y_Ba42s6GLkvbviOqHkhvUgrPXI57hq2TnkSKCxGACoJA9tOg1I90hb3R2odIFXNkloYnBUsKj"},
-      jwkPrvKey: {"alg":"RSA-OAEP-256","d":"mzzPz0TQcDroMf1QbLwcVzCXEMSvIxuk97qAMFhiW_WTpmeKvIsVNSNMcBzcwNerOAPpM4bzGQxFpLamLDV4IEzlhib0t24MoRyly480KAdkhWvmdBLarzCh2Ic6aE-anAQ_ArMvVuCXoTDFnuc6_dZ-JzIhsg1Wc1fbkBY69shfoqelFvFV3as8cvc18kfd6Nf0LAL2CErik3KH6U2gEK-uk2Aczd5uT0aD47_R44f998qowPGChSWwdzn4GeJBxleQ3dfNgAGhaVKvQuOLv8J51jXvE0Taew1IQCH7AVsbmjvnDYRQGuBRV8enObLHw8rn39XWmDFpWIvaiQqoyU3J5hEzjmxQbsG_CyfiOejxtTs1si40vvoPrmqtjZAOOyqHPhbwj8dJj2iLNJ3DTtnFLM5tg1A3MJKp_A2gLBOi6PwtmqSULcB0GZ53HIWsDuEDsQUjckyNewR4zuTrhgFTllZxYiynPvzcX4sQsoJ8DkCJJGFTFqddWChwRUzB","dp":"6XMsJgXRKRilrOFwlQxq00CeWjzOQ8DSzZXIlEd5Yvpn134lVqP92tqHlRv-o7x2QfprljNxp4quqJuvFEd9MXUo1jxkGrsTk4wQZ1kF_YRalwAXiPl_lhs9I-2GbvlU2T033NE0J7UE5wPcFcu8gZXqGG2w3O9yOTO6yfrj7OGhc_qsnF3pF-nMHVxDv978KQ7M5s-U6Fubmb20EhnpgX3WeHwhrflfZgeXfD_wPNzf9mfHnGNk39gLVRPnBfKB","dq":"IB_IrB1SHuVDxz-MdOj6b06qe2UzX5rt_3rBGXQ7jxwGhsIk9mVEGs_ExmElPxscqKG5k3ej5pTu0Y0HSQ_gvACpfo2B7y9nVpM1ExlZfIwfCXH5JmSezDO9hJ389SuZJMSfGtBpXkcW8i5i61yUBib2LEGx-kT-6scA7gK8jqVEPHL63XZKLc9ZekSf3Vg4y1KB6mSfGEsTmLYqEoNwKVwxGJ16tWxSoEIBN1FSAK3pvotnL2HHfE9ECR8u_r2B","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"uUuAFGMt_JC59sGxLP7p-vgE2vgZ7DAeFGHM7kaaYwNKN8KI5E3HZepkVaWpxSRzqoqYIDpeRqmBF0k0omvytfRofeilFTCmIXuZIJO1BfAc2v2tb6LRivyCCJpJdd5QHm56eFJeP5PltjQfEclrjO-icMc5W-5SdH-_bukyJTjwyU4rpzfoRcGgHJbFdIGLT1YyKyIvjd2tuhFEV6TOvySsAUykq6uScFoOpp5FouOX-A7ZFbW7pCsIf9a-MU2ZQS4im09tzeBPqFpctg4Rr7IQs77xHSeGPvcuuR-RIk5_ny3y2NJC1K3l_Q9TQrvWj4iQ681w3ipXedv6kwPa9r860hE_HTIiR08FedmkhbtLANx8Kkk6rmKxYCTL7kcH6l_cPE4M_s3EarvID7S1l44NOpfJCorNWlNN-RV2oVMJAvGy0sr_x0Y_Ba42s6GLkvbviOqHkhvUgrPXI57hq2TnkSKCxGACoJA9tOg1I90hb3R2odIFXNkloYnBUsKj","p":"8bcXqDGpvBedZsqJqxYAYw4tqm5uyfZBSa1CLRq3b4OJx3dQ2CzdDQp-QFaI7dxiWw1isCRFOKw5J2L5uQml5IHJ8m6BQiHWYn1tcQZlTOtjxFBuTj2j6dj97QSSXS8gLBO91yOH3b1l1yM3PP18TPPAgtBo4EreQWIN9-8aC6uses6xJQ7GwOrrlHuapUj6mMOl4Q2zm4EuSmQ60n_aUbIvEjHN9DPS1CdVsan72HMLd55oEs-ZxLYk8FYuLetT","q":"xD7TbAC4tAGXTWUTYzU_ASvzQjxLtkVuZiaTeh0jA87htoTEEc6dr-nYcGRPa95M1QInEWawu61G-r8c-LnKcvTeMQm_ZWarkqx4zP3Rj4BfM8I1pvx_KRrEcm8kiadhj1B2WJEvgN63fMlVLyQQ3VO36mzFrbJUwVWc2bdT1s8BwlHhd1dsuKOWFnsu0WwBnJ5iDMFrZ4VXtu0qxz4bad0fnRQfwlDAutAeYpDtJfzP_72z5XzSteZtZXIpkTFx","qi":"2V8GBEvcw2ZGeHSUQIJgfhpjmoUUn-CxQi9ADDSzptjhGT9WQEm8KHw8WdnV9vPQ_QudDcLe-4XFGyMgIDot8ByMWpVd5kRBk1RZCQYV89CXQ7YEK4WQGzU_Kqe5k3I-LHHyE3vN7XuZkeRWgSa6b_MghrXU8YH-bYIKo3yDluYZz75kJj_C0ld0HzW5NZ-v69gskjB8faq7dG-9OmT7eHHS50j8E6XmNYsVlZAQShtNeh6xYgD6n8mfEeXeGgmR"},
-      subvectors: [
-        { text: "",
-          ciphertext: 'Lfao8rG4gi0wBxHAwqrjy7WbmLvBWsgt7MsHApwc7/uZwEt2Y6ZFRjPbjXKV7ZoMKM+h37jjlnp8ajk9GnNB2vuTYBzVH15NHkB/iNVm5MkA6Gxl0Ix6FwhrKzTnBcLEViO32jm5kNHWb57PQCyGC5swooWGVdHM+vyDlpeyiYgQ/wCteiQLuuXe9fdM3mcO/6u4FlpipohDuTslRcm2niOkv8VYhBio9Ytmcms+WkvymTMPzFsbsscDYhrjmYkHVGOKMizGWCrh99n9G1MkwkEJt6Aj0LzXn0N50PfBVaLxHt4lKHnw/QdoBHtF7Y5S2KeF1kBhimi3MrLr9ZEK903aivKwINUYFieEuasgDufPLIv10Pm4S4rXJBLeTUtNigTUmrd4sTA59ocp5bwlaoF6gBHxsOyjt0zM2OmmesNONMIQ/IL4smVotOdfHggsEUmws9JAehVZVRzb79T68uarYt9rnrbl99ssNdcZYv/RGSjh131TV/1/3jltEwrJ' },
-        { text: "Hello World!",
-          ciphertext: 'uCHyQf7FMt7nPWocl2clkeORUD2SYwmcU86OLxLUddGKAffAwt7K7LamuS/zkHfNHSUdzifuVuHXwyW7YXq15rCEtZyWnqqr9lct9uThXbpUSwUp6xTtsaR46k+7S6jGDJ/hzIM+JwkPv1nif+oUheZwDbZBXwaWuQ9hFf5Z1R0pEBEzQqcpZbYXVTNW3o978OKkxgNhF2SkjqveBUSqjXxraUsGzNu7A4vE4Kd7xRla/QbFZHRcfzRPcRyaamf4mxuQQYTKnsEshZluWlHaoQHKLA4uPKfbiKB9jAbS0mc1pazGQcUNGZYro3jXhSTybxukJHZYHDVBgULFtxrEOumpfA8Fj4ufL+EWHRTCxZd32CB78tgpfjbXgFJFUh7Sm0djX2Xssob4T8IkyPODehukJnqXi4wYHvZlZlhcge5lStJmSlbckr39GeHobbkzNgopfHzsIUc397m+JNxp/XOGaFaso/kqos6Ncgm8HE3v0QzRF9ZPovoVU5q3TYUi' },
-      ] },
-    { modLen: 4096,
-      spkiPubKey: 'MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAosZ8eDUKrI6AXDBF+Yd2RhlqEDyfCM8/tvIxsYVLMjUGq5RZLqeYixOuMi7cGZkxKVWhldOW3VSZE+MjVPLUg4rBVfYr9uD1XHByxi+xESgiZqJEXsoU7JwQqGAQamTpPbqo6ZN2+BnqHIJtSGVQwOe3IBcJecg223cUgCESPpl/X70MVNsHj8JriFAI7pXph+I/KAdGSJIoZ76+/BapR9wwBM42+8kTVSB08jodNWLOTm0SmgCUQe68m5hN2cdZ3Dimph/M5JwWCTC5mxt7vV//7xNNNYaM5w/t7X6tySXSxJBftKbH4C4TqGuVHZmo1u78g8/uljoFet5185as67JexTWvzunGOMNSOUT+4FZAq+y0Jr5QfNhyGuN3j+jPTcJv0zT/EWbXpMOu1Z61wsbn5PlAH2+p0O3SZ6aBEU3VqIcoY7lix2e6ZZVSzfwCKsLxvElctwaKbFrwBrAJmIWjQhqrjztWGW7QKUFR/Uw6wV5mr7ijtDzgUX8PqEoFWVpsFKfE5TYygGFrxgLy/GzRyg+37+BItaM2EBN4yxuQtV6PT60GXMFhbNIMgssh70orjO9wERGiBM1cKyJSfC8SQXTRXSSDHLQOeVwgDqcHie+Gh01adkvyz7I+LLnjxHGJb76yM39PoYuYj5jZN1sQyEnEmQDvcqTGijhse50CAwEAAQ==',
-      pkcsPrvKey: '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',
-      jwkPubKey: {"alg":"RSA-OAEP-256","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"osZ8eDUKrI6AXDBF-Yd2RhlqEDyfCM8_tvIxsYVLMjUGq5RZLqeYixOuMi7cGZkxKVWhldOW3VSZE-MjVPLUg4rBVfYr9uD1XHByxi-xESgiZqJEXsoU7JwQqGAQamTpPbqo6ZN2-BnqHIJtSGVQwOe3IBcJecg223cUgCESPpl_X70MVNsHj8JriFAI7pXph-I_KAdGSJIoZ76-_BapR9wwBM42-8kTVSB08jodNWLOTm0SmgCUQe68m5hN2cdZ3Dimph_M5JwWCTC5mxt7vV__7xNNNYaM5w_t7X6tySXSxJBftKbH4C4TqGuVHZmo1u78g8_uljoFet5185as67JexTWvzunGOMNSOUT-4FZAq-y0Jr5QfNhyGuN3j-jPTcJv0zT_EWbXpMOu1Z61wsbn5PlAH2-p0O3SZ6aBEU3VqIcoY7lix2e6ZZVSzfwCKsLxvElctwaKbFrwBrAJmIWjQhqrjztWGW7QKUFR_Uw6wV5mr7ijtDzgUX8PqEoFWVpsFKfE5TYygGFrxgLy_GzRyg-37-BItaM2EBN4yxuQtV6PT60GXMFhbNIMgssh70orjO9wERGiBM1cKyJSfC8SQXTRXSSDHLQOeVwgDqcHie-Gh01adkvyz7I-LLnjxHGJb76yM39PoYuYj5jZN1sQyEnEmQDvcqTGijhse50"},
-      jwkPrvKey: {"alg":"RSA-OAEP-256","d":"X19KyKfTZD1uahWCumyrWPFFGtRaHjBIVancgfXmlDlLejbGdjaOg1Z5pz-biIggrOZWcdHywCX0NxnLttc8uwIOu44sPk-ak5nzNbn11macmWQUCTIARo4-mFkI5T3RB3EZzRmxCDcu25tz6ooqYYyi2HOHAsrTkY1Y_qXh6bnITtEWq5VV_d5dYRX71ccSeKKQfKSegqDYecjiYBPrBYa2v-oPf0FWSXdl7hMsz_3fgUYZMxCJzYPTEJuRabuLJCQxSH6zb3Mg2iupZH8a5l-cNnkpsOXwIuZLcu7ZZlT6BF_PI6rgy7JTpEe8rAY_Tgfi_lxTn8PJOC-mDp5HHDcJkhnO6RfFo0h1TnA8aWBccFj1sGFvf230l2vl6bWWLEYe4CKwt6OUqbvuFkAzR2MG3bRJZOe4nAiJ1-PeHirNb9Kctbi3ru8E7fcgHp4evzD1tByxWglA176IJN6_hfHMCZXL_bBi1uJUBWmqLauE5lerquEhmw8mICW9BCois3DlnbUTxPvsUf21U7NGMdsW_gpk0RLQIsxLHeWryvE5_PfbmDG405OCSFidAWCNT16PjzfYstnEjeHHt0GmLMnpBwtG6WlPVActLmSC9CB7_d6UTVY6hcPb5y7VmAUeFvnLz13cW9_cDDSy-bbWN_YAqeCwQSqYf-wq_lpepAE","dp":"UrZ-DkqNRN2JtEjEFAwFthcNtq11LlVEfdQIUc5lcnFbhP2awu96Wh8HSGCgj5QbZ-B4yyMIYYoZhGaX_yURgVzv-ENZpEQqVXwG1LlWZlH33yyYBO53GhbWz4lnFp3ygPcqk3-ja1UyCFzyk1xndnM-ewaG7xg1jag1fBR54pUugzE8x3Xo6cf4E8pHBcWwHeOX9xjW-O7uxkac0RYquvGsKTpQEIMvpYIbRnuEsQ-7cT7cmzOoeUqOWTlathYJFj430cPzFEEEmYZz711jQJCxRpDf3dP8ME9UlIfpVZfzPkzmkVHW4r6UCDISrypBXwK57pOFfnZXGZsblzUJnQ","dq":"nGRRKT3AypqmUdeLABinNFc9CSEZulpKsNfxz01fafqURTA1STyOy0Eerj-7nzTR3NvnZXjI_s6rZbG-nja1DZE-D3meEIdwZ4G6XO03djvHFhuWOn0Cdw5iIjy_r98bVUiDOtNliUWaUZRAbziP_fEqKwvbyN5Zs3SIPpAHu_KlCZ-ht2aGMn3v7JSadj9x6dFNmcWTaukzgG0HQ3FGCc25CTawqkjTft1FbpiFV7EuSmWItI9wn67tnOd224IgeRBSI2Sz_uTc9yYiGWnrXUI1kUrkcY11ds0wa471RYS8uJGU9hIDDWefTUZazclr-gH-RO330yzbKXZ9MTOaAQ","e":"AQAB","ext":true,"key_ops":["decrypt"],"kty":"RSA","n":"osZ8eDUKrI6AXDBF-Yd2RhlqEDyfCM8_tvIxsYVLMjUGq5RZLqeYixOuMi7cGZkxKVWhldOW3VSZE-MjVPLUg4rBVfYr9uD1XHByxi-xESgiZqJEXsoU7JwQqGAQamTpPbqo6ZN2-BnqHIJtSGVQwOe3IBcJecg223cUgCESPpl_X70MVNsHj8JriFAI7pXph-I_KAdGSJIoZ76-_BapR9wwBM42-8kTVSB08jodNWLOTm0SmgCUQe68m5hN2cdZ3Dimph_M5JwWCTC5mxt7vV__7xNNNYaM5w_t7X6tySXSxJBftKbH4C4TqGuVHZmo1u78g8_uljoFet5185as67JexTWvzunGOMNSOUT-4FZAq-y0Jr5QfNhyGuN3j-jPTcJv0zT_EWbXpMOu1Z61wsbn5PlAH2-p0O3SZ6aBEU3VqIcoY7lix2e6ZZVSzfwCKsLxvElctwaKbFrwBrAJmIWjQhqrjztWGW7QKUFR_Uw6wV5mr7ijtDzgUX8PqEoFWVpsFKfE5TYygGFrxgLy_GzRyg-37-BItaM2EBN4yxuQtV6PT60GXMFhbNIMgssh70orjO9wERGiBM1cKyJSfC8SQXTRXSSDHLQOeVwgDqcHie-Gh01adkvyz7I-LLnjxHGJb76yM39PoYuYj5jZN1sQyEnEmQDvcqTGijhse50","p":"1VcBwDr0mV9TsVFSAo9jK8jJPR4iJxifOAiGa9oRzRu8j3ECvF4nxdHZhuprGePMqCIZ46WPd1M4srHACkmTUDuoj0MW7_LEbAeUZ51gGoWEoYeiRqbn1dMiXsTqWUGcWHoQ7tgZ-8t2L_e6SG4hQbUR_KUhspgKdOjt5dguvUNDRpL0xfGYpVKBD302WyWrgV9R2PoWKcAkACzYc7FpbX2twWCk27Y2B7HnuYrRRGJrWchsgp3-3GowTFOVPORLhrpue_FCKmrdqMJ3KtKeGV5khceVWfCGUzx4ViCkZtHqHod6v34nPRSSPSMe7uRJ4kd7lcg0VIyVoslf2SgOnQ","q":"w1MNHI3XPHF2HQvq7DNvxhLWkBrdpGY9vUsEQp5GdqNOxNMofV6ipt4QaJbvBuuGWvIi4QWQWyF33n_SLg99qhvTZL3dBWcv5Jy1wDSN4v9zRWqFaSZXOtSTkjTVvpntCKxkl_i-DePbsv01ogD9zB3lihqNraPYjPauLm0YywArsbEelYpL-YCaIyDoCloZUP2lStzyuQnvUrboPlTqHC17gulD3b1s6xMTqP6kuOlX-o37ipoXeLlLuZPjj_3zbcNEaAuWrb26c11pcalwE7ycZ9unMSgHb68q3fk7h_UBOdybuTJXyuUQVASHGVwvW9WxrvAv7tmi43Ldd7wRAQ","qi":"Di2Kfv6XKuzKZKOVInQWZINOE1e9RVRZkDyeC-Mu5xxL8vifycvKQcwDL-2MFyNu6HaAg070-zh7n2DEnY7yzvntUX6_Uwk741KmJeHCR6sjJe1h9K5OihXvjGqbXNqadiVebXTQBJRvbKz9DH1OFcyXWWf_JlB_fxqMbYwq_mdlPd12-wd1gPPlVsdfFFUvxUoaYoqynzJS_GAu0Pl5XKMRgXo7K2i6q8trxxf86MwEPey_MS8wUxc6oV6QdAzgM_VHk2OrBSQ1H6oWIBDwUlarXwDMA7zlYwVHdJ56MgeWvX5QGu6-ZXntcT-NZYY0Xv_2v3r7BSKXSq_fIpoHLA"},
-      subvectors: [
-        { text: "",
-          ciphertext: 'bx06qbSPTFt+zNZfBQVAZPDKq6E7stZZBRSP0LpUHzJGNK7uS5RtpaxwhnGMxW0/UixRpqRVEoX5DcGeI5hRb044fA84dey2zQAHnsm2QjTdkMBc6ntrk6cZjQ950nl+mEIUGBkefE7FGmaqKKLr0j/RTXmL5Yx1VWjnBf7P6h+9RYd+tpWrClz4idDv7Jy2ldAsju6yVHEZhc/9KnV9sKYi9RGrGEtrW/Yywv2wKpg90LTk+9eS/rl+35AFu+gR9hGAbi0et5Sn5cwiv0xVUt4G2iCkirLRJaR0oGJz5QoEHpaJVgOb2/SAD23W3yv7OPqOcybr2HFwVoG0IbeVwtmnWPW7omzmCEjBrvpHbRZBJpPlAhKtgJGSWXg0vgjOOSwvleczgTDhu6O1npbqFtlNi/XMpKoNsdnSEFNwx/os+40bQMOJCJ2tHFFSps2B1xtWQPPY9sh044YszPnz4/nOs/nGHrhJOxCGPoxsGH8ezAl4eb3LclZ1VUqNr5vFWpF7zGP1AiYCPnJXZFC2++bd9r7ov662XV6lfxv8CFxAF4MIRRsCaHCgZIF/P2LkU1zzvxjjoH/gqusY03nZqahmiuXMHvfJbOjUw62ch1RT4o70NvAQb6YCgnd6z9HdC1QjDemK0wX/H499UtlLk956Ofr4iWodEiEYJOHA7tE=' },
-        { text: "Hello World!",
-          ciphertext: 'dzQ3NlKfoqKcX3E9GQWMjrh7lh2ef4Hu+4/yyxcfPF3rQMQWQkJon0lrASwLq2sFx75eP+bvMDbK6FykOyCAavqpFegYhyFO2t7vBpDhsx+w0LUMeW0OYOELiNUtF9Bs2JlLj/hW4ZDQWQHS1flfStsqmngNMrcbjJn2iTXONZRwuROpx4KRudNNdb9yYYgiHUswLwsd6RqyPsa5AqPuDEFjJSvH4jqdAYsmtCshsYUFogHDdYgC1a1Fm0PfxFoCNbcD9a++yhDcT+aK3UZl69c/M6Saz4iHZx7aMFTXlbpEdFDgM8D1SHphRG4Pxiu2MD1iQIavukXzQdAgXoLScA4eGp24P0G4lWGbQ0HILtc4dvmUINbOKlMXCw80kh7us2ifoqj9kefs/EHTAxym5EFk9hehcpajG5i89xSvAc1+oyT14zb1Zz57MFH7A4gOKolQ8mqd2a8fHkag4e+N9YYBm+bE3Cyu/ihf07+KGsMv/u4UwKO4TYufqfBO4I+DTj9fjKECTu72tDYVkK7xoTYw4kSpTUEDp78TYV8szGcVNJ0jr3o5YXM2sZA6L0zssorpR9TBxMvbXHrEXKVbnPBv8P30r526MVPNkiYTlPoRNlS2rAwbeiv5DA9jgU53X0geb7JLchOKLwLv03JofbsW0CIh5nVUldsNvpWU+Jw=' },
-      ] },
-];
-
-*/
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/rsassa-pkcs1_sha-1.js
+++ /dev/null
@@ -1,337 +0,0 @@
-describe( 'RSASSA-PKCS1-v1.5_SHA-1', function () {
-    var alg = { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-1' },
-        pubUse = 'verify',
-        prvUse = 'sign',
-        jwkAlg = 'RS1';
-
-    function skipModLen ( modLen ) {
-        return modLen > 2048;
-    }
-
-    describe( "generateKey", function () {
-        [ 1024, 2048, 3072, 4096 ].forEach( function ( modLen ) {
-            (skipModLen(modLen) ? xdescribe : describe)( modLen + " bits", function ( done ) {
-                var keyAlg = extend( normalizeAlg(alg), { modulusLength: modLen, publicExponent: x2b('10001') } );
-
-                var generateKeyComplete = new Promise( function ( res, rej ) {
-                        skipModLen(modLen) ? rej( new Error("Skipping large RSA moduli") )
-                                           : res( crypto.subtle.generateKey( keyAlg, true, [ prvUse, pubUse ] ) );
-                    });
-
-                var vectors = [
-                    { text: "" },
-                    { text: "Hello World!" },
-                ];
-
-                it( "generateKey", function ( done ) {
-                    generateKeyComplete
-                        .then( function ( keyPair ) {
-                            expect(keyPair).toBeDefined();
-
-                            expect(keyPair.publicKey).toEqual(jasmine.any(CryptoKey));
-                            expect(keyPair.publicKey.type).toBe('public');
-                            expect(keyPair.publicKey.algorithm).toEqual(keyAlg);
-                            expect(keyPair.publicKey.extractable).toBe(true);
-                            expect(keyPair.publicKey.usages).toEqual([pubUse]);
-
-                            expect(keyPair.privateKey).toEqual(jasmine.any(CryptoKey));
-                            expect(keyPair.privateKey.type).toBe('private');
-                            expect(keyPair.privateKey.algorithm).toEqual(keyAlg);
-                            expect(keyPair.privateKey.extractable).toBe(true);
-                            expect(keyPair.privateKey.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                }, 30000 );
-
-                describe( "exportKey", function () {
-                    it( "spki", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'spki', keyPair.publicKey );
-                            })
-                            .then( function ( spkiData ) {
-                                expect(spkiData).toEqual(jasmine.any(ArrayBuffer));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "pkcs8", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'pkcs8', keyPair.privateKey );
-                            })
-                            .then( function ( pkcs8Data ) {
-                                expect(pkcs8Data).toEqual(jasmine.any(ArrayBuffer));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "jwk publicKey", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'jwk', keyPair.publicKey );
-                            })
-                            .then( function ( jwkPubKey ) {
-                                expect(jwkPubKey).toEqual(jasmine.objectContaining( { 'kty': 'RSA', 'alg': jwkAlg, 'ext': true, 'key_ops': [pubUse] } ));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "jwk privateKey", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'jwk', keyPair.privateKey );
-                            })
-                            .then( function ( jwkPrvKey ) {
-                                expect(jwkPrvKey).toEqual(jasmine.objectContaining( { 'kty': 'RSA', 'alg': jwkAlg, 'ext': true, 'key_ops': [prvUse] } ));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-                });
-
-                describe( "sign", function () {
-                    vectors.forEach( function ( v ) {
-                        it( "'" + v.text + "' as ArrayBuffer", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.sign( alg, keyPair.privateKey, s2b(v.text).buffer );
-                                })
-                                .then( function ( signature ) {
-                                    expect(signature).toEqual( jasmine.any(ArrayBuffer) );
-                                    expect(signature.byteLength).toBe(modLen>>3);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-
-                        it( "'" + v.text + "' as Uint8Array", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.sign( alg, keyPair.privateKey, s2b(v.text) );
-                                })
-                                .then( function ( signature ) {
-                                    expect(signature).toEqual( jasmine.any(ArrayBuffer) );
-                                    expect(signature.byteLength).toBe(modLen>>3);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-                    });
-                });
-
-                describe( "verify", function () {
-                    vectors.forEach( function ( v ) {
-                        it( "'" + v.text + "'", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.sign( alg, keyPair.privateKey, s2b(v.text) )
-                                        .then( function ( signature ) {
-                                            return crypto.subtle.verify( alg, keyPair.publicKey, signature, s2b(v.text) );
-                                        });
-                                })
-                                .then( function ( valid ) {
-                                    expect(valid).toBe(true);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-                    });
-                });
-            });
-        });
-    });
-
-    describe( "importKey", function () {
-        var vectors = [
-            { modLen: 1024,
-              spkiPubKey: 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC9Crw44P//zsyyf9RoosEyjWrNihhPdEiMkBwTUAqGdGQGsiTDqYEnRHU6OgR8Hn0SmmvUTTpIlJJzW9ahL7c9EUePNmpgZodInan2v2QakJbJNG/z/kcE8ob6xiY+ZPU7FrO5ueE7+s39KZ5/RJ/gFNIKC4xZlmeMlZJCaMHkWQIDAQAB',
-              pkcsPrvKey: 'MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAL0KvDjg///OzLJ/1GiiwTKNas2KGE90SIyQHBNQCoZ0ZAayJMOpgSdEdTo6BHwefRKaa9RNOkiUknNb1qEvtz0RR482amBmh0idqfa/ZBqQlsk0b/P+RwTyhvrGJj5k9TsWs7m54Tv6zf0pnn9En+AU0goLjFmWZ4yVkkJoweRZAgMBAAECgYA0UDw2IU22pKvQ2b8WFbQRIUFlD8oacruA6oBad9Px0VO85p915fpvu2oVaujC0E0cUM92OMjgPP0qH0gN4v551TEMFKjHNtgBqDb/1LDZ711p+L295CgFN2O5OadNlUjwSEcrsv/qlPdHvMf+YhTGkb8QqAG1eM09JEDjGGGgAQJBAPcqfIg72BvsCTfDtCsCfThvqXkDuha9FXOM3T3L0u8BjNmSBPk2PPFWlFVbqYSS1zk9LHtTS96nrNYPms3Q6dkCQQDDzG1HPShsfquwiIgztU+mMWGX2wZFaJp43aZSQT+UzRhB/sGYanABbCnfccRUnXS4uKDvnFmRUR/BWFEzNb6BAkAXJhmHwOMaql6qpF+pb5A+yuZ6eQjivE7YBadq9D4LOH/ymKRymsvWZp955x3XVtFlgP87ha+jaNzdJ5T+FcTxAkA1EmA8gxNF9T/MZfWlLmwcfB4b7z5P6f6U7F98xDrbtovwt4D6Mz+Q4ySmcEvrM5LDzyewSwzsGrUkzy+TVeoBAkEAz/3NoZF6zxMZjp6SQaO86xbrqgCJZJKJFxixZ9f/6LYFz8nSbSN4GSWZY1a4KN6RUX/qQnVJ8IBXdgNC+ov1ww==',
-              jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"vQq8OOD__87Msn_UaKLBMo1qzYoYT3RIjJAcE1AKhnRkBrIkw6mBJ0R1OjoEfB59Eppr1E06SJSSc1vWoS-3PRFHjzZqYGaHSJ2p9r9kGpCWyTRv8_5HBPKG-sYmPmT1OxazubnhO_rN_Smef0Sf4BTSCguMWZZnjJWSQmjB5Fk"},
-              jwkPrvKey: {"alg":"RS1","d":"NFA8NiFNtqSr0Nm_FhW0ESFBZQ_KGnK7gOqAWnfT8dFTvOafdeX6b7tqFWrowtBNHFDPdjjI4Dz9Kh9IDeL-edUxDBSoxzbYAag2_9Sw2e9dafi9veQoBTdjuTmnTZVI8EhHK7L_6pT3R7zH_mIUxpG_EKgBtXjNPSRA4xhhoAE","dp":"FyYZh8DjGqpeqqRfqW-QPsrmenkI4rxO2AWnavQ-Czh_8pikcprL1mafeecd11bRZYD_O4Wvo2jc3SeU_hXE8Q","dq":"NRJgPIMTRfU_zGX1pS5sHHweG-8-T-n-lOxffMQ627aL8LeA-jM_kOMkpnBL6zOSw88nsEsM7Bq1JM8vk1XqAQ","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"vQq8OOD__87Msn_UaKLBMo1qzYoYT3RIjJAcE1AKhnRkBrIkw6mBJ0R1OjoEfB59Eppr1E06SJSSc1vWoS-3PRFHjzZqYGaHSJ2p9r9kGpCWyTRv8_5HBPKG-sYmPmT1OxazubnhO_rN_Smef0Sf4BTSCguMWZZnjJWSQmjB5Fk","p":"9yp8iDvYG-wJN8O0KwJ9OG-peQO6Fr0Vc4zdPcvS7wGM2ZIE-TY88VaUVVuphJLXOT0se1NL3qes1g-azdDp2Q","q":"w8xtRz0obH6rsIiIM7VPpjFhl9sGRWiaeN2mUkE_lM0YQf7BmGpwAWwp33HEVJ10uLig75xZkVEfwVhRMzW-gQ","qi":"z_3NoZF6zxMZjp6SQaO86xbrqgCJZJKJFxixZ9f_6LYFz8nSbSN4GSWZY1a4KN6RUX_qQnVJ8IBXdgNC-ov1ww"} },
-            { modLen: 2048,
-              spkiPubKey: 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4Bzd5DJXjzWFiNyOuOXs6YpRQZPT4Za0APAFU+6+6CHfi6tZ64Ss80ht6pSDEI02FC+mC77BMXpU//SovXiM0bOKdQ8LaYjL0H1Wy5w9YjFgxVf7xS3bTDDzTHB1JfQlSDqiWiqmoHKKJpEnGkMEva2bEucAy+7YoDhjwPvaelPxX78A0Im1bpycSluwYKSbKESWkK3mH1cAIKj8URUuZtjsB2mEpPo8S1V0SgsXP1HPsqerJx+PN4h3FlxdQ5VzLRkIcssx7e7FLPXkIAvmkqexcto1QMgaETVAdno7wAYuzPrObEt4aoP4h/pb4t0AFjEPLFpSSj7nSHeaudu9eQIDAQAB',
-              pkcsPrvKey: 'MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDgHN3kMlePNYWI3I645ezpilFBk9PhlrQA8AVT7r7oId+Lq1nrhKzzSG3qlIMQjTYUL6YLvsExelT/9Ki9eIzRs4p1DwtpiMvQfVbLnD1iMWDFV/vFLdtMMPNMcHUl9CVIOqJaKqagcoomkScaQwS9rZsS5wDL7tigOGPA+9p6U/FfvwDQibVunJxKW7BgpJsoRJaQreYfVwAgqPxRFS5m2OwHaYSk+jxLVXRKCxc/Uc+yp6snH483iHcWXF1DlXMtGQhyyzHt7sUs9eQgC+aSp7Fy2jVAyBoRNUB2ejvABi7M+s5sS3hqg/iH+lvi3QAWMQ8sWlJKPudId5q52715AgMBAAECggEAJZoyULtxnYGpahE3kSZi3bxrbclT36Hdidq7yh1gwqoMS+7wI2gbbKZWaumIJBrNXA2ymn3jBF42LMvsE/5KAlVRgdqIW6isKcsd6QPJ+NO4HORqRecvyFTePZEQ1tFj//52hxJo6rrNGzN3kBx2iyy5vC4uIAlvJ1LOye539dYXPPLazHP6OMCTmn1ZrquPF8omWox1wZRe6IhBMEt1ZL4TkGIWTEVRDep8aSf3+ZebZPWOyrdxJKUCTA7RqTt9elE2er/D6rEjq6Bm+dZOP6N/cdvAKQ7U5MlnQKNOpbdV3HL8NnmaTgGxaFMAKMAAdpKLjAusvlRhIM2ayGikkQKBgQD+6xOAO6/WHiGRgqEUTx/MDT+uxwE8t2LnjSVNIYKVJ8dLSijrRLqixA541n7Cz/jrWVGfJmnmwDZUB4Hgc3MWzpU2SLyiuFFNnFhPntXN/kat58biWVNxw9GvRoqSRG35HqcrFcs73b9yjK+sNQY4KkHTV9KXyfKx60VI3wOT5wKBgQDhEFNpgKvmSCCcE5p6Q391uI6uIJZl19cHm0NjXpXpbA96mA6fMBylpwskV2pn9G6pA+slO7LeGpyReqp8/4IHrTxgLjH6Vr4xJQ4DpMFQyB2c42BiWBEnnN0v6t8CZKPEWmbOa7DsMTnfzNAfb0FhbKfxpH701/69w6nO97n3nwKBgQDr29sOMatuhDBw7plVLiRwau26K5zEbbUQIvMZW2Dz2ns1+SbFD7FTee0d9vAQFdbtApZXl3YyrzNVKiEL6CXbO0aplEEcmUd4dKjs+jw+PP9uVl4Y/acMQq8W6kC6NqA9+BOZ9K828+P3+51qyyC3BLok7kQGdy6bWeCgHN+1jwKBgG3gJYi9O67aCamI3ILSDxjuuCGEYUhpHl5lS3noxHFHwyrLr1/CAkpRCdx9HMKRj7DN6++qfIF4JnXTmAYcS2PqDC68fsPDs2iUuYnH1mTUvbhJPVXlvsJDD60EEkm9zkHfDI+7/Yzh32pGOFkQXK/udvM+pohsJr6IFo+nW0/rAoGBAOAgMItBWB8GTHd48fduaBUOQdQRql+dP17sqeVDrD0Zr6vGAPd/i0wriDxCIi1/NXB1wTrewIaPyFuwF18xq98uzVpocMqpICdnl31Z/6VBcGh4QKw/+3C1o9m7gO945gdlIqym01c3pyOMHRcImHEQwnWjKGMvdNGGQAueDHwE',
-              jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"4Bzd5DJXjzWFiNyOuOXs6YpRQZPT4Za0APAFU-6-6CHfi6tZ64Ss80ht6pSDEI02FC-mC77BMXpU__SovXiM0bOKdQ8LaYjL0H1Wy5w9YjFgxVf7xS3bTDDzTHB1JfQlSDqiWiqmoHKKJpEnGkMEva2bEucAy-7YoDhjwPvaelPxX78A0Im1bpycSluwYKSbKESWkK3mH1cAIKj8URUuZtjsB2mEpPo8S1V0SgsXP1HPsqerJx-PN4h3FlxdQ5VzLRkIcssx7e7FLPXkIAvmkqexcto1QMgaETVAdno7wAYuzPrObEt4aoP4h_pb4t0AFjEPLFpSSj7nSHeaudu9eQ"},
-              jwkPrvKey: {"alg":"RS1","d":"JZoyULtxnYGpahE3kSZi3bxrbclT36Hdidq7yh1gwqoMS-7wI2gbbKZWaumIJBrNXA2ymn3jBF42LMvsE_5KAlVRgdqIW6isKcsd6QPJ-NO4HORqRecvyFTePZEQ1tFj__52hxJo6rrNGzN3kBx2iyy5vC4uIAlvJ1LOye539dYXPPLazHP6OMCTmn1ZrquPF8omWox1wZRe6IhBMEt1ZL4TkGIWTEVRDep8aSf3-ZebZPWOyrdxJKUCTA7RqTt9elE2er_D6rEjq6Bm-dZOP6N_cdvAKQ7U5MlnQKNOpbdV3HL8NnmaTgGxaFMAKMAAdpKLjAusvlRhIM2ayGikkQ","dp":"69vbDjGrboQwcO6ZVS4kcGrtuiucxG21ECLzGVtg89p7NfkmxQ-xU3ntHfbwEBXW7QKWV5d2Mq8zVSohC-gl2ztGqZRBHJlHeHSo7Po8Pjz_blZeGP2nDEKvFupAujagPfgTmfSvNvPj9_udassgtwS6JO5EBncum1ngoBzftY8","dq":"beAliL07rtoJqYjcgtIPGO64IYRhSGkeXmVLeejEcUfDKsuvX8ICSlEJ3H0cwpGPsM3r76p8gXgmddOYBhxLY-oMLrx-w8OzaJS5icfWZNS9uEk9VeW-wkMPrQQSSb3OQd8Mj7v9jOHfakY4WRBcr-528z6miGwmvogWj6dbT-s","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"4Bzd5DJXjzWFiNyOuOXs6YpRQZPT4Za0APAFU-6-6CHfi6tZ64Ss80ht6pSDEI02FC-mC77BMXpU__SovXiM0bOKdQ8LaYjL0H1Wy5w9YjFgxVf7xS3bTDDzTHB1JfQlSDqiWiqmoHKKJpEnGkMEva2bEucAy-7YoDhjwPvaelPxX78A0Im1bpycSluwYKSbKESWkK3mH1cAIKj8URUuZtjsB2mEpPo8S1V0SgsXP1HPsqerJx-PN4h3FlxdQ5VzLRkIcssx7e7FLPXkIAvmkqexcto1QMgaETVAdno7wAYuzPrObEt4aoP4h_pb4t0AFjEPLFpSSj7nSHeaudu9eQ","p":"_usTgDuv1h4hkYKhFE8fzA0_rscBPLdi540lTSGClSfHS0oo60S6osQOeNZ-ws_461lRnyZp5sA2VAeB4HNzFs6VNki8orhRTZxYT57Vzf5GrefG4llTccPRr0aKkkRt-R6nKxXLO92_coyvrDUGOCpB01fSl8nysetFSN8Dk-c","q":"4RBTaYCr5kggnBOaekN_dbiOriCWZdfXB5tDY16V6WwPepgOnzAcpacLJFdqZ_RuqQPrJTuy3hqckXqqfP-CB608YC4x-la-MSUOA6TBUMgdnONgYlgRJ5zdL-rfAmSjxFpmzmuw7DE538zQH29BYWyn8aR-9Nf-vcOpzve5958","qi":"4CAwi0FYHwZMd3jx925oFQ5B1BGqX50_Xuyp5UOsPRmvq8YA93-LTCuIPEIiLX81cHXBOt7Aho_IW7AXXzGr3y7NWmhwyqkgJ2eXfVn_pUFwaHhArD_7cLWj2buA73jmB2UirKbTVzenI4wdFwiYcRDCdaMoYy900YZAC54MfAQ"} },
-            { modLen: 3072,
-              spkiPubKey: 'MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA3yFwWj1hAK9wNTerJwcoCygHRhuagC9xeeDibeRUCmRlZSUbZ/qhi8nEBmLg5mUZL5xRJV6AuGDqMpOamABo+JmEeLjGsrYsUVRcRlLK4GvVPYucIXNuHsmH7zA8hltx5rfFGuzY4EUYzUI8KAbJ4Z7AbxxxuukoNTItFpgzmUTkwl3dj9Hckv5v5npD7W5hK13rYPUrWPYsyC6ux0O+ozI2z8eSGwWjWq66xmjaUN1ZvGVvVKM5jZ9FpneYGZD+f5Nl+3OU3YE2sDqNnNoaNozJ+YFbcJ9Ck7c3fGQFi24Eq2kGGnSB12DvUy66qXcWmBwNwPV/T8ZrzKvmlEGwJRLGIEDAoKr7j+6Iw6/Bkyj/uHw7kn9ZxheX8ms65mcKRO6OxpF/4DOX0lptdYNpJS5NcrLM4XvuyJYNQC0DbBgn9SVUEk0kFKWFK6zHl8AncxTYraNLXZ1YfzAJRCUYGqr3I4sBTea0upHtncH9KYyHIpXZasYtbCl2/gYF2DrVAgMBAAE=',
-              pkcsPrvKey: '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',
-              jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"3yFwWj1hAK9wNTerJwcoCygHRhuagC9xeeDibeRUCmRlZSUbZ_qhi8nEBmLg5mUZL5xRJV6AuGDqMpOamABo-JmEeLjGsrYsUVRcRlLK4GvVPYucIXNuHsmH7zA8hltx5rfFGuzY4EUYzUI8KAbJ4Z7AbxxxuukoNTItFpgzmUTkwl3dj9Hckv5v5npD7W5hK13rYPUrWPYsyC6ux0O-ozI2z8eSGwWjWq66xmjaUN1ZvGVvVKM5jZ9FpneYGZD-f5Nl-3OU3YE2sDqNnNoaNozJ-YFbcJ9Ck7c3fGQFi24Eq2kGGnSB12DvUy66qXcWmBwNwPV_T8ZrzKvmlEGwJRLGIEDAoKr7j-6Iw6_Bkyj_uHw7kn9ZxheX8ms65mcKRO6OxpF_4DOX0lptdYNpJS5NcrLM4XvuyJYNQC0DbBgn9SVUEk0kFKWFK6zHl8AncxTYraNLXZ1YfzAJRCUYGqr3I4sBTea0upHtncH9KYyHIpXZasYtbCl2_gYF2DrV"},
-              jwkPrvKey: {"alg":"RS1","d":"Bq4PmQQBZW3bJBy4iQCT2FGodhbZd0D0Wru6y6NsSKtcxbxop6I_N9ogfjhzlzIroNtDKqU7oUl1eXIlzKsmeVrPNnYBrNP7W6v03z4XSMSxq5gEYpP8Ffvej_CXv0X5kPirc_TnQT-QUITNHD2nyZNhG3J0jS3xwDXyV5zS3qHLX25D9cxImDX5z6KVagRF8HBtXYe5dn5YNN4A6YJDsMsODQZif2CZ1VspyErXTlhyGUvIG3aPgIfmI-esrAdFKOkRC6RdLs9CoAWpvzES5tcAo_McD8OyLRHDsQeW1ciZw9X338g3uFUMoEfPaojFrTZuI9DNd7fRYrDuvE6HuAlOcGr4ImYurhPXkqdgX_uGqTV4nnLcC_D1Z5w51c0lAzi45DLzJedTZeollx0bh6TF-CXcaeFYwKlWJpkcvz9rNLbYwbB97YHm6w5RGypvS1TksGjL41DJdHQG1h6ZJU5h4bCaKQTfV7iNinI4qqouU0viSm0Ru07FcVzw2TMB","dp":"4dmPzev30X5J8tkraCANk1n1_xUuBarhLjX1xixNBE2hGt9GruJA7Cv7McXvmOvHwiHl9D2eVoDgKPRPh3WqCoz2mLGakujelM5Gt3ncPlimieySf3ErN8NuiuyWTaZ8R2ihEZizn4l7a93FkI-xsqHDy07DMQ3of6ibFL6hFbrm-bj-DW_6C6YyQqaGaXx-IvKLkI2pzaK9kxJBV-1g46hfo9ipbgNN_gDrJ8fk7Chwg_KRkpHDbpyceZ49f7Mh","dq":"1XQxV0b4sH-VvuU-a4CEKXQnUkYlp1kAhWOI4FjqWd2obGbfj2FTUJWFrChtmvjys36RD-CCOHKh_sXdvMVYaAldm6aCx46v8Ibvb8jblwCb1eknKwmiKBEOtwzMJvJxZbR_T2iSVb1GvYeOym7ZUhJDdGF8BHulmvCk90w2BOWOucgyWeDNMNYX7wbIo0bSdA4sb8k_cTVOF_Ywx8jF_rYDdZG6Sqw3VUdTuNfHfQwXUE5AGi4Bo2LnZ1T0nERt","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"3yFwWj1hAK9wNTerJwcoCygHRhuagC9xeeDibeRUCmRlZSUbZ_qhi8nEBmLg5mUZL5xRJV6AuGDqMpOamABo-JmEeLjGsrYsUVRcRlLK4GvVPYucIXNuHsmH7zA8hltx5rfFGuzY4EUYzUI8KAbJ4Z7AbxxxuukoNTItFpgzmUTkwl3dj9Hckv5v5npD7W5hK13rYPUrWPYsyC6ux0O-ozI2z8eSGwWjWq66xmjaUN1ZvGVvVKM5jZ9FpneYGZD-f5Nl-3OU3YE2sDqNnNoaNozJ-YFbcJ9Ck7c3fGQFi24Eq2kGGnSB12DvUy66qXcWmBwNwPV_T8ZrzKvmlEGwJRLGIEDAoKr7j-6Iw6_Bkyj_uHw7kn9ZxheX8ms65mcKRO6OxpF_4DOX0lptdYNpJS5NcrLM4XvuyJYNQC0DbBgn9SVUEk0kFKWFK6zHl8AncxTYraNLXZ1YfzAJRCUYGqr3I4sBTea0upHtncH9KYyHIpXZasYtbCl2_gYF2DrV","p":"8KXTeK4RQyPFayq98J9zKvJzFlFslLmTf3QJMMa622nWFubQKDGDCb0tti1IBVdx6bTKa-fSCLIRIW-zd0EMPeDdHaOsMYss3txMqDPK15f3lill9a9S9ZF4yELmGZ305R7fW3ydciroPnhdynBLmAthiz8N3QBG6ZuyH7bWYEUcZHlAC2EfAIvWu1t3mUpwJn6DoLE_9v7TwGsrDtdLKw3ccrFex1PN8YDAfjVaY5893QJkJ2M6szaMmP6V2l5h","q":"7V2HdUddFsjFIYiqPoUDb4_4CQ8NBB3MNOPU8a19ImPAZhfHElj7E_99EZjX2RLULXngItOTosTg_vYTovhJRtU1PvjddE1VkrthnuIgDDctnb1T7UF6k1QaZKkOVnGOaT2IrR_uD8QlG6QEiyWPOyfuIe3NJJy3AWmt2-z_VN79dL4nRJssOOrqErvDJOFuhbZtaSGACNjfZZbFZep4qLHTcJde_Kc1hHLe92SQY_T8W3gcfzq9cBNv_NtO1Oj1","qi":"rB6PdO61kGpTE0MRtUIKJl2jflj53dX3xMCYgX5CLKJs9YexKYCT490t-m5fYai6Oud-kuQN12W-JM_t42oIu035S4xg0hmrtZVEqsmrZYOR-zDtu3QY437UMgLBYRM2XZQLpLB9RbapmU7Nte9F1OPKtiYJqfFIrTGe75w5TGplV0_K_5PJ5Na_dNyzZxl7Z8PoH-uGl6QWLifeYwQ9n29PEAF5CACJ4Bb9_cMoJ-70i-fENvQuX1LW5KsCPsAC"} },
-            { modLen: 4096,
-              spkiPubKey: 'MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAr8JV9r7hQgofgxHGFpL/CUhz1QCynLR1aKqwcpEbtVs5eXfZTVSeE/ASc1qhmFbIQ9MGCui77lntDKuWwaAxRwP5bXVHVvGl1swbsM1YSzSm4rwud9wmeKizoMcvLO4nTMSwmJEFN0rQvmpnnFf+eXM0HEzEr9+qZqPbv9k8r7TCLUJZXo/52ntRavEAYcGA4UCcnrSPQeyCkmNLNYGR7bfRjBy/Ok4SwGSW81gKmzt9Y68Ptsp+xkLKslUffQe3QaMTe5E31ycSJyS2ywJv8TP80nuQtQrsgj5NmU7GHufTFd6KAnY3xBozXhUBWYUqjXvrSBdFYi5iVu4SsY31wivha1wGX/uOlm4lV7lBVbKyh8Tuvq5sid7snRk5y7ERTlywtJR85o++qevDi/2FNxOibnJoFHAWlxKVtn8yshZFc4Kmy5R84tFptoFeda+zCSYlwtHQBuYOoTm6F+ESMDRK3JuEr07cMZ7QD+VR4LRDEGJCqrtDccB11JOQu32Ds06odB8fsY9ikCbaQW91nvQcQ1CfiFTG7vYRiLM/4rkClBvmKfG0apluctQ1FZZgKV8LQF3FG1644GJlcuwWXUA5j8fdtvgLlKybpuNKN9E9THZgsFRSx/uvWoBL7GdyY82FXKDqVcKFlv6N9MH1GKsAb6jRj5yybjM80LHtKZECAwEAAQ==',
-              pkcsPrvKey: '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',
-              jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"r8JV9r7hQgofgxHGFpL_CUhz1QCynLR1aKqwcpEbtVs5eXfZTVSeE_ASc1qhmFbIQ9MGCui77lntDKuWwaAxRwP5bXVHVvGl1swbsM1YSzSm4rwud9wmeKizoMcvLO4nTMSwmJEFN0rQvmpnnFf-eXM0HEzEr9-qZqPbv9k8r7TCLUJZXo_52ntRavEAYcGA4UCcnrSPQeyCkmNLNYGR7bfRjBy_Ok4SwGSW81gKmzt9Y68Ptsp-xkLKslUffQe3QaMTe5E31ycSJyS2ywJv8TP80nuQtQrsgj5NmU7GHufTFd6KAnY3xBozXhUBWYUqjXvrSBdFYi5iVu4SsY31wivha1wGX_uOlm4lV7lBVbKyh8Tuvq5sid7snRk5y7ERTlywtJR85o--qevDi_2FNxOibnJoFHAWlxKVtn8yshZFc4Kmy5R84tFptoFeda-zCSYlwtHQBuYOoTm6F-ESMDRK3JuEr07cMZ7QD-VR4LRDEGJCqrtDccB11JOQu32Ds06odB8fsY9ikCbaQW91nvQcQ1CfiFTG7vYRiLM_4rkClBvmKfG0apluctQ1FZZgKV8LQF3FG1644GJlcuwWXUA5j8fdtvgLlKybpuNKN9E9THZgsFRSx_uvWoBL7GdyY82FXKDqVcKFlv6N9MH1GKsAb6jRj5yybjM80LHtKZE"},
-              jwkPrvKey: {"alg":"RS1","d":"qDWzlB0G9O8_TW-7R2uTzkybHyY1yyginfOOP3eFL0KJdSkwvYPYbnh7EA-TTHrx24eg5tvq0Kkb595owBMSVkcFdq6hgiJvd22Mqt88O22-so0rY-c8oonCsIMxMS0US7KK2NkiRtLBiRvI4aaNk6qgGt2V-ER1jxoPfELqg7bZh_tSEOB2XZVcTJ8uoGBTekEeI_3mhU9Xf8ar-h9xjDM6x3_TvHdwFtWuamK-c-axkK_AuE6AmjreR2KUalLyHk12nfJToQRxqSjIEO7aN9xrgP5ldf9obxY1qh3sGzP_n5SGPOjrYjE5LDeqPQTnvtT0TuCGtPpzf4MGPQwCQSa8LJtZsPprrwkxFDzaBaK7QkaEw4-8V-gy4ODSdXHj_h3Ok8DzoLPBqzJHeYHYgmyrEF_3cprk_QOTj0jkGYVd1UILEDwg3rmAxEC4RIzdpb6g1A4K14LcC4nGpLAIR4PypTy4eo1GKUv4BS5kz8Pv1xX2vH3CfgGwwkv4yd6t5amg26OU2y4bBuI3ZTWELU3Zc4r1IsXhsKvbjbJ2e3-el7S7NMUQB1iAbr4zHsMSLb-S4_5DCvUn7beooIcgfg7q_pCi31VI9q-n6NAJy0chbPvjqKamfXPb0T9GX2J4NVUJS6TnqnKVMsyeThPle87jwjzGD7K9SEfL3bPQ1Gk","dp":"jlhFpwTfo6iZaKv4Holu78DhvzWvNE3tdAgwohy3RSxm1EZ3JzMMLNJ9s_oiEK702k2egNM5mwhR7OKE1ozrsXw7HZNYT4t-kuWewZebZ5KcoqtHQ0O5YEvFoyvZWvRZNZpuIusYmvSt-LEcEzfw9e3bdOLAbTtgOOO-C5ZjV03CF9tZEK1e2YBQsnZhBxX-qkTAZ8V8cMR-xLCSVNohx1o98yc70d-WpHDg_k8Kh27XmrJM7HAkcNX8LMoyjzoYDCPqPi5B-EhtxE7b96O_V7GCewbFAev5rJtRD8UiQpOowEXN-tfbjznv8npYRu1oxvw7EExVjUJPWZBKsGgLsQ","dq":"s2Mc53YhS1jlfwZRRPlcP3q2qVIFqR7Bp4s2sGaZoRW4i5shRo4Ny6UzK4l5j52EHOZFWN-98c7G4757MNYSn621EQ2BuNktufcLlXzcJLwLbB78voJjg3n86dV974YOeA0wnAMqdD-YgdSBroj0baJ7f3VIlIjFYnmoM8eKr3bDKyOd0NwumgwepvjFXC-l5_TA-C7inBMezuGqQKndxGMqf3IxpJWPuZJ9VdS30vPiQ9vl34UsGyuuxGMIvA9yc8-JtsHYfuIH3FMiYa0VxbfbhxsJcr2mLAMsoU2ef6A2I2PBQetx3XMo030QFa8o8PeE_KaLBHKbNLo9Q6qeHw","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"r8JV9r7hQgofgxHGFpL_CUhz1QCynLR1aKqwcpEbtVs5eXfZTVSeE_ASc1qhmFbIQ9MGCui77lntDKuWwaAxRwP5bXVHVvGl1swbsM1YSzSm4rwud9wmeKizoMcvLO4nTMSwmJEFN0rQvmpnnFf-eXM0HEzEr9-qZqPbv9k8r7TCLUJZXo_52ntRavEAYcGA4UCcnrSPQeyCkmNLNYGR7bfRjBy_Ok4SwGSW81gKmzt9Y68Ptsp-xkLKslUffQe3QaMTe5E31ycSJyS2ywJv8TP80nuQtQrsgj5NmU7GHufTFd6KAnY3xBozXhUBWYUqjXvrSBdFYi5iVu4SsY31wivha1wGX_uOlm4lV7lBVbKyh8Tuvq5sid7snRk5y7ERTlywtJR85o--qevDi_2FNxOibnJoFHAWlxKVtn8yshZFc4Kmy5R84tFptoFeda-zCSYlwtHQBuYOoTm6F-ESMDRK3JuEr07cMZ7QD-VR4LRDEGJCqrtDccB11JOQu32Ds06odB8fsY9ikCbaQW91nvQcQ1CfiFTG7vYRiLM_4rkClBvmKfG0apluctQ1FZZgKV8LQF3FG1644GJlcuwWXUA5j8fdtvgLlKybpuNKN9E9THZgsFRSx_uvWoBL7GdyY82FXKDqVcKFlv6N9MH1GKsAb6jRj5yybjM80LHtKZE","p":"3uwbNKyAd9plmuzFlQdf1HFzJ3D9kLHz-RXOcFkHTbBNhgcE7bXUP2qz1221lLtfV0X8278rsR9A4EQJKHu7R6VxKHaQ-Zy9e2ainpnxm16G6II9ESWdEeTskJMv8_JroPuRxeq7q1GizdT2e74ORvRP4qApNOCdUOuihbqAAqZBH4zNnhA-rxlEF1aYL1Frt2U45RIVkkjRg-L5If2xBYF55CLvqUCBOUF29z1498lgz4_g3fgs1YkoZEQef2quwBwhSpYMRlcM8umi9S7Hi6DTsGJFDqOG-jTwEJRMMj9leYG6BWtDudrmL-zhtut-JIoFQ6FKM4gtMcTPT1jM6w","q":"ydayRE3U0gqhiUnFzBsPu9Gq8Bajknn-Pkg0DbfivreSaQO3vBoXOOYM9_2YqLJQ2oieHQ5lwLkNqGUDAfPbwdHmIAipZYacSz9BoA60TUQp9wSs_yyfkSmr4uFIJA6itMkaoFKV5Vk1zm_RP_Ae1GRD9NcGXh9B5p5dyde-PstfKojbqwIM1apX0YPgLxEgxbhEg7qEb8h-e0Qx0LNh7YS2lTvDvzaMdDuuKkNmwEQGB2brFw6IanckNho-WDXBCGqhmXYAB5IVGRHKO_SNhCUnFLLqzTO_S1DHqV_H8R8TmIxYrrLVrwnVP19C6xbcjeSFk25GgFomeLi1GmRUcw","qi":"ehgMMBDFy5JTubQOVRbI5RzE0r67h2LNuApM-zzn4SSGBKNoW1fUBV8Xec3Ry-VPrQolskS1bNQd2Ka6sGkhKxX6RqxzTi-hBksQCtet6MnXoeylu5h6lcBP6sQb-W3T74G-1ZB1O40p3J8DNxureoy86apQ6zPToUDbuexe8dzLbfxsFDqvAbaUmugBAB3p-D1XrWdtv91AwCmkbxY0hWUAUaSgs11xhs7By_WI-5-sbyMSsr4hRUzV8MKzrQhBo8x7bUherqQKc4Rz2iPxpv2xb-FQSyNYf_vd0XFWItc-7hxL4CR2ZYvXUch67ZzcUX2heLP0TJSXlJ7AP_hMew"} },
-        ];
-
-        vectors.forEach( function ( v ) {
-            describe( v.modLen + " bits", function () {
-                var keyAlg = extend( normalizeAlg(alg), { modulusLength: v.modLen, publicExponent: x2b('10001') } );
-
-                it( "spki publicKey", function ( done ) {
-                    crypto.subtle.importKey( "spki", s2b( atob(v.spkiPubKey) ), alg, true, [ pubUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('public');
-                            expect(key.extractable).toBe(true);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([pubUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "pkcs8 privateKey", function ( done ) {
-                    crypto.subtle.importKey( "pkcs8", s2b( atob(v.pkcsPrvKey) ), alg, false, [ prvUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('private');
-                            expect(key.extractable).toEqual(false);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "jwk publicKey", function ( done ) {
-                    crypto.subtle.importKey( "jwk", v.jwkPubKey, alg, true, [ pubUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('public');
-                            expect(key.extractable).toBe(true);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([pubUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "jwk privateKey", function ( done ) {
-                    crypto.subtle.importKey( "jwk", v.jwkPrvKey, alg, false, [ prvUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('private');
-                            expect(key.extractable).toEqual(false);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-            });
-        });
-    });
-
-    describe( "verify", function () {
-        var vectors = [
-            { modLen: 1024,
-              jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"vQq8OOD__87Msn_UaKLBMo1qzYoYT3RIjJAcE1AKhnRkBrIkw6mBJ0R1OjoEfB59Eppr1E06SJSSc1vWoS-3PRFHjzZqYGaHSJ2p9r9kGpCWyTRv8_5HBPKG-sYmPmT1OxazubnhO_rN_Smef0Sf4BTSCguMWZZnjJWSQmjB5Fk"},
-              subvectors: [
-                { text: "",
-                  signature: "Wrld8ba7rlqMQPt6YemWO872ouAbkuKR9UOxSU+IwkXvyCzPWSGPIMkakTlSd6vfCCcQ38wOQEWkIgvjAno6KhL7w57zmR76SP8N4s9ZTL94fVyGVQNb58HA9cu561dBq5FmSMa48E4eb6sKFnnJrH7P+GD+7PmkDxYH9z+KJoE=" },
-                { text: "Hello World!",
-                  signature: "BFQnxsM1pnhN2SAWXVQDrnTVmrmFXaDYnzbTmhHmCTgH8Q6pAQJKYKVEjy+0ndOWvkftRM2pHUK900Tn61k4DXkv9bUluiqgLkHsPUYs4vEUROz2tUnQyzBacKn5+JaR0mKKlW8GkYMpHJEsCJK37QLRBnP9BCHEzpNSkvC3ba0=" },
-              ] },
-            { modLen: 2048,
-              jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"4Bzd5DJXjzWFiNyOuOXs6YpRQZPT4Za0APAFU-6-6CHfi6tZ64Ss80ht6pSDEI02FC-mC77BMXpU__SovXiM0bOKdQ8LaYjL0H1Wy5w9YjFgxVf7xS3bTDDzTHB1JfQlSDqiWiqmoHKKJpEnGkMEva2bEucAy-7YoDhjwPvaelPxX78A0Im1bpycSluwYKSbKESWkK3mH1cAIKj8URUuZtjsB2mEpPo8S1V0SgsXP1HPsqerJx-PN4h3FlxdQ5VzLRkIcssx7e7FLPXkIAvmkqexcto1QMgaETVAdno7wAYuzPrObEt4aoP4h_pb4t0AFjEPLFpSSj7nSHeaudu9eQ"},
-              subvectors: [
-                { text: "",
-                  signature: "efzLMPufSRE7oPf2IIchoic43DA3OcCrblzxVogedSRbJYTI0YaFqc7mkz0tusTmCb8Nx+QgGuluVfSXkPAr6u4dt6M/Pbg1qyHctqdB9r/onWZN5nkDVX/F/Gay1woaB/XdWDLiC88Jor7ebBpvwNp78TUozsqSSNwmt1tVb0SGILU6ZgRW5+Wb2uA0BB3Hw7lFAzGnCrgVFxlbI3tIVFcn5qAGSz0LxR1XHYXp6u1qd0LdbzbY/p8V+szQJQPKGgqZqvH02AzgHJH98iN301LdmPzOuFDkasQSrCGuyXx7eHo2vRi3r90Shkk52RmI7jDU8sfvYkWAe9JptfFkUQ==" },
-                { text: "Hello World!",
-                  signature: "wdFeRqSlEjDbsKKOD87bI5E3r1nMqdB/ol/XnV0pT0LovM0RK3TUb1vJONETf3CNnO+6p1JwXyuF084yjIw3UixeohGu7Sthnt2I+RY7uO86EOzR+ZaxccwiNSNbPNTAD9lsXUXn9aLL8hhUtjhyMgsxVeF+0+I6X7bcUZXKLk0JMKA9MSkPmw0kalZ1cJQsGTE47kllXUk3B5KO4QSVtDiGmUY3u5sKZSihOawaT7p1atZVd36kyehyn31oYZP8oFhJ7WF5pjCdGF+n4QUJe7LhZiEYAlTY9qeYMw9xx8ptBhGHtPojfTeX8D7Ho3SD8reBzZUc2uUfz1/sG+22mw==" },
-              ] },
-            { modLen: 3072,
-              jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"3yFwWj1hAK9wNTerJwcoCygHRhuagC9xeeDibeRUCmRlZSUbZ_qhi8nEBmLg5mUZL5xRJV6AuGDqMpOamABo-JmEeLjGsrYsUVRcRlLK4GvVPYucIXNuHsmH7zA8hltx5rfFGuzY4EUYzUI8KAbJ4Z7AbxxxuukoNTItFpgzmUTkwl3dj9Hckv5v5npD7W5hK13rYPUrWPYsyC6ux0O-ozI2z8eSGwWjWq66xmjaUN1ZvGVvVKM5jZ9FpneYGZD-f5Nl-3OU3YE2sDqNnNoaNozJ-YFbcJ9Ck7c3fGQFi24Eq2kGGnSB12DvUy66qXcWmBwNwPV_T8ZrzKvmlEGwJRLGIEDAoKr7j-6Iw6_Bkyj_uHw7kn9ZxheX8ms65mcKRO6OxpF_4DOX0lptdYNpJS5NcrLM4XvuyJYNQC0DbBgn9SVUEk0kFKWFK6zHl8AncxTYraNLXZ1YfzAJRCUYGqr3I4sBTea0upHtncH9KYyHIpXZasYtbCl2_gYF2DrV"},
-              subvectors: [
-                { text: "",
-                  signature: "QXiVBWA9y8joOzA/erxr3yThLMQITfFdUrhx3Wp/P804b1YoROrc3WFnSvywwmP41p+f9Ov2NfE0rL2Ar4NGBkf2dST7N1hOAHpyiw0GaQb+jVjNHG3v7C5bIUZ4Q11yi39sm7Zg5jZDKkB/CH/g3Nrj0XrkJc86ivtqgg2WXQKL5T39AoFYqtaSwOVv0sEIexw3iXGPNsqKXWQEvsuEdJsw5ZP20OhGQ+RZnJ6zPadx6FNqyMrn24J++DaAPCgz7fCPjIYMSV3jIfNWm68m9N6F162syAFavt6bdedDFgU5GR5hfpE2HGwC773tCHeClDMYxQp1ZZp2lKcPD7KtENJ8o+C40UTv/pKngeJz3iInL9R3hIfzVHC3KI0BW8eVRuawfNGh4tvnSw/DpdipykmhFQ5xmxVw7qZ5q0v7Rf+Sl2/k2DuALc0Y9jBITsNOoJWQOmJoX0mXllS01VSXVxGNMguJWumBlNcEfqYO6qb8Y1RbWWLZsunrVFBO5JXm" },
-                { text: "Hello World!",
-                  signature: "w5FLdI5bY7tjgrdqU/q4r585wenx76hGqmpqTfmiMKojIuS6spDQDOdV4JuJhBBCEq8Riscw4Jd3ngOagwW8lvvmkRcVyu7jv/DI6yV+/EtxN2r0nQT969dixPHkGQmCvFWenFTdZ5scey5studbJ+qur9OLrE/Hh1t2aHeECOhm/shIGVepn026ly2P1eAxnxDz6F1Gcs8epgsJQ2/9ql9rWWOrjCXXPhhoyKWtvMpDInIESpSu1W0llWJl7TtHBJZsuJotalZ82S2ijc/l5figEPmoM9q1WNEpK1sJFN7NPpp8WFMT60bo0yc2LLHt5D+wy4TklYmXA7uEa8wHm1HxblLEv4YswDRa2NYlmXImGFJ68nhYqKJlNfZEjMgHTY/2xG+ZOaM5SRLq2tfHNXrdt11wLJLU4OOGIsB5FUL84PyV3WfQ2WBsyVc1nHtjfKe1BgBN3mDYec4G/z0YKproIE3/r1Vw6p360Rvn5IJsNd6QoLxp83o9GGzmlpTN" },
-              ] },
-            { modLen: 4096,
-              jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"r8JV9r7hQgofgxHGFpL_CUhz1QCynLR1aKqwcpEbtVs5eXfZTVSeE_ASc1qhmFbIQ9MGCui77lntDKuWwaAxRwP5bXVHVvGl1swbsM1YSzSm4rwud9wmeKizoMcvLO4nTMSwmJEFN0rQvmpnnFf-eXM0HEzEr9-qZqPbv9k8r7TCLUJZXo_52ntRavEAYcGA4UCcnrSPQeyCkmNLNYGR7bfRjBy_Ok4SwGSW81gKmzt9Y68Ptsp-xkLKslUffQe3QaMTe5E31ycSJyS2ywJv8TP80nuQtQrsgj5NmU7GHufTFd6KAnY3xBozXhUBWYUqjXvrSBdFYi5iVu4SsY31wivha1wGX_uOlm4lV7lBVbKyh8Tuvq5sid7snRk5y7ERTlywtJR85o--qevDi_2FNxOibnJoFHAWlxKVtn8yshZFc4Kmy5R84tFptoFeda-zCSYlwtHQBuYOoTm6F-ESMDRK3JuEr07cMZ7QD-VR4LRDEGJCqrtDccB11JOQu32Ds06odB8fsY9ikCbaQW91nvQcQ1CfiFTG7vYRiLM_4rkClBvmKfG0apluctQ1FZZgKV8LQF3FG1644GJlcuwWXUA5j8fdtvgLlKybpuNKN9E9THZgsFRSx_uvWoBL7GdyY82FXKDqVcKFlv6N9MH1GKsAb6jRj5yybjM80LHtKZE"},
-              subvectors: [
-                { text: "",
-                  signature: "dZydTzAOuKXomQ5clUywEQteb3LyzawW0jOkG8G+/N2+ES4Ltd8Y3mZ99NabQd0GBOXoO8n6SV+uVF8cd5jHgrHtqgDlA+5uZs+7pKPx0jdyRRhjbux3nlpMrXD6pqKGiTVGIHbj6hMJw3wWhNLSi1WXKnjyYEMh8dlNYqHArf41PDs44FuoF8HwkGK5e2wMH+Gf+0hV7nD8DF9M5U5lbntrhxWbPBe7mvIuZMLeqiywJMRyYIMvsSTrD/r06SEKfp4JLsnzud8M+gE4Hq8urkuNhf81j+pcCDCtCxp/eN8dzqsjweyab+jDL/4KLoi5ghOYkwc5MP5dxNiCmu/MHpSOkKicABn4svJEsHYCeeT8INng1ssJxVHbkR3ov7PodwBi7yMZcCxkq/KDXPKWo8vSWekLsXX6F96KPNTolb/Gr8+udmZsNkKv4Toi5bffjq6S597y/zBS7Sk2X51ZqhyDxpkdO76Vaxd0yBNQTFfi64u0WlS+kycM+ALKDYG5lAMVLdwdaIZsUDo3TSghsrKLW6bubQCgCkoLalJRKDNgzypKMQ0EhMDfEqASLldEsxTY1k27ZjVEeQYLZ00OrQeNedC6IqrcM5i19R0Gm/tbIFKwbQx7IX8W353TQqUAHY1T3wvEB8wY6EihgBWJU43rcK+216K/Ua2I+21r9qI=" },
-                { text: "Hello World!",
-                  signature: "Gqn6cx+XvLLOISfCYECHLDGhXsgUQ4flKx25ocGag12ZXDDCTHSu0hD8VBDXkiSflxgiYuTYzo2Ehb2sdfeg/auCdzIfedvGA2pnH51OrtVYlhFkuMOWtdqYOsr7yVVgKCJAN+jEZty8chxFUkZK4+ZolflkSz0oDoTx1PufDHabcE+iA4gBTyit49bGDEgbaAJdZZbth3qV3jSnoiVUp7MM2bpZrunva4XpEvhBrnsBxSJBisitVEa1UNYNl3GzgQpgGi+MvEglRIjFos31afVMNqQinmKQwwX2fnRNeQR6JamdS1cFXQ2K577oI3fKIjjSJfbsPP4dZP1v1JiqENpGjBFkTHQa4x+uisNZeJftSekdHSRI6XjfyVto9hPFVNILZ9uKfLNfbZqPKpTjublWAKTF+Ef/R4VGfRSyAso1mcrrOWO2mTKr40DVNHUts5aAngv0DP7Ig7YQphUaRDaMCrpoKI+R38xcfid8joaDJsYD7g5KfsEB4dvU6wwwl2+YcuO6r4bq5LWSH7APB02i9tPqOtWdQmEmTsncsf9Iu3XiaSQbCYLo3l27pBQY1cvv2KhJwxW/1mCoUGt39HqgaLAuWQ8a28Ku4SxIDuteWvS3koj1Nm8d25b5AgTpsXC69Fff+SY9Z0OSCKGv5OfUqjAavi3gF+zHFmsuLzA=" },
-              ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            describe( v.modLen + " bits", function ( done ) {
-                v.subvectors.forEach( function ( sv ) {
-                    it( "'" + sv.text + "' to match '" + sv.signature + "'", function ( done ) {
-                        crypto.subtle.importKey( "jwk", v.jwkPubKey, alg, true, [ pubUse ] )
-                            .then( function ( key ) {
-                                return crypto.subtle.verify( alg, key, s2b( atob(sv.signature) ), s2b(sv.text) );
-                            })
-                            .then( function ( valid ) {
-                                expect(valid).toBe(true);
-                            })
-                            .catch(fail)
-                            .then(done);
-                    });
-                });
-            });
-        });
-    });
-});
-
-/*
-
-var vectors = [
-    { modLen: 1024,
-      spkiPubKey: 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC9Crw44P//zsyyf9RoosEyjWrNihhPdEiMkBwTUAqGdGQGsiTDqYEnRHU6OgR8Hn0SmmvUTTpIlJJzW9ahL7c9EUePNmpgZodInan2v2QakJbJNG/z/kcE8ob6xiY+ZPU7FrO5ueE7+s39KZ5/RJ/gFNIKC4xZlmeMlZJCaMHkWQIDAQAB',
-      pkcsPrvKey: 'MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAL0KvDjg///OzLJ/1GiiwTKNas2KGE90SIyQHBNQCoZ0ZAayJMOpgSdEdTo6BHwefRKaa9RNOkiUknNb1qEvtz0RR482amBmh0idqfa/ZBqQlsk0b/P+RwTyhvrGJj5k9TsWs7m54Tv6zf0pnn9En+AU0goLjFmWZ4yVkkJoweRZAgMBAAECgYA0UDw2IU22pKvQ2b8WFbQRIUFlD8oacruA6oBad9Px0VO85p915fpvu2oVaujC0E0cUM92OMjgPP0qH0gN4v551TEMFKjHNtgBqDb/1LDZ711p+L295CgFN2O5OadNlUjwSEcrsv/qlPdHvMf+YhTGkb8QqAG1eM09JEDjGGGgAQJBAPcqfIg72BvsCTfDtCsCfThvqXkDuha9FXOM3T3L0u8BjNmSBPk2PPFWlFVbqYSS1zk9LHtTS96nrNYPms3Q6dkCQQDDzG1HPShsfquwiIgztU+mMWGX2wZFaJp43aZSQT+UzRhB/sGYanABbCnfccRUnXS4uKDvnFmRUR/BWFEzNb6BAkAXJhmHwOMaql6qpF+pb5A+yuZ6eQjivE7YBadq9D4LOH/ymKRymsvWZp955x3XVtFlgP87ha+jaNzdJ5T+FcTxAkA1EmA8gxNF9T/MZfWlLmwcfB4b7z5P6f6U7F98xDrbtovwt4D6Mz+Q4ySmcEvrM5LDzyewSwzsGrUkzy+TVeoBAkEAz/3NoZF6zxMZjp6SQaO86xbrqgCJZJKJFxixZ9f/6LYFz8nSbSN4GSWZY1a4KN6RUX/qQnVJ8IBXdgNC+ov1ww==',
-      jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"vQq8OOD__87Msn_UaKLBMo1qzYoYT3RIjJAcE1AKhnRkBrIkw6mBJ0R1OjoEfB59Eppr1E06SJSSc1vWoS-3PRFHjzZqYGaHSJ2p9r9kGpCWyTRv8_5HBPKG-sYmPmT1OxazubnhO_rN_Smef0Sf4BTSCguMWZZnjJWSQmjB5Fk"},
-      jwkPrvKey: {"alg":"RS1","d":"NFA8NiFNtqSr0Nm_FhW0ESFBZQ_KGnK7gOqAWnfT8dFTvOafdeX6b7tqFWrowtBNHFDPdjjI4Dz9Kh9IDeL-edUxDBSoxzbYAag2_9Sw2e9dafi9veQoBTdjuTmnTZVI8EhHK7L_6pT3R7zH_mIUxpG_EKgBtXjNPSRA4xhhoAE","dp":"FyYZh8DjGqpeqqRfqW-QPsrmenkI4rxO2AWnavQ-Czh_8pikcprL1mafeecd11bRZYD_O4Wvo2jc3SeU_hXE8Q","dq":"NRJgPIMTRfU_zGX1pS5sHHweG-8-T-n-lOxffMQ627aL8LeA-jM_kOMkpnBL6zOSw88nsEsM7Bq1JM8vk1XqAQ","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"vQq8OOD__87Msn_UaKLBMo1qzYoYT3RIjJAcE1AKhnRkBrIkw6mBJ0R1OjoEfB59Eppr1E06SJSSc1vWoS-3PRFHjzZqYGaHSJ2p9r9kGpCWyTRv8_5HBPKG-sYmPmT1OxazubnhO_rN_Smef0Sf4BTSCguMWZZnjJWSQmjB5Fk","p":"9yp8iDvYG-wJN8O0KwJ9OG-peQO6Fr0Vc4zdPcvS7wGM2ZIE-TY88VaUVVuphJLXOT0se1NL3qes1g-azdDp2Q","q":"w8xtRz0obH6rsIiIM7VPpjFhl9sGRWiaeN2mUkE_lM0YQf7BmGpwAWwp33HEVJ10uLig75xZkVEfwVhRMzW-gQ","qi":"z_3NoZF6zxMZjp6SQaO86xbrqgCJZJKJFxixZ9f_6LYFz8nSbSN4GSWZY1a4KN6RUX_qQnVJ8IBXdgNC-ov1ww"},
-      subvectors: [
-        { text: "",
-          signature: 'Wrld8ba7rlqMQPt6YemWO872ouAbkuKR9UOxSU+IwkXvyCzPWSGPIMkakTlSd6vfCCcQ38wOQEWkIgvjAno6KhL7w57zmR76SP8N4s9ZTL94fVyGVQNb58HA9cu561dBq5FmSMa48E4eb6sKFnnJrH7P+GD+7PmkDxYH9z+KJoE=' },
-        { text: "Hello World!",
-          signature: 'BFQnxsM1pnhN2SAWXVQDrnTVmrmFXaDYnzbTmhHmCTgH8Q6pAQJKYKVEjy+0ndOWvkftRM2pHUK900Tn61k4DXkv9bUluiqgLkHsPUYs4vEUROz2tUnQyzBacKn5+JaR0mKKlW8GkYMpHJEsCJK37QLRBnP9BCHEzpNSkvC3ba0=' },
-      ] },
-    { modLen: 2048,
-      spkiPubKey: 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4Bzd5DJXjzWFiNyOuOXs6YpRQZPT4Za0APAFU+6+6CHfi6tZ64Ss80ht6pSDEI02FC+mC77BMXpU//SovXiM0bOKdQ8LaYjL0H1Wy5w9YjFgxVf7xS3bTDDzTHB1JfQlSDqiWiqmoHKKJpEnGkMEva2bEucAy+7YoDhjwPvaelPxX78A0Im1bpycSluwYKSbKESWkK3mH1cAIKj8URUuZtjsB2mEpPo8S1V0SgsXP1HPsqerJx+PN4h3FlxdQ5VzLRkIcssx7e7FLPXkIAvmkqexcto1QMgaETVAdno7wAYuzPrObEt4aoP4h/pb4t0AFjEPLFpSSj7nSHeaudu9eQIDAQAB',
-      pkcsPrvKey: 'MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDgHN3kMlePNYWI3I645ezpilFBk9PhlrQA8AVT7r7oId+Lq1nrhKzzSG3qlIMQjTYUL6YLvsExelT/9Ki9eIzRs4p1DwtpiMvQfVbLnD1iMWDFV/vFLdtMMPNMcHUl9CVIOqJaKqagcoomkScaQwS9rZsS5wDL7tigOGPA+9p6U/FfvwDQibVunJxKW7BgpJsoRJaQreYfVwAgqPxRFS5m2OwHaYSk+jxLVXRKCxc/Uc+yp6snH483iHcWXF1DlXMtGQhyyzHt7sUs9eQgC+aSp7Fy2jVAyBoRNUB2ejvABi7M+s5sS3hqg/iH+lvi3QAWMQ8sWlJKPudId5q52715AgMBAAECggEAJZoyULtxnYGpahE3kSZi3bxrbclT36Hdidq7yh1gwqoMS+7wI2gbbKZWaumIJBrNXA2ymn3jBF42LMvsE/5KAlVRgdqIW6isKcsd6QPJ+NO4HORqRecvyFTePZEQ1tFj//52hxJo6rrNGzN3kBx2iyy5vC4uIAlvJ1LOye539dYXPPLazHP6OMCTmn1ZrquPF8omWox1wZRe6IhBMEt1ZL4TkGIWTEVRDep8aSf3+ZebZPWOyrdxJKUCTA7RqTt9elE2er/D6rEjq6Bm+dZOP6N/cdvAKQ7U5MlnQKNOpbdV3HL8NnmaTgGxaFMAKMAAdpKLjAusvlRhIM2ayGikkQKBgQD+6xOAO6/WHiGRgqEUTx/MDT+uxwE8t2LnjSVNIYKVJ8dLSijrRLqixA541n7Cz/jrWVGfJmnmwDZUB4Hgc3MWzpU2SLyiuFFNnFhPntXN/kat58biWVNxw9GvRoqSRG35HqcrFcs73b9yjK+sNQY4KkHTV9KXyfKx60VI3wOT5wKBgQDhEFNpgKvmSCCcE5p6Q391uI6uIJZl19cHm0NjXpXpbA96mA6fMBylpwskV2pn9G6pA+slO7LeGpyReqp8/4IHrTxgLjH6Vr4xJQ4DpMFQyB2c42BiWBEnnN0v6t8CZKPEWmbOa7DsMTnfzNAfb0FhbKfxpH701/69w6nO97n3nwKBgQDr29sOMatuhDBw7plVLiRwau26K5zEbbUQIvMZW2Dz2ns1+SbFD7FTee0d9vAQFdbtApZXl3YyrzNVKiEL6CXbO0aplEEcmUd4dKjs+jw+PP9uVl4Y/acMQq8W6kC6NqA9+BOZ9K828+P3+51qyyC3BLok7kQGdy6bWeCgHN+1jwKBgG3gJYi9O67aCamI3ILSDxjuuCGEYUhpHl5lS3noxHFHwyrLr1/CAkpRCdx9HMKRj7DN6++qfIF4JnXTmAYcS2PqDC68fsPDs2iUuYnH1mTUvbhJPVXlvsJDD60EEkm9zkHfDI+7/Yzh32pGOFkQXK/udvM+pohsJr6IFo+nW0/rAoGBAOAgMItBWB8GTHd48fduaBUOQdQRql+dP17sqeVDrD0Zr6vGAPd/i0wriDxCIi1/NXB1wTrewIaPyFuwF18xq98uzVpocMqpICdnl31Z/6VBcGh4QKw/+3C1o9m7gO945gdlIqym01c3pyOMHRcImHEQwnWjKGMvdNGGQAueDHwE',
-      jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"4Bzd5DJXjzWFiNyOuOXs6YpRQZPT4Za0APAFU-6-6CHfi6tZ64Ss80ht6pSDEI02FC-mC77BMXpU__SovXiM0bOKdQ8LaYjL0H1Wy5w9YjFgxVf7xS3bTDDzTHB1JfQlSDqiWiqmoHKKJpEnGkMEva2bEucAy-7YoDhjwPvaelPxX78A0Im1bpycSluwYKSbKESWkK3mH1cAIKj8URUuZtjsB2mEpPo8S1V0SgsXP1HPsqerJx-PN4h3FlxdQ5VzLRkIcssx7e7FLPXkIAvmkqexcto1QMgaETVAdno7wAYuzPrObEt4aoP4h_pb4t0AFjEPLFpSSj7nSHeaudu9eQ"},
-      jwkPrvKey: {"alg":"RS1","d":"JZoyULtxnYGpahE3kSZi3bxrbclT36Hdidq7yh1gwqoMS-7wI2gbbKZWaumIJBrNXA2ymn3jBF42LMvsE_5KAlVRgdqIW6isKcsd6QPJ-NO4HORqRecvyFTePZEQ1tFj__52hxJo6rrNGzN3kBx2iyy5vC4uIAlvJ1LOye539dYXPPLazHP6OMCTmn1ZrquPF8omWox1wZRe6IhBMEt1ZL4TkGIWTEVRDep8aSf3-ZebZPWOyrdxJKUCTA7RqTt9elE2er_D6rEjq6Bm-dZOP6N_cdvAKQ7U5MlnQKNOpbdV3HL8NnmaTgGxaFMAKMAAdpKLjAusvlRhIM2ayGikkQ","dp":"69vbDjGrboQwcO6ZVS4kcGrtuiucxG21ECLzGVtg89p7NfkmxQ-xU3ntHfbwEBXW7QKWV5d2Mq8zVSohC-gl2ztGqZRBHJlHeHSo7Po8Pjz_blZeGP2nDEKvFupAujagPfgTmfSvNvPj9_udassgtwS6JO5EBncum1ngoBzftY8","dq":"beAliL07rtoJqYjcgtIPGO64IYRhSGkeXmVLeejEcUfDKsuvX8ICSlEJ3H0cwpGPsM3r76p8gXgmddOYBhxLY-oMLrx-w8OzaJS5icfWZNS9uEk9VeW-wkMPrQQSSb3OQd8Mj7v9jOHfakY4WRBcr-528z6miGwmvogWj6dbT-s","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"4Bzd5DJXjzWFiNyOuOXs6YpRQZPT4Za0APAFU-6-6CHfi6tZ64Ss80ht6pSDEI02FC-mC77BMXpU__SovXiM0bOKdQ8LaYjL0H1Wy5w9YjFgxVf7xS3bTDDzTHB1JfQlSDqiWiqmoHKKJpEnGkMEva2bEucAy-7YoDhjwPvaelPxX78A0Im1bpycSluwYKSbKESWkK3mH1cAIKj8URUuZtjsB2mEpPo8S1V0SgsXP1HPsqerJx-PN4h3FlxdQ5VzLRkIcssx7e7FLPXkIAvmkqexcto1QMgaETVAdno7wAYuzPrObEt4aoP4h_pb4t0AFjEPLFpSSj7nSHeaudu9eQ","p":"_usTgDuv1h4hkYKhFE8fzA0_rscBPLdi540lTSGClSfHS0oo60S6osQOeNZ-ws_461lRnyZp5sA2VAeB4HNzFs6VNki8orhRTZxYT57Vzf5GrefG4llTccPRr0aKkkRt-R6nKxXLO92_coyvrDUGOCpB01fSl8nysetFSN8Dk-c","q":"4RBTaYCr5kggnBOaekN_dbiOriCWZdfXB5tDY16V6WwPepgOnzAcpacLJFdqZ_RuqQPrJTuy3hqckXqqfP-CB608YC4x-la-MSUOA6TBUMgdnONgYlgRJ5zdL-rfAmSjxFpmzmuw7DE538zQH29BYWyn8aR-9Nf-vcOpzve5958","qi":"4CAwi0FYHwZMd3jx925oFQ5B1BGqX50_Xuyp5UOsPRmvq8YA93-LTCuIPEIiLX81cHXBOt7Aho_IW7AXXzGr3y7NWmhwyqkgJ2eXfVn_pUFwaHhArD_7cLWj2buA73jmB2UirKbTVzenI4wdFwiYcRDCdaMoYy900YZAC54MfAQ"},
-      subvectors: [
-        { text: "",
-          signature: 'efzLMPufSRE7oPf2IIchoic43DA3OcCrblzxVogedSRbJYTI0YaFqc7mkz0tusTmCb8Nx+QgGuluVfSXkPAr6u4dt6M/Pbg1qyHctqdB9r/onWZN5nkDVX/F/Gay1woaB/XdWDLiC88Jor7ebBpvwNp78TUozsqSSNwmt1tVb0SGILU6ZgRW5+Wb2uA0BB3Hw7lFAzGnCrgVFxlbI3tIVFcn5qAGSz0LxR1XHYXp6u1qd0LdbzbY/p8V+szQJQPKGgqZqvH02AzgHJH98iN301LdmPzOuFDkasQSrCGuyXx7eHo2vRi3r90Shkk52RmI7jDU8sfvYkWAe9JptfFkUQ==' },
-        { text: "Hello World!",
-          signature: 'wdFeRqSlEjDbsKKOD87bI5E3r1nMqdB/ol/XnV0pT0LovM0RK3TUb1vJONETf3CNnO+6p1JwXyuF084yjIw3UixeohGu7Sthnt2I+RY7uO86EOzR+ZaxccwiNSNbPNTAD9lsXUXn9aLL8hhUtjhyMgsxVeF+0+I6X7bcUZXKLk0JMKA9MSkPmw0kalZ1cJQsGTE47kllXUk3B5KO4QSVtDiGmUY3u5sKZSihOawaT7p1atZVd36kyehyn31oYZP8oFhJ7WF5pjCdGF+n4QUJe7LhZiEYAlTY9qeYMw9xx8ptBhGHtPojfTeX8D7Ho3SD8reBzZUc2uUfz1/sG+22mw==' },
-      ] },
-    { modLen: 3072
-      spkiPubKey: 'MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA3yFwWj1hAK9wNTerJwcoCygHRhuagC9xeeDibeRUCmRlZSUbZ/qhi8nEBmLg5mUZL5xRJV6AuGDqMpOamABo+JmEeLjGsrYsUVRcRlLK4GvVPYucIXNuHsmH7zA8hltx5rfFGuzY4EUYzUI8KAbJ4Z7AbxxxuukoNTItFpgzmUTkwl3dj9Hckv5v5npD7W5hK13rYPUrWPYsyC6ux0O+ozI2z8eSGwWjWq66xmjaUN1ZvGVvVKM5jZ9FpneYGZD+f5Nl+3OU3YE2sDqNnNoaNozJ+YFbcJ9Ck7c3fGQFi24Eq2kGGnSB12DvUy66qXcWmBwNwPV/T8ZrzKvmlEGwJRLGIEDAoKr7j+6Iw6/Bkyj/uHw7kn9ZxheX8ms65mcKRO6OxpF/4DOX0lptdYNpJS5NcrLM4XvuyJYNQC0DbBgn9SVUEk0kFKWFK6zHl8AncxTYraNLXZ1YfzAJRCUYGqr3I4sBTea0upHtncH9KYyHIpXZasYtbCl2/gYF2DrVAgMBAAE=',
-      pkcsPrvKey: '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',
-      jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"3yFwWj1hAK9wNTerJwcoCygHRhuagC9xeeDibeRUCmRlZSUbZ_qhi8nEBmLg5mUZL5xRJV6AuGDqMpOamABo-JmEeLjGsrYsUVRcRlLK4GvVPYucIXNuHsmH7zA8hltx5rfFGuzY4EUYzUI8KAbJ4Z7AbxxxuukoNTItFpgzmUTkwl3dj9Hckv5v5npD7W5hK13rYPUrWPYsyC6ux0O-ozI2z8eSGwWjWq66xmjaUN1ZvGVvVKM5jZ9FpneYGZD-f5Nl-3OU3YE2sDqNnNoaNozJ-YFbcJ9Ck7c3fGQFi24Eq2kGGnSB12DvUy66qXcWmBwNwPV_T8ZrzKvmlEGwJRLGIEDAoKr7j-6Iw6_Bkyj_uHw7kn9ZxheX8ms65mcKRO6OxpF_4DOX0lptdYNpJS5NcrLM4XvuyJYNQC0DbBgn9SVUEk0kFKWFK6zHl8AncxTYraNLXZ1YfzAJRCUYGqr3I4sBTea0upHtncH9KYyHIpXZasYtbCl2_gYF2DrV"},
-      jwkPrvKey: {"alg":"RS1","d":"Bq4PmQQBZW3bJBy4iQCT2FGodhbZd0D0Wru6y6NsSKtcxbxop6I_N9ogfjhzlzIroNtDKqU7oUl1eXIlzKsmeVrPNnYBrNP7W6v03z4XSMSxq5gEYpP8Ffvej_CXv0X5kPirc_TnQT-QUITNHD2nyZNhG3J0jS3xwDXyV5zS3qHLX25D9cxImDX5z6KVagRF8HBtXYe5dn5YNN4A6YJDsMsODQZif2CZ1VspyErXTlhyGUvIG3aPgIfmI-esrAdFKOkRC6RdLs9CoAWpvzES5tcAo_McD8OyLRHDsQeW1ciZw9X338g3uFUMoEfPaojFrTZuI9DNd7fRYrDuvE6HuAlOcGr4ImYurhPXkqdgX_uGqTV4nnLcC_D1Z5w51c0lAzi45DLzJedTZeollx0bh6TF-CXcaeFYwKlWJpkcvz9rNLbYwbB97YHm6w5RGypvS1TksGjL41DJdHQG1h6ZJU5h4bCaKQTfV7iNinI4qqouU0viSm0Ru07FcVzw2TMB","dp":"4dmPzev30X5J8tkraCANk1n1_xUuBarhLjX1xixNBE2hGt9GruJA7Cv7McXvmOvHwiHl9D2eVoDgKPRPh3WqCoz2mLGakujelM5Gt3ncPlimieySf3ErN8NuiuyWTaZ8R2ihEZizn4l7a93FkI-xsqHDy07DMQ3of6ibFL6hFbrm-bj-DW_6C6YyQqaGaXx-IvKLkI2pzaK9kxJBV-1g46hfo9ipbgNN_gDrJ8fk7Chwg_KRkpHDbpyceZ49f7Mh","dq":"1XQxV0b4sH-VvuU-a4CEKXQnUkYlp1kAhWOI4FjqWd2obGbfj2FTUJWFrChtmvjys36RD-CCOHKh_sXdvMVYaAldm6aCx46v8Ibvb8jblwCb1eknKwmiKBEOtwzMJvJxZbR_T2iSVb1GvYeOym7ZUhJDdGF8BHulmvCk90w2BOWOucgyWeDNMNYX7wbIo0bSdA4sb8k_cTVOF_Ywx8jF_rYDdZG6Sqw3VUdTuNfHfQwXUE5AGi4Bo2LnZ1T0nERt","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"3yFwWj1hAK9wNTerJwcoCygHRhuagC9xeeDibeRUCmRlZSUbZ_qhi8nEBmLg5mUZL5xRJV6AuGDqMpOamABo-JmEeLjGsrYsUVRcRlLK4GvVPYucIXNuHsmH7zA8hltx5rfFGuzY4EUYzUI8KAbJ4Z7AbxxxuukoNTItFpgzmUTkwl3dj9Hckv5v5npD7W5hK13rYPUrWPYsyC6ux0O-ozI2z8eSGwWjWq66xmjaUN1ZvGVvVKM5jZ9FpneYGZD-f5Nl-3OU3YE2sDqNnNoaNozJ-YFbcJ9Ck7c3fGQFi24Eq2kGGnSB12DvUy66qXcWmBwNwPV_T8ZrzKvmlEGwJRLGIEDAoKr7j-6Iw6_Bkyj_uHw7kn9ZxheX8ms65mcKRO6OxpF_4DOX0lptdYNpJS5NcrLM4XvuyJYNQC0DbBgn9SVUEk0kFKWFK6zHl8AncxTYraNLXZ1YfzAJRCUYGqr3I4sBTea0upHtncH9KYyHIpXZasYtbCl2_gYF2DrV","p":"8KXTeK4RQyPFayq98J9zKvJzFlFslLmTf3QJMMa622nWFubQKDGDCb0tti1IBVdx6bTKa-fSCLIRIW-zd0EMPeDdHaOsMYss3txMqDPK15f3lill9a9S9ZF4yELmGZ305R7fW3ydciroPnhdynBLmAthiz8N3QBG6ZuyH7bWYEUcZHlAC2EfAIvWu1t3mUpwJn6DoLE_9v7TwGsrDtdLKw3ccrFex1PN8YDAfjVaY5893QJkJ2M6szaMmP6V2l5h","q":"7V2HdUddFsjFIYiqPoUDb4_4CQ8NBB3MNOPU8a19ImPAZhfHElj7E_99EZjX2RLULXngItOTosTg_vYTovhJRtU1PvjddE1VkrthnuIgDDctnb1T7UF6k1QaZKkOVnGOaT2IrR_uD8QlG6QEiyWPOyfuIe3NJJy3AWmt2-z_VN79dL4nRJssOOrqErvDJOFuhbZtaSGACNjfZZbFZep4qLHTcJde_Kc1hHLe92SQY_T8W3gcfzq9cBNv_NtO1Oj1","qi":"rB6PdO61kGpTE0MRtUIKJl2jflj53dX3xMCYgX5CLKJs9YexKYCT490t-m5fYai6Oud-kuQN12W-JM_t42oIu035S4xg0hmrtZVEqsmrZYOR-zDtu3QY437UMgLBYRM2XZQLpLB9RbapmU7Nte9F1OPKtiYJqfFIrTGe75w5TGplV0_K_5PJ5Na_dNyzZxl7Z8PoH-uGl6QWLifeYwQ9n29PEAF5CACJ4Bb9_cMoJ-70i-fENvQuX1LW5KsCPsAC"},
-      subvectors: [
-        { text: "",
-          signature: 'QXiVBWA9y8joOzA/erxr3yThLMQITfFdUrhx3Wp/P804b1YoROrc3WFnSvywwmP41p+f9Ov2NfE0rL2Ar4NGBkf2dST7N1hOAHpyiw0GaQb+jVjNHG3v7C5bIUZ4Q11yi39sm7Zg5jZDKkB/CH/g3Nrj0XrkJc86ivtqgg2WXQKL5T39AoFYqtaSwOVv0sEIexw3iXGPNsqKXWQEvsuEdJsw5ZP20OhGQ+RZnJ6zPadx6FNqyMrn24J++DaAPCgz7fCPjIYMSV3jIfNWm68m9N6F162syAFavt6bdedDFgU5GR5hfpE2HGwC773tCHeClDMYxQp1ZZp2lKcPD7KtENJ8o+C40UTv/pKngeJz3iInL9R3hIfzVHC3KI0BW8eVRuawfNGh4tvnSw/DpdipykmhFQ5xmxVw7qZ5q0v7Rf+Sl2/k2DuALc0Y9jBITsNOoJWQOmJoX0mXllS01VSXVxGNMguJWumBlNcEfqYO6qb8Y1RbWWLZsunrVFBO5JXm' },
-        { text: "Hello World!",
-          signature: 'w5FLdI5bY7tjgrdqU/q4r585wenx76hGqmpqTfmiMKojIuS6spDQDOdV4JuJhBBCEq8Riscw4Jd3ngOagwW8lvvmkRcVyu7jv/DI6yV+/EtxN2r0nQT969dixPHkGQmCvFWenFTdZ5scey5studbJ+qur9OLrE/Hh1t2aHeECOhm/shIGVepn026ly2P1eAxnxDz6F1Gcs8epgsJQ2/9ql9rWWOrjCXXPhhoyKWtvMpDInIESpSu1W0llWJl7TtHBJZsuJotalZ82S2ijc/l5figEPmoM9q1WNEpK1sJFN7NPpp8WFMT60bo0yc2LLHt5D+wy4TklYmXA7uEa8wHm1HxblLEv4YswDRa2NYlmXImGFJ68nhYqKJlNfZEjMgHTY/2xG+ZOaM5SRLq2tfHNXrdt11wLJLU4OOGIsB5FUL84PyV3WfQ2WBsyVc1nHtjfKe1BgBN3mDYec4G/z0YKproIE3/r1Vw6p360Rvn5IJsNd6QoLxp83o9GGzmlpTN' },
-      ] },
-    { modLen: 4096,
-      spkiPubKey: 'MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAr8JV9r7hQgofgxHGFpL/CUhz1QCynLR1aKqwcpEbtVs5eXfZTVSeE/ASc1qhmFbIQ9MGCui77lntDKuWwaAxRwP5bXVHVvGl1swbsM1YSzSm4rwud9wmeKizoMcvLO4nTMSwmJEFN0rQvmpnnFf+eXM0HEzEr9+qZqPbv9k8r7TCLUJZXo/52ntRavEAYcGA4UCcnrSPQeyCkmNLNYGR7bfRjBy/Ok4SwGSW81gKmzt9Y68Ptsp+xkLKslUffQe3QaMTe5E31ycSJyS2ywJv8TP80nuQtQrsgj5NmU7GHufTFd6KAnY3xBozXhUBWYUqjXvrSBdFYi5iVu4SsY31wivha1wGX/uOlm4lV7lBVbKyh8Tuvq5sid7snRk5y7ERTlywtJR85o++qevDi/2FNxOibnJoFHAWlxKVtn8yshZFc4Kmy5R84tFptoFeda+zCSYlwtHQBuYOoTm6F+ESMDRK3JuEr07cMZ7QD+VR4LRDEGJCqrtDccB11JOQu32Ds06odB8fsY9ikCbaQW91nvQcQ1CfiFTG7vYRiLM/4rkClBvmKfG0apluctQ1FZZgKV8LQF3FG1644GJlcuwWXUA5j8fdtvgLlKybpuNKN9E9THZgsFRSx/uvWoBL7GdyY82FXKDqVcKFlv6N9MH1GKsAb6jRj5yybjM80LHtKZECAwEAAQ==',
-      pkcsPrvKey: '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',
-      jwkPubKey: {"alg":"RS1","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"r8JV9r7hQgofgxHGFpL_CUhz1QCynLR1aKqwcpEbtVs5eXfZTVSeE_ASc1qhmFbIQ9MGCui77lntDKuWwaAxRwP5bXVHVvGl1swbsM1YSzSm4rwud9wmeKizoMcvLO4nTMSwmJEFN0rQvmpnnFf-eXM0HEzEr9-qZqPbv9k8r7TCLUJZXo_52ntRavEAYcGA4UCcnrSPQeyCkmNLNYGR7bfRjBy_Ok4SwGSW81gKmzt9Y68Ptsp-xkLKslUffQe3QaMTe5E31ycSJyS2ywJv8TP80nuQtQrsgj5NmU7GHufTFd6KAnY3xBozXhUBWYUqjXvrSBdFYi5iVu4SsY31wivha1wGX_uOlm4lV7lBVbKyh8Tuvq5sid7snRk5y7ERTlywtJR85o--qevDi_2FNxOibnJoFHAWlxKVtn8yshZFc4Kmy5R84tFptoFeda-zCSYlwtHQBuYOoTm6F-ESMDRK3JuEr07cMZ7QD-VR4LRDEGJCqrtDccB11JOQu32Ds06odB8fsY9ikCbaQW91nvQcQ1CfiFTG7vYRiLM_4rkClBvmKfG0apluctQ1FZZgKV8LQF3FG1644GJlcuwWXUA5j8fdtvgLlKybpuNKN9E9THZgsFRSx_uvWoBL7GdyY82FXKDqVcKFlv6N9MH1GKsAb6jRj5yybjM80LHtKZE"},
-      jwkPrvKey: {"alg":"RS1","d":"qDWzlB0G9O8_TW-7R2uTzkybHyY1yyginfOOP3eFL0KJdSkwvYPYbnh7EA-TTHrx24eg5tvq0Kkb595owBMSVkcFdq6hgiJvd22Mqt88O22-so0rY-c8oonCsIMxMS0US7KK2NkiRtLBiRvI4aaNk6qgGt2V-ER1jxoPfELqg7bZh_tSEOB2XZVcTJ8uoGBTekEeI_3mhU9Xf8ar-h9xjDM6x3_TvHdwFtWuamK-c-axkK_AuE6AmjreR2KUalLyHk12nfJToQRxqSjIEO7aN9xrgP5ldf9obxY1qh3sGzP_n5SGPOjrYjE5LDeqPQTnvtT0TuCGtPpzf4MGPQwCQSa8LJtZsPprrwkxFDzaBaK7QkaEw4-8V-gy4ODSdXHj_h3Ok8DzoLPBqzJHeYHYgmyrEF_3cprk_QOTj0jkGYVd1UILEDwg3rmAxEC4RIzdpb6g1A4K14LcC4nGpLAIR4PypTy4eo1GKUv4BS5kz8Pv1xX2vH3CfgGwwkv4yd6t5amg26OU2y4bBuI3ZTWELU3Zc4r1IsXhsKvbjbJ2e3-el7S7NMUQB1iAbr4zHsMSLb-S4_5DCvUn7beooIcgfg7q_pCi31VI9q-n6NAJy0chbPvjqKamfXPb0T9GX2J4NVUJS6TnqnKVMsyeThPle87jwjzGD7K9SEfL3bPQ1Gk","dp":"jlhFpwTfo6iZaKv4Holu78DhvzWvNE3tdAgwohy3RSxm1EZ3JzMMLNJ9s_oiEK702k2egNM5mwhR7OKE1ozrsXw7HZNYT4t-kuWewZebZ5KcoqtHQ0O5YEvFoyvZWvRZNZpuIusYmvSt-LEcEzfw9e3bdOLAbTtgOOO-C5ZjV03CF9tZEK1e2YBQsnZhBxX-qkTAZ8V8cMR-xLCSVNohx1o98yc70d-WpHDg_k8Kh27XmrJM7HAkcNX8LMoyjzoYDCPqPi5B-EhtxE7b96O_V7GCewbFAev5rJtRD8UiQpOowEXN-tfbjznv8npYRu1oxvw7EExVjUJPWZBKsGgLsQ","dq":"s2Mc53YhS1jlfwZRRPlcP3q2qVIFqR7Bp4s2sGaZoRW4i5shRo4Ny6UzK4l5j52EHOZFWN-98c7G4757MNYSn621EQ2BuNktufcLlXzcJLwLbB78voJjg3n86dV974YOeA0wnAMqdD-YgdSBroj0baJ7f3VIlIjFYnmoM8eKr3bDKyOd0NwumgwepvjFXC-l5_TA-C7inBMezuGqQKndxGMqf3IxpJWPuZJ9VdS30vPiQ9vl34UsGyuuxGMIvA9yc8-JtsHYfuIH3FMiYa0VxbfbhxsJcr2mLAMsoU2ef6A2I2PBQetx3XMo030QFa8o8PeE_KaLBHKbNLo9Q6qeHw","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"r8JV9r7hQgofgxHGFpL_CUhz1QCynLR1aKqwcpEbtVs5eXfZTVSeE_ASc1qhmFbIQ9MGCui77lntDKuWwaAxRwP5bXVHVvGl1swbsM1YSzSm4rwud9wmeKizoMcvLO4nTMSwmJEFN0rQvmpnnFf-eXM0HEzEr9-qZqPbv9k8r7TCLUJZXo_52ntRavEAYcGA4UCcnrSPQeyCkmNLNYGR7bfRjBy_Ok4SwGSW81gKmzt9Y68Ptsp-xkLKslUffQe3QaMTe5E31ycSJyS2ywJv8TP80nuQtQrsgj5NmU7GHufTFd6KAnY3xBozXhUBWYUqjXvrSBdFYi5iVu4SsY31wivha1wGX_uOlm4lV7lBVbKyh8Tuvq5sid7snRk5y7ERTlywtJR85o--qevDi_2FNxOibnJoFHAWlxKVtn8yshZFc4Kmy5R84tFptoFeda-zCSYlwtHQBuYOoTm6F-ESMDRK3JuEr07cMZ7QD-VR4LRDEGJCqrtDccB11JOQu32Ds06odB8fsY9ikCbaQW91nvQcQ1CfiFTG7vYRiLM_4rkClBvmKfG0apluctQ1FZZgKV8LQF3FG1644GJlcuwWXUA5j8fdtvgLlKybpuNKN9E9THZgsFRSx_uvWoBL7GdyY82FXKDqVcKFlv6N9MH1GKsAb6jRj5yybjM80LHtKZE","p":"3uwbNKyAd9plmuzFlQdf1HFzJ3D9kLHz-RXOcFkHTbBNhgcE7bXUP2qz1221lLtfV0X8278rsR9A4EQJKHu7R6VxKHaQ-Zy9e2ainpnxm16G6II9ESWdEeTskJMv8_JroPuRxeq7q1GizdT2e74ORvRP4qApNOCdUOuihbqAAqZBH4zNnhA-rxlEF1aYL1Frt2U45RIVkkjRg-L5If2xBYF55CLvqUCBOUF29z1498lgz4_g3fgs1YkoZEQef2quwBwhSpYMRlcM8umi9S7Hi6DTsGJFDqOG-jTwEJRMMj9leYG6BWtDudrmL-zhtut-JIoFQ6FKM4gtMcTPT1jM6w","q":"ydayRE3U0gqhiUnFzBsPu9Gq8Bajknn-Pkg0DbfivreSaQO3vBoXOOYM9_2YqLJQ2oieHQ5lwLkNqGUDAfPbwdHmIAipZYacSz9BoA60TUQp9wSs_yyfkSmr4uFIJA6itMkaoFKV5Vk1zm_RP_Ae1GRD9NcGXh9B5p5dyde-PstfKojbqwIM1apX0YPgLxEgxbhEg7qEb8h-e0Qx0LNh7YS2lTvDvzaMdDuuKkNmwEQGB2brFw6IanckNho-WDXBCGqhmXYAB5IVGRHKO_SNhCUnFLLqzTO_S1DHqV_H8R8TmIxYrrLVrwnVP19C6xbcjeSFk25GgFomeLi1GmRUcw","qi":"ehgMMBDFy5JTubQOVRbI5RzE0r67h2LNuApM-zzn4SSGBKNoW1fUBV8Xec3Ry-VPrQolskS1bNQd2Ka6sGkhKxX6RqxzTi-hBksQCtet6MnXoeylu5h6lcBP6sQb-W3T74G-1ZB1O40p3J8DNxureoy86apQ6zPToUDbuexe8dzLbfxsFDqvAbaUmugBAB3p-D1XrWdtv91AwCmkbxY0hWUAUaSgs11xhs7By_WI-5-sbyMSsr4hRUzV8MKzrQhBo8x7bUherqQKc4Rz2iPxpv2xb-FQSyNYf_vd0XFWItc-7hxL4CR2ZYvXUch67ZzcUX2heLP0TJSXlJ7AP_hMew"},
-      subvectors: [
-        { text: "",
-          signature: 'dZydTzAOuKXomQ5clUywEQteb3LyzawW0jOkG8G+/N2+ES4Ltd8Y3mZ99NabQd0GBOXoO8n6SV+uVF8cd5jHgrHtqgDlA+5uZs+7pKPx0jdyRRhjbux3nlpMrXD6pqKGiTVGIHbj6hMJw3wWhNLSi1WXKnjyYEMh8dlNYqHArf41PDs44FuoF8HwkGK5e2wMH+Gf+0hV7nD8DF9M5U5lbntrhxWbPBe7mvIuZMLeqiywJMRyYIMvsSTrD/r06SEKfp4JLsnzud8M+gE4Hq8urkuNhf81j+pcCDCtCxp/eN8dzqsjweyab+jDL/4KLoi5ghOYkwc5MP5dxNiCmu/MHpSOkKicABn4svJEsHYCeeT8INng1ssJxVHbkR3ov7PodwBi7yMZcCxkq/KDXPKWo8vSWekLsXX6F96KPNTolb/Gr8+udmZsNkKv4Toi5bffjq6S597y/zBS7Sk2X51ZqhyDxpkdO76Vaxd0yBNQTFfi64u0WlS+kycM+ALKDYG5lAMVLdwdaIZsUDo3TSghsrKLW6bubQCgCkoLalJRKDNgzypKMQ0EhMDfEqASLldEsxTY1k27ZjVEeQYLZ00OrQeNedC6IqrcM5i19R0Gm/tbIFKwbQx7IX8W353TQqUAHY1T3wvEB8wY6EihgBWJU43rcK+216K/Ua2I+21r9qI=' },
-        { text: "Hello World!",
-          signature: 'Gqn6cx+XvLLOISfCYECHLDGhXsgUQ4flKx25ocGag12ZXDDCTHSu0hD8VBDXkiSflxgiYuTYzo2Ehb2sdfeg/auCdzIfedvGA2pnH51OrtVYlhFkuMOWtdqYOsr7yVVgKCJAN+jEZty8chxFUkZK4+ZolflkSz0oDoTx1PufDHabcE+iA4gBTyit49bGDEgbaAJdZZbth3qV3jSnoiVUp7MM2bpZrunva4XpEvhBrnsBxSJBisitVEa1UNYNl3GzgQpgGi+MvEglRIjFos31afVMNqQinmKQwwX2fnRNeQR6JamdS1cFXQ2K577oI3fKIjjSJfbsPP4dZP1v1JiqENpGjBFkTHQa4x+uisNZeJftSekdHSRI6XjfyVto9hPFVNILZ9uKfLNfbZqPKpTjublWAKTF+Ef/R4VGfRSyAso1mcrrOWO2mTKr40DVNHUts5aAngv0DP7Ig7YQphUaRDaMCrpoKI+R38xcfid8joaDJsYD7g5KfsEB4dvU6wwwl2+YcuO6r4bq5LWSH7APB02i9tPqOtWdQmEmTsncsf9Iu3XiaSQbCYLo3l27pBQY1cvv2KhJwxW/1mCoUGt39HqgaLAuWQ8a28Ku4SxIDuteWvS3koj1Nm8d25b5AgTpsXC69Fff+SY9Z0OSCKGv5OfUqjAavi3gF+zHFmsuLzA=' },
-      ] },
-];
-
-*/
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/rsassa-pkcs1_sha-256.js
+++ /dev/null
@@ -1,337 +0,0 @@
-describe( 'RSASSA-PKCS1-v1.5_SHA-256', function () {
-    var alg = { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-256' },
-        pubUse = 'verify',
-        prvUse = 'sign',
-        jwkAlg = 'RS256';
-
-    function skipModLen ( modLen ) {
-        return modLen > 2048;
-    }
-
-    describe( "generateKey", function () {
-        [ 1024, 2048, 3072, 4096 ].forEach( function ( modLen ) {
-            (skipModLen(modLen) ? xdescribe : describe)( modLen + " bits", function ( done ) {
-                var keyAlg = extend( normalizeAlg(alg), { modulusLength: modLen, publicExponent: x2b('10001') } );
-
-                var generateKeyComplete = new Promise( function ( res, rej ) {
-                        skipModLen(modLen) ? rej( new Error("Skipping large RSA moduli") )
-                                           : res( crypto.subtle.generateKey( keyAlg, true, [ prvUse, pubUse ] ) );
-                    });
-
-                var vectors = [
-                    { text: "" },
-                    { text: "Hello World!" },
-                ];
-
-                it( "generateKey", function ( done ) {
-                    generateKeyComplete
-                        .then( function ( keyPair ) {
-                            expect(keyPair).toBeDefined();
-
-                            expect(keyPair.publicKey).toEqual(jasmine.any(CryptoKey));
-                            expect(keyPair.publicKey.type).toBe('public');
-                            expect(keyPair.publicKey.algorithm).toEqual(keyAlg);
-                            expect(keyPair.publicKey.extractable).toBe(true);
-                            expect(keyPair.publicKey.usages).toEqual([pubUse]);
-
-                            expect(keyPair.privateKey).toEqual(jasmine.any(CryptoKey));
-                            expect(keyPair.privateKey.type).toBe('private');
-                            expect(keyPair.privateKey.algorithm).toEqual(keyAlg);
-                            expect(keyPair.privateKey.extractable).toBe(true);
-                            expect(keyPair.privateKey.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                }, 30000 );
-
-                describe( "exportKey", function () {
-                    it( "spki", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'spki', keyPair.publicKey );
-                            })
-                            .then( function ( spkiData ) {
-                                expect(spkiData).toEqual(jasmine.any(ArrayBuffer));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "pkcs8", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'pkcs8', keyPair.privateKey );
-                            })
-                            .then( function ( pkcs8Data ) {
-                                expect(pkcs8Data).toEqual(jasmine.any(ArrayBuffer));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "jwk publicKey", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'jwk', keyPair.publicKey );
-                            })
-                            .then( function ( jwkPubKey ) {
-                                expect(jwkPubKey).toEqual(jasmine.objectContaining( { 'kty': 'RSA', 'alg': jwkAlg, 'ext': true, 'key_ops': [pubUse] } ));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-
-                    it( "jwk privateKey", function ( done ) {
-                        generateKeyComplete
-                            .then( function ( keyPair ) {
-                                return crypto.subtle.exportKey( 'jwk', keyPair.privateKey );
-                            })
-                            .then( function ( jwkPrvKey ) {
-                                expect(jwkPrvKey).toEqual(jasmine.objectContaining( { 'kty': 'RSA', 'alg': jwkAlg, 'ext': true, 'key_ops': [prvUse] } ));
-                            })
-                            .catch(fail)
-                            .then(done);
-                    }, 30000 );
-                });
-
-                describe( "sign", function () {
-                    vectors.forEach( function ( v ) {
-                        it( "'" + v.text + "' as ArrayBuffer", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.sign( alg, keyPair.privateKey, s2b(v.text).buffer );
-                                })
-                                .then( function ( signature ) {
-                                    expect(signature).toEqual( jasmine.any(ArrayBuffer) );
-                                    expect(signature.byteLength).toBe(modLen>>3);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-
-                        it( "'" + v.text + "' as Uint8Array", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.sign( alg, keyPair.privateKey, s2b(v.text) );
-                                })
-                                .then( function ( signature ) {
-                                    expect(signature).toEqual( jasmine.any(ArrayBuffer) );
-                                    expect(signature.byteLength).toBe(modLen>>3);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-                    });
-                });
-
-                describe( "verify", function () {
-                    vectors.forEach( function ( v ) {
-                        it( "'" + v.text + "'", function ( done ) {
-                            generateKeyComplete
-                                .then( function ( keyPair ) {
-                                    return crypto.subtle.sign( alg, keyPair.privateKey, s2b(v.text) )
-                                        .then( function ( signature ) {
-                                            return crypto.subtle.verify( alg, keyPair.publicKey, signature, s2b(v.text) );
-                                        });
-                                })
-                                .then( function ( valid ) {
-                                    expect(valid).toBe(true);
-                                })
-                                .catch(fail)
-                                .then(done);
-                        });
-                    });
-                });
-            });
-        });
-    });
-
-    describe( "importKey", function () {
-        var vectors = [
-            { modLen: 1024,
-              spkiPubKey: "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDLByONu1gLtN2X0I3b9DDZjxCAS7cP9gh89oosQV0A1ZLd8Ec7K906E12l9I8RGrTgy9Xdj0+UwUAsN+sjlSg6oOydpt98jPJdLMvfftK813kdwgHhK90reGV6og5xtGvvnc3qKv/8b/ETSCyrExZYod0ap//0Z+QEanex72jGEwIDAQAB",
-              pkcsPrvKey: "MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAMsHI427WAu03ZfQjdv0MNmPEIBLtw/2CHz2iixBXQDVkt3wRzsr3ToTXaX0jxEatODL1d2PT5TBQCw36yOVKDqg7J2m33yM8l0sy99+0rzXeR3CAeEr3St4ZXqiDnG0a++dzeoq//xv8RNILKsTFlih3Rqn//Rn5ARqd7HvaMYTAgMBAAECgYEAwlEJ2Uw2n7Wy5Oup6pwT6RZBf9l302Hyi8/XPTYuEm9XSu3+7wYzjbMdTYn9KCy8c+8DuTPBwikYB3pZpkvLHGRPLGDBHdzW6tGrCZDihfR/o0QJoa/V3fU+llH3xJwqek7Yem3IXVefHYRf+vMy5TVU/9etb9s2uNePeePPvKkCQQD2fhOOJ61bmTrzztVmveaaChsDfRg8P5yP8YJc68ET42NLbh1taSIy4A0tRMUVGRUCkpIgbNsHna0xGjc8qkAvAkEA0tviDZgsMIp9hez9o2NnFu2cGLliy5h9dsxyN54r75aEOis6MjODUam5s3aND0plJjTBN1fXJ3oYdej48r2bXQJBANQSGr8GcgdJ6UeUX1Qa9Ej5gs5YlT5YuFm7vp41k5OJ4ocmQRk+B9dfntagwTNqtgHVmvVc0oFV7ok9deKy068CQGuMUYFjk25yxNFRbpEuuz8blJmbvQNhVOUKJFuv5nL+j5TnxXgjhCBb9GbP2eTpqivRjpd+yzPMd7t0R73v7dUCQQC6JjHf49JKmINQe0H9Nx7toeDyvJAfLKPrm1hwWspWJIzyINQXeZWwrXMQ79O4Rbl0CYwh8AoRN81KPVr4JUGL",
-              jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"ywcjjbtYC7Tdl9CN2_Qw2Y8QgEu3D_YIfPaKLEFdANWS3fBHOyvdOhNdpfSPERq04MvV3Y9PlMFALDfrI5UoOqDsnabffIzyXSzL337SvNd5HcIB4SvdK3hleqIOcbRr753N6ir__G_xE0gsqxMWWKHdGqf_9GfkBGp3se9oxhM"},
-              jwkPrvKey: {"alg":"RS256","d":"wlEJ2Uw2n7Wy5Oup6pwT6RZBf9l302Hyi8_XPTYuEm9XSu3-7wYzjbMdTYn9KCy8c-8DuTPBwikYB3pZpkvLHGRPLGDBHdzW6tGrCZDihfR_o0QJoa_V3fU-llH3xJwqek7Yem3IXVefHYRf-vMy5TVU_9etb9s2uNePeePPvKk","dp":"1BIavwZyB0npR5RfVBr0SPmCzliVPli4Wbu-njWTk4nihyZBGT4H11-e1qDBM2q2AdWa9VzSgVXuiT114rLTrw","dq":"a4xRgWOTbnLE0VFukS67PxuUmZu9A2FU5QokW6_mcv6PlOfFeCOEIFv0Zs_Z5OmqK9GOl37LM8x3u3RHve_t1Q","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"ywcjjbtYC7Tdl9CN2_Qw2Y8QgEu3D_YIfPaKLEFdANWS3fBHOyvdOhNdpfSPERq04MvV3Y9PlMFALDfrI5UoOqDsnabffIzyXSzL337SvNd5HcIB4SvdK3hleqIOcbRr753N6ir__G_xE0gsqxMWWKHdGqf_9GfkBGp3se9oxhM","p":"9n4TjietW5k6887VZr3mmgobA30YPD-cj_GCXOvBE-NjS24dbWkiMuANLUTFFRkVApKSIGzbB52tMRo3PKpALw","q":"0tviDZgsMIp9hez9o2NnFu2cGLliy5h9dsxyN54r75aEOis6MjODUam5s3aND0plJjTBN1fXJ3oYdej48r2bXQ","qi":"uiYx3-PSSpiDUHtB_Tce7aHg8ryQHyyj65tYcFrKViSM8iDUF3mVsK1zEO_TuEW5dAmMIfAKETfNSj1a-CVBiw"} },
-            { modLen: 2048,
-              spkiPubKey: "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu5vPT6lEwGjoybfS2Soe9LhkpeXUq0jfmSoUXvjCqFgclo2QLRs4SK4pfluZl6HFFt+Yp/OiM7hDXAeAgz7Aze5yRjYPu63uIo4drSQmSiUe8rg9LNIQd83n+XJw0X/UNa2SGWGeFA+nuMAp4EpLCzc9T5/y3sBJHhGfV/aYg0O9hRgJyqRm5dMu3GmQpn0CY7keConQkcPW4osAIeoAIgRnJZKObDyIt5dRGQ5i8hitBVlMcV9jBeFf9/8LruA26g1mKvp9fQrhzt+1zhC3se46nqDhC2aF7gaos0pYVidqQvjQcsfvIcbPBNJvE3kIPsxc8YP22zPxQT95wS5JUQIDAQAB",
-              pkcsPrvKey: "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC7m89PqUTAaOjJt9LZKh70uGSl5dSrSN+ZKhRe+MKoWByWjZAtGzhIril+W5mXocUW35in86IzuENcB4CDPsDN7nJGNg+7re4ijh2tJCZKJR7yuD0s0hB3zef5cnDRf9Q1rZIZYZ4UD6e4wCngSksLNz1Pn/LewEkeEZ9X9piDQ72FGAnKpGbl0y7caZCmfQJjuR4KidCRw9biiwAh6gAiBGclko5sPIi3l1EZDmLyGK0FWUxxX2MF4V/3/wuu4DbqDWYq+n19CuHO37XOELex7jqeoOELZoXuBqizSlhWJ2pC+NByx+8hxs8E0m8TeQg+zFzxg/bbM/FBP3nBLklRAgMBAAECggEAXUgpmkhlwO3o4XOfSQ9iePe+Q6a1Sb1gQD3mBxrVXvMAs/MLfwILyEegpg1Rn012O9tNgiTnv6OdCoNIaPmo0DwBYdu7kuv2fgP/yXkx+KfgbXsiH8kLGyascyFt6x0OHOqCvFAHU549HOWfbMBD8/2xZIf5MLyXHnZQrmIUjx8jgOG96lATc6MOSdAHKLuwuxQcJVF+pdzVyRXoDU5PG7W8+1TrNiWXajekuuziUsjNwCJ+SYkmo46D+Wx3/pTsrCIOIOYbGHezqx7voDPjceX+wiPGJZr1UBFRqunqWWUfdC+ZdoxMrk7I//GvifkhM7LWMb/sGLqvnaj1w/YpYQKBgQDfasogbe5MPS/98Eu0wCCzM06q4vHzUpaSWwwC2aKU9qSVPMDD/5qRnGczxhjrYa1ne3M9SriMuS1iqtuwFkP0l3aKDPrj7lmWcjxZxYZebydcrYYuQlsDrffHsmdQGVxiXFzPuVDD2bO5JdRXJzQ5OPmRxjDV1ZeCExF7iEph9QKBgQDW+B7Qza7ArUTCzc4gloEQhcYjEt8eoW4BSAlfxeVO1w48hkXeYuJ/vdlH9nKzIcez5O8DCV5S2GBHNloSjqhE5CBXEutg0N3KW5Cf5sNK7tSgMQiIYf7GTsaKra2Nq+YQpGvI3b87SZ5ZRV5Ju8aFGxDruG+JuS4xviGFo5fEbQKBgAG2GbJB5U9kMJfrXUkXJ6j3vaSFdID+ovSgCemDrUEi2oPiIT/fF1oCLrAw1kQHTYK7aViQ1/UL/hMBaAljQkX/WwMXslxImRsT6O5vGuZiR5ToJ1z3WScgEAPRlAUDDLgcKQHWU44MftnuNkAsprPBgffh4sHgjvaKGtotYxR5AoGAYkdpfziprjkI+K6ykD9+nhkqrppQG2beLgPLFVgaL+MuBQm2I6e9uX0IO1g2tCK7dEkz5IWB9AosaiI1J8rEr0pEZsqlhcu3um4GPrR3kGiEGQCR0BhNLEiTiI9Ci0SNmAozpM+MQAS2OkX2h2srpWrsX3ggtixNLDyqgrh6CDkCgYAnoURdEOlehr7rFYMcc0dBAXudHaYJco4PYI/c9cCbnwRaXodJJbVsECHiIiuxJEgxsdQbxEAkAWGOQ6rZlc/+UYtLsGW3wo24H5SnRcwCDIkyq7evmOcYnkRkzd4Z7Mot49Q5/N6Im4vruvsxpajqxdOCsR7Nxtckiut+qk32Kg==",
-              jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"u5vPT6lEwGjoybfS2Soe9LhkpeXUq0jfmSoUXvjCqFgclo2QLRs4SK4pfluZl6HFFt-Yp_OiM7hDXAeAgz7Aze5yRjYPu63uIo4drSQmSiUe8rg9LNIQd83n-XJw0X_UNa2SGWGeFA-nuMAp4EpLCzc9T5_y3sBJHhGfV_aYg0O9hRgJyqRm5dMu3GmQpn0CY7keConQkcPW4osAIeoAIgRnJZKObDyIt5dRGQ5i8hitBVlMcV9jBeFf9_8LruA26g1mKvp9fQrhzt-1zhC3se46nqDhC2aF7gaos0pYVidqQvjQcsfvIcbPBNJvE3kIPsxc8YP22zPxQT95wS5JUQ"},
-              jwkPrvKey: {"alg":"RS256","d":"XUgpmkhlwO3o4XOfSQ9iePe-Q6a1Sb1gQD3mBxrVXvMAs_MLfwILyEegpg1Rn012O9tNgiTnv6OdCoNIaPmo0DwBYdu7kuv2fgP_yXkx-KfgbXsiH8kLGyascyFt6x0OHOqCvFAHU549HOWfbMBD8_2xZIf5MLyXHnZQrmIUjx8jgOG96lATc6MOSdAHKLuwuxQcJVF-pdzVyRXoDU5PG7W8-1TrNiWXajekuuziUsjNwCJ-SYkmo46D-Wx3_pTsrCIOIOYbGHezqx7voDPjceX-wiPGJZr1UBFRqunqWWUfdC-ZdoxMrk7I__GvifkhM7LWMb_sGLqvnaj1w_YpYQ","dp":"AbYZskHlT2Qwl-tdSRcnqPe9pIV0gP6i9KAJ6YOtQSLag-IhP98XWgIusDDWRAdNgrtpWJDX9Qv-EwFoCWNCRf9bAxeyXEiZGxPo7m8a5mJHlOgnXPdZJyAQA9GUBQMMuBwpAdZTjgx-2e42QCyms8GB9-HiweCO9ooa2i1jFHk","dq":"YkdpfziprjkI-K6ykD9-nhkqrppQG2beLgPLFVgaL-MuBQm2I6e9uX0IO1g2tCK7dEkz5IWB9AosaiI1J8rEr0pEZsqlhcu3um4GPrR3kGiEGQCR0BhNLEiTiI9Ci0SNmAozpM-MQAS2OkX2h2srpWrsX3ggtixNLDyqgrh6CDk","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"u5vPT6lEwGjoybfS2Soe9LhkpeXUq0jfmSoUXvjCqFgclo2QLRs4SK4pfluZl6HFFt-Yp_OiM7hDXAeAgz7Aze5yRjYPu63uIo4drSQmSiUe8rg9LNIQd83n-XJw0X_UNa2SGWGeFA-nuMAp4EpLCzc9T5_y3sBJHhGfV_aYg0O9hRgJyqRm5dMu3GmQpn0CY7keConQkcPW4osAIeoAIgRnJZKObDyIt5dRGQ5i8hitBVlMcV9jBeFf9_8LruA26g1mKvp9fQrhzt-1zhC3se46nqDhC2aF7gaos0pYVidqQvjQcsfvIcbPBNJvE3kIPsxc8YP22zPxQT95wS5JUQ","p":"32rKIG3uTD0v_fBLtMAgszNOquLx81KWklsMAtmilPaklTzAw_-akZxnM8YY62GtZ3tzPUq4jLktYqrbsBZD9Jd2igz64-5ZlnI8WcWGXm8nXK2GLkJbA633x7JnUBlcYlxcz7lQw9mzuSXUVyc0OTj5kcYw1dWXghMRe4hKYfU","q":"1vge0M2uwK1Ews3OIJaBEIXGIxLfHqFuAUgJX8XlTtcOPIZF3mLif73ZR_ZysyHHs-TvAwleUthgRzZaEo6oROQgVxLrYNDdyluQn-bDSu7UoDEIiGH-xk7Giq2tjavmEKRryN2_O0meWUVeSbvGhRsQ67hvibkuMb4hhaOXxG0","qi":"J6FEXRDpXoa-6xWDHHNHQQF7nR2mCXKOD2CP3PXAm58EWl6HSSW1bBAh4iIrsSRIMbHUG8RAJAFhjkOq2ZXP_lGLS7Blt8KNuB-Up0XMAgyJMqu3r5jnGJ5EZM3eGezKLePUOfzeiJuL67r7MaWo6sXTgrEezcbXJIrrfqpN9io"} },
-            { modLen: 3072,
-              spkiPubKey: "MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAvD1cuexe9e6Z40nYbRigAee0t2GPAWAknsDjPKPKtcflTLkFkSPr3bIj9Tgvgk8ZhdcQ5KGpi8x2ndIQ9ZwznPAOYp066KhxcQYZdASKI1FeYn32hegXLqSUE/ScnSVS62Za9PR8aB7J8HDMEGO6XNmjSzc7oCatHgM+EmX2Ko8lVsOSAeGCsR//RwQ8Wposmzj0LBM3TSalZnng0wIjnT5AlRM12Iv2ujN0pC9fPEcUMTAJ3tGViH1nu6pU7pGh+k3nyfq9sUfXOUrFcnDwISFH4+6XQbBIVbzsjbYUQCaTohKpBQQ/6HFivZtldiNRza0ikC0pC/8ErUSrD/fZdTnSjKmG5JQIx7dsYUOt1COpW9RZ3pLhRRr3xHWrXsLLQJiDVUSj5zzBXCNfm3amfsUSOZLjp4t2ywa14Nr1iHfnjLkFx9StLZsctCuD8a5rDXUcrnW8ssbR6PSE3tFovciPA3w1G7EFg5/mHVLc5Uckwqz+ORIDO6FDDemi3OExAgMBAAE=",
-              pkcsPrvKey: "MIIG/QIBADANBgkqhkiG9w0BAQEFAASCBucwggbjAgEAAoIBgQC8PVy57F717pnjSdhtGKAB57S3YY8BYCSewOM8o8q1x+VMuQWRI+vdsiP1OC+CTxmF1xDkoamLzHad0hD1nDOc8A5inTroqHFxBhl0BIojUV5iffaF6BcupJQT9JydJVLrZlr09HxoHsnwcMwQY7pc2aNLNzugJq0eAz4SZfYqjyVWw5IB4YKxH/9HBDxamiybOPQsEzdNJqVmeeDTAiOdPkCVEzXYi/a6M3SkL188RxQxMAne0ZWIfWe7qlTukaH6TefJ+r2xR9c5SsVycPAhIUfj7pdBsEhVvOyNthRAJpOiEqkFBD/ocWK9m2V2I1HNrSKQLSkL/wStRKsP99l1OdKMqYbklAjHt2xhQ63UI6lb1FnekuFFGvfEdatewstAmINVRKPnPMFcI1+bdqZ+xRI5kuOni3bLBrXg2vWId+eMuQXH1K0tmxy0K4PxrmsNdRyudbyyxtHo9ITe0Wi9yI8DfDUbsQWDn+YdUtzlRyTCrP45EgM7oUMN6aLc4TECAwEAAQKCAYAUw3v/8ifDXu9Ql+uslQPJUgKoG7XHhBBmBobKQJLynDsZzGrlyJ2S1byLpwfuisUY81EktwRZrFMFM4+1V+aFkCE2FXvTAAmLWw3hs0J9hNMxcA2KVcCA35yJ2viPiPdtidvMm09BuOuzfu2zfRyoc0VE3bHRB5Me9WKaau7NYP7QZEAtvu9IlGv3LGtv3wO+l3ivh+sYsoOaGyWGgPzmsmAzUWwmF8I+ZcCe/660mm6Kwm7ESkABTzvrAm3d5uhTZKZwpb3WdLgjG3piLx4iWogdFnb8Z4PYapOqK70lbFYkXp8u2Wu94kyGsQorAcKlmGGiDWIsFqStopbDP22Tkpj931V8ZAmJblaWtJ/wE42RhGXfbhwRCJXzDZ64s6pn9Lc8dpQCBPg4wxhk6jHlhN+ybtUBNJYmtYqkCIpjf03KYTOPh5RhbI7diignM7/jjjZzziRcuvIBl7sm4LMNyD+U/hqjpQB2refNkOTUexEG53+SrqBLfTrY9O2xSkECgcEA8q4YVoredClxDQnCM8nEdFUtzH5O+FoKKgZBIKW+0+bF10nssOefxbKXdh3BiC9zWIwPzQ+lOSc0TVtVlHAVfaAZuE2CAbohhc+L4ZWJP8BIAvKZXshDkwc8AFtAPlDgT3W31d2f7uRgkVi7e51LTHnO4gCXz4TkFKYOzCnC5lVmw1bFx0xp4SFXGYqZUpZE1oXN/aCX0b7nh4cmILoTi2Kpq4iT07jKP0x+/9YANwlyQ21g56GVae9vifodmB6pAoHBAMaSUu22HTRRDdLip7/thlnNHMLREDJxQQqoiXlWebchZkpinuI85rPv05Dz2ojZ7G7cL+RC3hweb4Ktb8PEFHXylqOwyPEapAbymzrCV0QgCZdsGK72TEa3qRSuznvnIXSwyz5R7Zp3ZCp3Txj+VYFO8DeTKoTa7ocTpw965RPkV9xLaSlSr7KSw16aVy9Ml7PDAWtLxXssJv0KeIl5Chq7Q3Zq/A2oQ+s/zWgK7LWcTXcMrID93naqM1YMZP/rSQKBwQDij6YpJXyI9ieVBIdJ0hSWhu86+rC/K1BR64Th9dsx+UC6vUk73wJKj3DX1O/ZNHN7N0eJKhIWSYOKtLow2nM11UItzi6RbjPduOXetLxtyBVyqwqEcnKj0R0zN/3CL786b6ww/bdST+PXzf86aJ7jxtReKi+QjYBhxqYJ9PMAFrrZoykB51Tx2S53qe16LNAXdtPY9RTHvHJrFMGDzDRy7Kl6eweHof0vGzt1nVSWDTuft33Awhm7zM1VAyyd2AECgcBJT9SWNtppalN0PII6dfNYTEYGFzGnrfCZgsfeqHKfjhE5/Vczp9B1NmIh7iYMyIhmFZ0I5TcjookA8g+Fc2sqcLn1DVviyDcu6XsuInodiMaBxUMHtZ9LrJscK73IOPk9H9ip1Y2nrdSpaQsm6x+ecgp2OjtEeZ/+9t6C9JiG05MsnhrhSsnbYBwJXWo66EhJ8gEgIAV1CEQMwEToXGvCmsi5e547XJhWzmODuiTSmDZxcZhut0ve+8+gQUs4wSECgcB/2awBX5vMOgIdGcXFgmv2TRPoE3qZSL9SE7BgNevUYSxSNkOtrU+Zzpan9eaGHOCtC471jIB7enAaimxScN1CZlDzpbkCwFv8Gq+jZX8M/EHjs72vNrwEQGVGERm4EU2JgkATFL78BqucRyj93hNvKF3ROg2CA15yaTN1iYL/Z6FnvevKHjunAx1gQZa3ygU2wYG8KsWRXxXb+Cu2l6o39pvsoNI9C/7uEGy3+2Lq6JulMknXVC8KSPuBXZG8WvE=",
-              jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"vD1cuexe9e6Z40nYbRigAee0t2GPAWAknsDjPKPKtcflTLkFkSPr3bIj9Tgvgk8ZhdcQ5KGpi8x2ndIQ9ZwznPAOYp066KhxcQYZdASKI1FeYn32hegXLqSUE_ScnSVS62Za9PR8aB7J8HDMEGO6XNmjSzc7oCatHgM-EmX2Ko8lVsOSAeGCsR__RwQ8Wposmzj0LBM3TSalZnng0wIjnT5AlRM12Iv2ujN0pC9fPEcUMTAJ3tGViH1nu6pU7pGh-k3nyfq9sUfXOUrFcnDwISFH4-6XQbBIVbzsjbYUQCaTohKpBQQ_6HFivZtldiNRza0ikC0pC_8ErUSrD_fZdTnSjKmG5JQIx7dsYUOt1COpW9RZ3pLhRRr3xHWrXsLLQJiDVUSj5zzBXCNfm3amfsUSOZLjp4t2ywa14Nr1iHfnjLkFx9StLZsctCuD8a5rDXUcrnW8ssbR6PSE3tFovciPA3w1G7EFg5_mHVLc5Uckwqz-ORIDO6FDDemi3OEx"},
-              jwkPrvKey: {"alg":"RS256","d":"FMN7__Inw17vUJfrrJUDyVICqBu1x4QQZgaGykCS8pw7Gcxq5cidktW8i6cH7orFGPNRJLcEWaxTBTOPtVfmhZAhNhV70wAJi1sN4bNCfYTTMXANilXAgN-cidr4j4j3bYnbzJtPQbjrs37ts30cqHNFRN2x0QeTHvVimmruzWD-0GRALb7vSJRr9yxrb98Dvpd4r4frGLKDmhslhoD85rJgM1FsJhfCPmXAnv-utJpuisJuxEpAAU876wJt3eboU2SmcKW91nS4Ixt6Yi8eIlqIHRZ2_GeD2GqTqiu9JWxWJF6fLtlrveJMhrEKKwHCpZhhog1iLBakraKWwz9tk5KY_d9VfGQJiW5WlrSf8BONkYRl324cEQiV8w2euLOqZ_S3PHaUAgT4OMMYZOox5YTfsm7VATSWJrWKpAiKY39NymEzj4eUYWyO3YooJzO_4442c84kXLryAZe7JuCzDcg_lP4ao6UAdq3nzZDk1HsRBud_kq6gS3062PTtsUpB","dp":"4o-mKSV8iPYnlQSHSdIUlobvOvqwvytQUeuE4fXbMflAur1JO98CSo9w19Tv2TRzezdHiSoSFkmDirS6MNpzNdVCLc4ukW4z3bjl3rS8bcgVcqsKhHJyo9EdMzf9wi-_Om-sMP23Uk_j183_Omie48bUXiovkI2AYcamCfTzABa62aMpAedU8dkud6nteizQF3bT2PUUx7xyaxTBg8w0cuypensHh6H9Lxs7dZ1Ulg07n7d9wMIZu8zNVQMsndgB","dq":"SU_UljbaaWpTdDyCOnXzWExGBhcxp63wmYLH3qhyn44ROf1XM6fQdTZiIe4mDMiIZhWdCOU3I6KJAPIPhXNrKnC59Q1b4sg3Lul7LiJ6HYjGgcVDB7WfS6ybHCu9yDj5PR_YqdWNp63UqWkLJusfnnIKdjo7RHmf_vbegvSYhtOTLJ4a4UrJ22AcCV1qOuhISfIBICAFdQhEDMBE6FxrwprIuXueO1yYVs5jg7ok0pg2cXGYbrdL3vvPoEFLOMEh","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"vD1cuexe9e6Z40nYbRigAee0t2GPAWAknsDjPKPKtcflTLkFkSPr3bIj9Tgvgk8ZhdcQ5KGpi8x2ndIQ9ZwznPAOYp066KhxcQYZdASKI1FeYn32hegXLqSUE_ScnSVS62Za9PR8aB7J8HDMEGO6XNmjSzc7oCatHgM-EmX2Ko8lVsOSAeGCsR__RwQ8Wposmzj0LBM3TSalZnng0wIjnT5AlRM12Iv2ujN0pC9fPEcUMTAJ3tGViH1nu6pU7pGh-k3nyfq9sUfXOUrFcnDwISFH4-6XQbBIVbzsjbYUQCaTohKpBQQ_6HFivZtldiNRza0ikC0pC_8ErUSrD_fZdTnSjKmG5JQIx7dsYUOt1COpW9RZ3pLhRRr3xHWrXsLLQJiDVUSj5zzBXCNfm3amfsUSOZLjp4t2ywa14Nr1iHfnjLkFx9StLZsctCuD8a5rDXUcrnW8ssbR6PSE3tFovciPA3w1G7EFg5_mHVLc5Uckwqz-ORIDO6FDDemi3OEx","p":"8q4YVoredClxDQnCM8nEdFUtzH5O-FoKKgZBIKW-0-bF10nssOefxbKXdh3BiC9zWIwPzQ-lOSc0TVtVlHAVfaAZuE2CAbohhc-L4ZWJP8BIAvKZXshDkwc8AFtAPlDgT3W31d2f7uRgkVi7e51LTHnO4gCXz4TkFKYOzCnC5lVmw1bFx0xp4SFXGYqZUpZE1oXN_aCX0b7nh4cmILoTi2Kpq4iT07jKP0x-_9YANwlyQ21g56GVae9vifodmB6p","q":"xpJS7bYdNFEN0uKnv-2GWc0cwtEQMnFBCqiJeVZ5tyFmSmKe4jzms-_TkPPaiNnsbtwv5ELeHB5vgq1vw8QUdfKWo7DI8RqkBvKbOsJXRCAJl2wYrvZMRrepFK7Oe-chdLDLPlHtmndkKndPGP5VgU7wN5MqhNruhxOnD3rlE-RX3EtpKVKvspLDXppXL0yXs8MBa0vFeywm_Qp4iXkKGrtDdmr8DahD6z_NaArstZxNdwysgP3edqozVgxk_-tJ","qi":"f9msAV-bzDoCHRnFxYJr9k0T6BN6mUi_UhOwYDXr1GEsUjZDra1Pmc6Wp_XmhhzgrQuO9YyAe3pwGopsUnDdQmZQ86W5AsBb_Bqvo2V_DPxB47O9rza8BEBlRhEZuBFNiYJAExS-_AarnEco_d4Tbyhd0ToNggNecmkzdYmC_2ehZ73ryh47pwMdYEGWt8oFNsGBvCrFkV8V2_grtpeqN_ab7KDSPQv-7hBst_ti6uibpTJJ11QvCkj7gV2RvFrx"} },
-            { modLen: 4096,
-              spkiPubKey: "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvyXd6hoWnoxJTmB8ttwr3vGgVgLASpEXQVPxf4xBnM8qMptsbXup6+35DI+1HVsz88c7oUoGs9CZCsQb7M01aRM0DbCYqK8dvJyztbBX1vv5Anhxh7rw/ogqCNyI372o5qkv1tXuBcn/PKKKbJvWWwOZjYvjX4IUNtag9bWpyS3l64mp8IZDrqZFf0yPfDxr00SJ27TBtKUzzkk5m0xqCsGb7+cUB/VW35mCb1TwsHRZViSsePa2YqRtOLR/o7BCtt1bleKkuKb9MCmAQhfoLvFON0/cvxR3M46BogjSvWWZBCXMZmQWwATxt+gY2PHC9L8P0RJdjsnDOzRAkQWTjQ+klyYbp8BmJV2CUynURf48CoKcWcSuUxoxWKf9h+G2dtcm7AEiZFnMshjPMGReLyWa0OpyWPtnZbMluRDndRJ7RKZmFwzx9Ke63G9SYVvte7iV9wPaVefRFWXzrOyQDmDm6DblHbuRXT+pqdbd9UXdTxJCXR9aQl9K08fwQF3zFFRtUsfO/RDikAc9s4McxovPjHfkzQbAuy0o9/KGh5h1I+buW/NhUrxebLBltvnDMe2+NwaRb+Vlr8p5ifAmnJ2+Cjrr9uRuw9eiYkJMYVE8oYl8qbe3ZefnJG5zvRTqBhRTLOVenBMpB7p8G5oI/2Fo8alRbJUg+Q7fi/NHHeUCAwEAAQ==",
-              pkcsPrvKey: "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",
-              jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"vyXd6hoWnoxJTmB8ttwr3vGgVgLASpEXQVPxf4xBnM8qMptsbXup6-35DI-1HVsz88c7oUoGs9CZCsQb7M01aRM0DbCYqK8dvJyztbBX1vv5Anhxh7rw_ogqCNyI372o5qkv1tXuBcn_PKKKbJvWWwOZjYvjX4IUNtag9bWpyS3l64mp8IZDrqZFf0yPfDxr00SJ27TBtKUzzkk5m0xqCsGb7-cUB_VW35mCb1TwsHRZViSsePa2YqRtOLR_o7BCtt1bleKkuKb9MCmAQhfoLvFON0_cvxR3M46BogjSvWWZBCXMZmQWwATxt-gY2PHC9L8P0RJdjsnDOzRAkQWTjQ-klyYbp8BmJV2CUynURf48CoKcWcSuUxoxWKf9h-G2dtcm7AEiZFnMshjPMGReLyWa0OpyWPtnZbMluRDndRJ7RKZmFwzx9Ke63G9SYVvte7iV9wPaVefRFWXzrOyQDmDm6DblHbuRXT-pqdbd9UXdTxJCXR9aQl9K08fwQF3zFFRtUsfO_RDikAc9s4McxovPjHfkzQbAuy0o9_KGh5h1I-buW_NhUrxebLBltvnDMe2-NwaRb-Vlr8p5ifAmnJ2-Cjrr9uRuw9eiYkJMYVE8oYl8qbe3ZefnJG5zvRTqBhRTLOVenBMpB7p8G5oI_2Fo8alRbJUg-Q7fi_NHHeU"},
-              jwkPrvKey: {"alg":"RS256","d":"q7ed61_ycA6BEHsXrsKOWuNgccRY8OP1K0f5DOd4TiHBu-LqflR46y1G7iTvxOaY_mg-RoAVE1bTFdvlZk9XqwSIX8AE9I0Uvstbml5IGycTpUeEXjXvqAm1EW7lO3LLmCPniS14fhTgSZ2Pk1BQOkU6nfFMmxFljXo08Wd4lvW3tmhelWhYxz4x8tFZmXdCOnI5EnoJBnre1nPr33q_TNhveQ5zbU7W81qZ1eBNtYdgdkXN94FTibxDLozgmbGPzW2AiF8qMYQ6shimUznc6Mb4yDHjknkVOOjNxj387A6obxRx0o4Z7fjDGb7VC5fs1ygJUn4YNF1HGRmw41dKHAK3yVIyMx0s-V_qFbcFs07rm66ynRSogcW7i8WYKohkdMbZDkKfBVgZO7xOXrSmSX0mrcM7zxD9bLSwCn_vTfmv9wPh7OXW0ZF5Zmt644N2kDwPuVkMDYimRppEoRTJffDRUQS403Ni35uVszCF_cuAwCzWFg0kOBG0jjBPUd2tESaXg_lDUT5bkKlCKmMaKCr4FrLapSI1pzGyz58KaN5BEiFDlAHLrCBiZV1A7pK3tTMa_uw9PvSybsHJQLlWt46Gegp_W-vpUOCN7YAnHYCtnGPbTtwLFW0WpEmFLaf0NKeYwpZQ-2jjgInWTFYcjtZ2fhzKAcoe8g5Bp0xZx-U","dp":"voBis8ZPYJx3B9fTEs2sGkvH9R-Q9gk2PTOXhRq1jLonms8ukjFNtRx6eBWnzZSCoqOz_xnYyVgZRtvLQT9SkBW5vpEUlaih9AWYzH13aEViGTChxrJIPEv32mD5YMcQcXqyHsKQQTN3LCt_EgCkioAQYEUhIm-mhrwdx7zRzIgAH8KOaEpRKlYsqUUbCTAgUd_uA0Axznk_DItF389uTvke3AOB1wxkpY6y8nOWfFq62mzWTiUsKxyPPHMHs4OCslm7d7jN0ORz3btKnsffp2G_NY84SMkk_X-iqIsrWHPL0hiae1Tpgzbh8aMylxueNiCCTSUIcEnrcIgQaPy4iw","dq":"n2p9wkmFVmP41DmZgz-IAVY11FR11cAaDfHJ3x7f4qL7kmr0XqawEgChP9lADaz2cqURuU_UHUkTVs9gd1ePg-j5PVxUmPdtjYySMUy0anB_ry1teCyJnYy1b_KPRVjS7gYgCAb7Euw39BMRWssbYgKdxYx0e8--XYVlw3vrLvrfCsKjh8MkLZf7xkKU6T0UaAfhlPfSYk2-TrQaIALAC-ys14772vYYyhgGtnb4yEe-XuWZtdQz9kzBm8CYWG4ckecAqgB5sMm7vU9ik79UBJ-0aBxt4MBhG_6I3pfHSE-ffeIjiaZ6sbOY8i0UFSldotwL8aekchC9-oj797KDcw","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"vyXd6hoWnoxJTmB8ttwr3vGgVgLASpEXQVPxf4xBnM8qMptsbXup6-35DI-1HVsz88c7oUoGs9CZCsQb7M01aRM0DbCYqK8dvJyztbBX1vv5Anhxh7rw_ogqCNyI372o5qkv1tXuBcn_PKKKbJvWWwOZjYvjX4IUNtag9bWpyS3l64mp8IZDrqZFf0yPfDxr00SJ27TBtKUzzkk5m0xqCsGb7-cUB_VW35mCb1TwsHRZViSsePa2YqRtOLR_o7BCtt1bleKkuKb9MCmAQhfoLvFON0_cvxR3M46BogjSvWWZBCXMZmQWwATxt-gY2PHC9L8P0RJdjsnDOzRAkQWTjQ-klyYbp8BmJV2CUynURf48CoKcWcSuUxoxWKf9h-G2dtcm7AEiZFnMshjPMGReLyWa0OpyWPtnZbMluRDndRJ7RKZmFwzx9Ke63G9SYVvte7iV9wPaVefRFWXzrOyQDmDm6DblHbuRXT-pqdbd9UXdTxJCXR9aQl9K08fwQF3zFFRtUsfO_RDikAc9s4McxovPjHfkzQbAuy0o9_KGh5h1I-buW_NhUrxebLBltvnDMe2-NwaRb-Vlr8p5ifAmnJ2-Cjrr9uRuw9eiYkJMYVE8oYl8qbe3ZefnJG5zvRTqBhRTLOVenBMpB7p8G5oI_2Fo8alRbJUg-Q7fi_NHHeU","p":"318TiQL1oU8C089Mbq3LZFQMJpl9yvZZz2BD05UcWnKyyYNhLxjwSYykRCKk2wHf0NW5KE834QrC_ecQ5qtvbbEqR-5RDeNakSAiO4_XD6dy0GIaS9tx_VXUJEwRByktRLZmNXQuUE6-gZ9FtBY3Y4aHSneFitVbvPoBxGx76MJeFb_zl3JslKtsIYRFvTnutIrs7dAkV5r33Czg5qVA4U47uLmUPXU6cowcKgoST7EIuKvjaj55n5ct-dO_OsYaWDUCmocA1jdcCiCj1Ver1MmvtM34UIH-X1Ww-XHpxB1jP1dcRHY1ivpsDH_9VfKyL6fOVxDwr3M0OtgIeA-UYw","q":"2xHNBRyafMR7ZeljmFHH-YGJ7kma-jqrg9nCF3YwseLBwZBEKMp4TFBMsu-W_5IWd8bHwH7XE2lLZDIL2y0qJrSBvmFwDQiLCJg7YP9I19DGI0XjVVVXytPSe9vQ9I_A6Q7U7yqW4U7Xx6zDL7p3HpSzOVXsiZdIvz7yBXk6A_53A83a0DwZO6d66OzkJ-IkUzmtBxk4YS5SorwxIKWWxYKOecvlaD0g0J88xcMXhgBeVrZ1Mw2z_k6_Fr6tvhsy99rIN4gUZ55fJWS01Cuxf-5xGbYYR6mmwWczykKapjzWrkLb_FbVM-oXfRlKHaC2qOTAZO-BSLblG721ko_jFw","qi":"z4w_NI50rTfYplYwwyhmMhN2vYijJINzAOeBeoYarCxMzwE2ZUWv_ZocucyEQ5t1k5mIavHZWPAkPxFJunbFXArb0G4nv09fY9cRwoLeClbFCinWBPF-G_Sd-0xdgjYSXIbHuFBdrk5fy9Fhp3b4_fs-YjIg4Bt5mP_8EXKbOA-2-tWAEJD97sR-0TpLSz89Fyu1Q0iU_RyJHqQHWhQGsy8TNoU1oMuWCULMXj08BCxD9H-O0mJbvhnbjhzaM8eJFd9vlacAJoWe0pp7AErl5NXnnqhKlZoa-NWVextvPgGPHOUjd9fkOwc29b2lTsK2dPmZ-KF-J4XjE_9JbJRLDg"} },
-        ];
-
-        vectors.forEach( function ( v ) {
-            describe( v.modLen + " bits", function () {
-                var keyAlg = extend( normalizeAlg(alg), { modulusLength: v.modLen, publicExponent: x2b('10001') } );
-
-                it( "spki publicKey", function ( done ) {
-                    crypto.subtle.importKey( "spki", s2b( atob(v.spkiPubKey) ), alg, true, [ pubUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('public');
-                            expect(key.extractable).toBe(true);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([pubUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "pkcs8 privateKey", function ( done ) {
-                    crypto.subtle.importKey( "pkcs8", s2b( atob(v.pkcsPrvKey) ), alg, false, [ prvUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('private');
-                            expect(key.extractable).toEqual(false);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "jwk publicKey", function ( done ) {
-                    crypto.subtle.importKey( "jwk", v.jwkPubKey, alg, true, [ pubUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('public');
-                            expect(key.extractable).toBe(true);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([pubUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-
-                it( "jwk privateKey", function ( done ) {
-                    crypto.subtle.importKey( "jwk", v.jwkPrvKey, alg, false, [ prvUse ] )
-                        .then( function ( key ) {
-                            expect(key).toEqual(jasmine.any(CryptoKey));
-                            expect(key.type).toBe('private');
-                            expect(key.extractable).toEqual(false);
-                            expect(key.algorithm).toEqual(keyAlg);
-                            expect(key.usages).toEqual([prvUse]);
-                        })
-                        .catch(fail)
-                        .then(done);
-                });
-            });
-        });
-    });
-
-    describe( "verify", function () {
-        var vectors = [
-            { modLen: 1024,
-              jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"ywcjjbtYC7Tdl9CN2_Qw2Y8QgEu3D_YIfPaKLEFdANWS3fBHOyvdOhNdpfSPERq04MvV3Y9PlMFALDfrI5UoOqDsnabffIzyXSzL337SvNd5HcIB4SvdK3hleqIOcbRr753N6ir__G_xE0gsqxMWWKHdGqf_9GfkBGp3se9oxhM"},
-              subvectors: [
-                { text: "",
-                  signature: "RmzrqjjmOLmX5xTg++Ph8OzCYMmn/Yx5qMnQJ0fF5xePR/Sh9XdmSe5VD88FFvssAVfzCXX7EvRlOPLFoW2AtlXUU1OSOCb5GlVRxPb8m6EU8QLvuxk/D1H26X8zLvo6ea9liTC1zpjMh5ipMxeEacNlY9ccMyp3UNJ6wq9WjA4=" },
-                { text: "Hello World!",
-                  signature: "Euuzs2y3H+F0vXydDVR+a9oAsyr10osSUMEg+BFQSnb4zpZSshm/f9RaFo5RAMEad9a6fCDClDw2J+Aqk7iDLNEL1iPH6jZSlqjeT1ZaanSD8kkjrzINgIi8+0In0YpaNMuj0MSlPH1xPlnRCn0sRfKORY8vYOmLQxbJ4s9/HOs=" },
-              ] },
-            { modLen: 2048,
-              jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"u5vPT6lEwGjoybfS2Soe9LhkpeXUq0jfmSoUXvjCqFgclo2QLRs4SK4pfluZl6HFFt-Yp_OiM7hDXAeAgz7Aze5yRjYPu63uIo4drSQmSiUe8rg9LNIQd83n-XJw0X_UNa2SGWGeFA-nuMAp4EpLCzc9T5_y3sBJHhGfV_aYg0O9hRgJyqRm5dMu3GmQpn0CY7keConQkcPW4osAIeoAIgRnJZKObDyIt5dRGQ5i8hitBVlMcV9jBeFf9_8LruA26g1mKvp9fQrhzt-1zhC3se46nqDhC2aF7gaos0pYVidqQvjQcsfvIcbPBNJvE3kIPsxc8YP22zPxQT95wS5JUQ"},
-              subvectors: [
-                { text: "",
-                  signature: "ag7NR/gIX87W3Gwlk6qSqwQfn77Wj5s9E0/np1zgi1GnXBMZOFmDagZh0naMLiICW9T0UnjNoMe1DAXNzQ1R2RzlWXmd6Fc3WbT8WNMnX1ZyjUfHbn3JzQrigwMTWnaow/0BxC9jzZyarGyDwb50cn6vG37LdWOTo752xEDXgh3jTcIXWMISV49FaHRi9JAORT4LY8s8jMIdQ8f4JZ2OGIh8cJmC0SWCBuOrgzAzHI7/XqPTnZSyCs75/s2Stg1CQsWqjfij5EaqQxw6zSTcCA+Msxwks50v0pawXGrfIANf+hOfl/Bee42of5uoDOn7N+3FYfkHGt/d5U5K1nHO3g==" },
-                { text: "Hello World!",
-                  signature: "iKVj6wC50oE6TBdpD6ry99v0eraUGfg2YVdsoBsfse9XSq9zkt5yMzXgmTvVp8jN3eyUO8HyTaB95M2JLJEXR+cD3wr2vKl2qdbKBcZCd2fPUr6HIiN5nSEC9WEVD6E+lzWrC7EZl34qXyQm1pzaNkMjQ9oO9j6A1wCzH3sB2HUNRX8M0p2DAG6uN880/ttcLgu7z//3U+2XvPR1+S45RQOR/F3/ar0mqncHl0DVBE4+o4kgQ9uIepJNoVgRKo7BY+ZQN7dnD/V7+7RcfeU9owAPMa6R+RJlH6CUUnSB2XSv9vDpyJZnFFmJZuYfVMHWwakSrXPxyjHjxyNninpWSA==" },
-              ] },
-            { modLen: 3072,
-              jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"vD1cuexe9e6Z40nYbRigAee0t2GPAWAknsDjPKPKtcflTLkFkSPr3bIj9Tgvgk8ZhdcQ5KGpi8x2ndIQ9ZwznPAOYp066KhxcQYZdASKI1FeYn32hegXLqSUE_ScnSVS62Za9PR8aB7J8HDMEGO6XNmjSzc7oCatHgM-EmX2Ko8lVsOSAeGCsR__RwQ8Wposmzj0LBM3TSalZnng0wIjnT5AlRM12Iv2ujN0pC9fPEcUMTAJ3tGViH1nu6pU7pGh-k3nyfq9sUfXOUrFcnDwISFH4-6XQbBIVbzsjbYUQCaTohKpBQQ_6HFivZtldiNRza0ikC0pC_8ErUSrD_fZdTnSjKmG5JQIx7dsYUOt1COpW9RZ3pLhRRr3xHWrXsLLQJiDVUSj5zzBXCNfm3amfsUSOZLjp4t2ywa14Nr1iHfnjLkFx9StLZsctCuD8a5rDXUcrnW8ssbR6PSE3tFovciPA3w1G7EFg5_mHVLc5Uckwqz-ORIDO6FDDemi3OEx"},
-              subvectors: [
-                { text: "",
-                  signature: "MJe2Erja9UA7TphOVDHaWeSeLhmrbOZmeLJqez4yhPHHvOFzHGzArgdXSaLQjjtzQdklPGQlSNWQXqJePwMfIwEbEnRAD96yMsjx/V45A4KsYLclbnGsxCfAWSNtUIIs6PKMollcX5FSjebTJB/IWTg6QIrTaCRUZFjtXaiGhjuieCWGG7Toz/T3x+QIj1pM5Ob8vhyQNBGMVGaimn3gbvIfSd0I7W552Cz1wnNQNgEWqk04r27g+Ub8zkO0CTCK1md3k15i9q08yrBfGoJNO4zjjEiPHs/S1Jb6srE7L0CbVw21zih/vjQ1NAd5B83RKy+H+8O7rJjuXkHJOBE4/J6oYRkO9XKU1kwpOFEHabSoauKgBWW1LmaXdc5EbD5bWmcZzbSKNth6JCPg8LVUMeVvFxlshKAbSMY7ymEsFRMu7fDmFvKU7EgKeFY+q5/pB5UuVFbOnaNFZmCJ7aWcLzP3+GmRcLNH6DHlRQmrZQAfSq+UDT7zgYBCpAjxcBDF" },
-                { text: "Hello World!",
-                  signature: "DZ4YtxC0EQWbqbA+BsBy90qPPWuxHu4TlfCZYU2q3swruQ8JM6oX1esYqe3974Cre2oZuFtH9MFPj2NCiC3UM8PFbNjQHWe0efMnKGXyKw+S78vem294W/QBxf8Nw9ngeTqZFVmcpzxMLTfB74hxZC1klU8A0Fxi8PV42WQj/Gswtw3UcoIxcUxsk/K1gC51bUHaYoXgn2+acimGF5ipi8KhYlbumMWb34idlr5aYxObf9nb36i3+a6V16H4f8iTvcviqRkkYQTTdBTNso3stWFVhE/dzFB7A6N/bXXUpLuMGxO3BynhJPZdXEz63L/HYJFF8X9J8NnwN6OCPzUZl5UCokvEXfpTZpxpd4xYs1uft7ftJ8XXiOoGs0RwTQ1IDgxqATDfejH7totmJINxLXGHT8G2kUhOwqIM5oEsyelnBEHG8s1bHJGe66bLfutogIllMb9TVdYxj+Y/RmGaW5xqeFw1Y1rzMBqQmrdjX0H/Lcy5yrrK5+sVPXq4s6tR" },
-              ] },
-            { modLen: 4096,
-              jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"vyXd6hoWnoxJTmB8ttwr3vGgVgLASpEXQVPxf4xBnM8qMptsbXup6-35DI-1HVsz88c7oUoGs9CZCsQb7M01aRM0DbCYqK8dvJyztbBX1vv5Anhxh7rw_ogqCNyI372o5qkv1tXuBcn_PKKKbJvWWwOZjYvjX4IUNtag9bWpyS3l64mp8IZDrqZFf0yPfDxr00SJ27TBtKUzzkk5m0xqCsGb7-cUB_VW35mCb1TwsHRZViSsePa2YqRtOLR_o7BCtt1bleKkuKb9MCmAQhfoLvFON0_cvxR3M46BogjSvWWZBCXMZmQWwATxt-gY2PHC9L8P0RJdjsnDOzRAkQWTjQ-klyYbp8BmJV2CUynURf48CoKcWcSuUxoxWKf9h-G2dtcm7AEiZFnMshjPMGReLyWa0OpyWPtnZbMluRDndRJ7RKZmFwzx9Ke63G9SYVvte7iV9wPaVefRFWXzrOyQDmDm6DblHbuRXT-pqdbd9UXdTxJCXR9aQl9K08fwQF3zFFRtUsfO_RDikAc9s4McxovPjHfkzQbAuy0o9_KGh5h1I-buW_NhUrxebLBltvnDMe2-NwaRb-Vlr8p5ifAmnJ2-Cjrr9uRuw9eiYkJMYVE8oYl8qbe3ZefnJG5zvRTqBhRTLOVenBMpB7p8G5oI_2Fo8alRbJUg-Q7fi_NHHeU"},
-              subvectors: [
-                { text: "",
-                  signature: "dOeehWjJmyT4Xedh6lwUCv/+ouzvsUC4BeZr7G4fd0Xhspgf8Ua+d8SN+gn8q1ujuKn+2030ffn23B+DVnarAP3443avvvL4xK6cXYZUVufalQ7XkTNnR+g1tlSdlqyi7e85BXBv11oZahm2ivWN6N0INGsV3LZ0nb2HxbXBz2xyqBIZ8kSPeQhLQrD2H5Xl84YTGFFUqd8J3Mvufd3ky2cAG3lI1tgRZt81meJcKke78IH1HRDJdJiHXL7nE+8aHHj4Ddc/0OUfjJaIS539dH//ZDpHhKsTGeSskLDCZ5uu0NHEmkGxzKJKP6tuDV1ucJq+gVCF3LMZ19m9TXmLbvmL26e49OkRP5cQ1Hhm+7WJ+DkRVJKCSqYT42Szutbtw4ww3AlEZZA0MmX90PnjdeJQ6QgARZW8vo/hLGlUoQBZjRAGOjR+S4BOrHolz1ibnUW03Y9Z054X1zG++rgKoKDZC4TGQe7Kzju5kLRpPyOejzKb9sFcY0C2ksA5QvPgBwNITP5RJAIWKaajpuSOh8WTkstQtBKJ/mtMr4kfz6D8S91JK0vip9MNmQRo2pKK+pBzwjUcnISZvOBhxSuQt5FuMrDp7Rm9oTgm8+rMoVoCxMH4RxvBTV4+ioAHGFThz83rB1se2KmiPO3fEeIaU8Me3KBiDEW1E/TDiTOD4/s=" },
-                { text: "Hello World!",
-                  signature: "QURUcPaJ4AXQrL56fGbX7KHS7IOvE0xnX1dOwcTvXEDxO8oTA9U9kF5TUKNDDMgNnXRXMdb3/qufsKiPfKGcJTlEsqs6/mAYWDBrVZoRLf87j5b5ONm6UFhhJ84dapLvPgpNjqvm9NPiq1gJMhXRELZtmScpC6tvX+xnUyVIeVlj2VjawCd40SEn84db7ud1ckSOE/WHBAI/bHXAu2EHbo3iCfSeNdnuKoctkYhDfPzC/OnZvwM9HX1wli1oobrXdSrpaYf53tiV8W2V1pD16mJ2SdxxmexRXSYYhFeIkU4JhVV/0ROp+swbFVUFUsMHGijdSxv+JhMF8xrHRwx2HhaEWnzRkKubxSdxKutrNMERzQXxNLPola3RR0/bob18k+4LTHf4ZpjkHVwi0jAtg1AvkAILjJ7H7Ucm0nA6Slpikmi24pdbmH66a/IS4XTA/1K875xBCOtZJ/cLtr+yN37CGMpvdpnZYB6xkPgDUjRIjLB8RuhTa+yeCdZBV2eu7wEyz2B5v1KnCpBE951wfyLxFeaSXDn+zcFk+gRF2oK35g0FfHCRN25188SVeTDLSrMsEUuxgnolTeMyrFmaDVlZbI8l7QNYiE4w6I3NBnz7MOUFHF/6VjkgrUCEVFPMeS0pvFMxUX5tlVfYFZWMs5npFVnQK1wEYIWwP/OB6Vs=" },
-              ] },
-        ];
-
-        vectors.forEach( function ( v ) {
-            describe( v.modLen + " bits", function ( done ) {
-                v.subvectors.forEach( function ( sv ) {
-                    it( "'" + sv.text + "' to match '" + sv.signature + "'", function ( done ) {
-                        crypto.subtle.importKey( "jwk", v.jwkPubKey, alg, true, [ pubUse ] )
-                            .then( function ( key ) {
-                                return crypto.subtle.verify( alg, key, s2b( atob(sv.signature) ), s2b(sv.text) );
-                            })
-                            .then( function ( valid ) {
-                                expect(valid).toBe(true);
-                            })
-                            .catch(fail)
-                            .then(done);
-                    });
-                });
-            });
-        });
-    });
-});
-
-/*
-
-var vectors = [
-    { modLen: 1024,
-      spkiPubKey: "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDLByONu1gLtN2X0I3b9DDZjxCAS7cP9gh89oosQV0A1ZLd8Ec7K906E12l9I8RGrTgy9Xdj0+UwUAsN+sjlSg6oOydpt98jPJdLMvfftK813kdwgHhK90reGV6og5xtGvvnc3qKv/8b/ETSCyrExZYod0ap//0Z+QEanex72jGEwIDAQAB",
-      pkcsPrvKey: "MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAMsHI427WAu03ZfQjdv0MNmPEIBLtw/2CHz2iixBXQDVkt3wRzsr3ToTXaX0jxEatODL1d2PT5TBQCw36yOVKDqg7J2m33yM8l0sy99+0rzXeR3CAeEr3St4ZXqiDnG0a++dzeoq//xv8RNILKsTFlih3Rqn//Rn5ARqd7HvaMYTAgMBAAECgYEAwlEJ2Uw2n7Wy5Oup6pwT6RZBf9l302Hyi8/XPTYuEm9XSu3+7wYzjbMdTYn9KCy8c+8DuTPBwikYB3pZpkvLHGRPLGDBHdzW6tGrCZDihfR/o0QJoa/V3fU+llH3xJwqek7Yem3IXVefHYRf+vMy5TVU/9etb9s2uNePeePPvKkCQQD2fhOOJ61bmTrzztVmveaaChsDfRg8P5yP8YJc68ET42NLbh1taSIy4A0tRMUVGRUCkpIgbNsHna0xGjc8qkAvAkEA0tviDZgsMIp9hez9o2NnFu2cGLliy5h9dsxyN54r75aEOis6MjODUam5s3aND0plJjTBN1fXJ3oYdej48r2bXQJBANQSGr8GcgdJ6UeUX1Qa9Ej5gs5YlT5YuFm7vp41k5OJ4ocmQRk+B9dfntagwTNqtgHVmvVc0oFV7ok9deKy068CQGuMUYFjk25yxNFRbpEuuz8blJmbvQNhVOUKJFuv5nL+j5TnxXgjhCBb9GbP2eTpqivRjpd+yzPMd7t0R73v7dUCQQC6JjHf49JKmINQe0H9Nx7toeDyvJAfLKPrm1hwWspWJIzyINQXeZWwrXMQ79O4Rbl0CYwh8AoRN81KPVr4JUGL",
-      jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"ywcjjbtYC7Tdl9CN2_Qw2Y8QgEu3D_YIfPaKLEFdANWS3fBHOyvdOhNdpfSPERq04MvV3Y9PlMFALDfrI5UoOqDsnabffIzyXSzL337SvNd5HcIB4SvdK3hleqIOcbRr753N6ir__G_xE0gsqxMWWKHdGqf_9GfkBGp3se9oxhM"},
-      jwkPrvKey: {"alg":"RS256","d":"wlEJ2Uw2n7Wy5Oup6pwT6RZBf9l302Hyi8_XPTYuEm9XSu3-7wYzjbMdTYn9KCy8c-8DuTPBwikYB3pZpkvLHGRPLGDBHdzW6tGrCZDihfR_o0QJoa_V3fU-llH3xJwqek7Yem3IXVefHYRf-vMy5TVU_9etb9s2uNePeePPvKk","dp":"1BIavwZyB0npR5RfVBr0SPmCzliVPli4Wbu-njWTk4nihyZBGT4H11-e1qDBM2q2AdWa9VzSgVXuiT114rLTrw","dq":"a4xRgWOTbnLE0VFukS67PxuUmZu9A2FU5QokW6_mcv6PlOfFeCOEIFv0Zs_Z5OmqK9GOl37LM8x3u3RHve_t1Q","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"ywcjjbtYC7Tdl9CN2_Qw2Y8QgEu3D_YIfPaKLEFdANWS3fBHOyvdOhNdpfSPERq04MvV3Y9PlMFALDfrI5UoOqDsnabffIzyXSzL337SvNd5HcIB4SvdK3hleqIOcbRr753N6ir__G_xE0gsqxMWWKHdGqf_9GfkBGp3se9oxhM","p":"9n4TjietW5k6887VZr3mmgobA30YPD-cj_GCXOvBE-NjS24dbWkiMuANLUTFFRkVApKSIGzbB52tMRo3PKpALw","q":"0tviDZgsMIp9hez9o2NnFu2cGLliy5h9dsxyN54r75aEOis6MjODUam5s3aND0plJjTBN1fXJ3oYdej48r2bXQ","qi":"uiYx3-PSSpiDUHtB_Tce7aHg8ryQHyyj65tYcFrKViSM8iDUF3mVsK1zEO_TuEW5dAmMIfAKETfNSj1a-CVBiw"},
-      subvectors: [
-        { text: "",
-          signature: "RmzrqjjmOLmX5xTg++Ph8OzCYMmn/Yx5qMnQJ0fF5xePR/Sh9XdmSe5VD88FFvssAVfzCXX7EvRlOPLFoW2AtlXUU1OSOCb5GlVRxPb8m6EU8QLvuxk/D1H26X8zLvo6ea9liTC1zpjMh5ipMxeEacNlY9ccMyp3UNJ6wq9WjA4=" },
-        { text: "Hello World!",
-          signature: "Euuzs2y3H+F0vXydDVR+a9oAsyr10osSUMEg+BFQSnb4zpZSshm/f9RaFo5RAMEad9a6fCDClDw2J+Aqk7iDLNEL1iPH6jZSlqjeT1ZaanSD8kkjrzINgIi8+0In0YpaNMuj0MSlPH1xPlnRCn0sRfKORY8vYOmLQxbJ4s9/HOs=" },
-      ] },
-    { modLen: 2048,
-      spkiPubKey: "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu5vPT6lEwGjoybfS2Soe9LhkpeXUq0jfmSoUXvjCqFgclo2QLRs4SK4pfluZl6HFFt+Yp/OiM7hDXAeAgz7Aze5yRjYPu63uIo4drSQmSiUe8rg9LNIQd83n+XJw0X/UNa2SGWGeFA+nuMAp4EpLCzc9T5/y3sBJHhGfV/aYg0O9hRgJyqRm5dMu3GmQpn0CY7keConQkcPW4osAIeoAIgRnJZKObDyIt5dRGQ5i8hitBVlMcV9jBeFf9/8LruA26g1mKvp9fQrhzt+1zhC3se46nqDhC2aF7gaos0pYVidqQvjQcsfvIcbPBNJvE3kIPsxc8YP22zPxQT95wS5JUQIDAQAB",
-      pkcsPrvKey: "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC7m89PqUTAaOjJt9LZKh70uGSl5dSrSN+ZKhRe+MKoWByWjZAtGzhIril+W5mXocUW35in86IzuENcB4CDPsDN7nJGNg+7re4ijh2tJCZKJR7yuD0s0hB3zef5cnDRf9Q1rZIZYZ4UD6e4wCngSksLNz1Pn/LewEkeEZ9X9piDQ72FGAnKpGbl0y7caZCmfQJjuR4KidCRw9biiwAh6gAiBGclko5sPIi3l1EZDmLyGK0FWUxxX2MF4V/3/wuu4DbqDWYq+n19CuHO37XOELex7jqeoOELZoXuBqizSlhWJ2pC+NByx+8hxs8E0m8TeQg+zFzxg/bbM/FBP3nBLklRAgMBAAECggEAXUgpmkhlwO3o4XOfSQ9iePe+Q6a1Sb1gQD3mBxrVXvMAs/MLfwILyEegpg1Rn012O9tNgiTnv6OdCoNIaPmo0DwBYdu7kuv2fgP/yXkx+KfgbXsiH8kLGyascyFt6x0OHOqCvFAHU549HOWfbMBD8/2xZIf5MLyXHnZQrmIUjx8jgOG96lATc6MOSdAHKLuwuxQcJVF+pdzVyRXoDU5PG7W8+1TrNiWXajekuuziUsjNwCJ+SYkmo46D+Wx3/pTsrCIOIOYbGHezqx7voDPjceX+wiPGJZr1UBFRqunqWWUfdC+ZdoxMrk7I//GvifkhM7LWMb/sGLqvnaj1w/YpYQKBgQDfasogbe5MPS/98Eu0wCCzM06q4vHzUpaSWwwC2aKU9qSVPMDD/5qRnGczxhjrYa1ne3M9SriMuS1iqtuwFkP0l3aKDPrj7lmWcjxZxYZebydcrYYuQlsDrffHsmdQGVxiXFzPuVDD2bO5JdRXJzQ5OPmRxjDV1ZeCExF7iEph9QKBgQDW+B7Qza7ArUTCzc4gloEQhcYjEt8eoW4BSAlfxeVO1w48hkXeYuJ/vdlH9nKzIcez5O8DCV5S2GBHNloSjqhE5CBXEutg0N3KW5Cf5sNK7tSgMQiIYf7GTsaKra2Nq+YQpGvI3b87SZ5ZRV5Ju8aFGxDruG+JuS4xviGFo5fEbQKBgAG2GbJB5U9kMJfrXUkXJ6j3vaSFdID+ovSgCemDrUEi2oPiIT/fF1oCLrAw1kQHTYK7aViQ1/UL/hMBaAljQkX/WwMXslxImRsT6O5vGuZiR5ToJ1z3WScgEAPRlAUDDLgcKQHWU44MftnuNkAsprPBgffh4sHgjvaKGtotYxR5AoGAYkdpfziprjkI+K6ykD9+nhkqrppQG2beLgPLFVgaL+MuBQm2I6e9uX0IO1g2tCK7dEkz5IWB9AosaiI1J8rEr0pEZsqlhcu3um4GPrR3kGiEGQCR0BhNLEiTiI9Ci0SNmAozpM+MQAS2OkX2h2srpWrsX3ggtixNLDyqgrh6CDkCgYAnoURdEOlehr7rFYMcc0dBAXudHaYJco4PYI/c9cCbnwRaXodJJbVsECHiIiuxJEgxsdQbxEAkAWGOQ6rZlc/+UYtLsGW3wo24H5SnRcwCDIkyq7evmOcYnkRkzd4Z7Mot49Q5/N6Im4vruvsxpajqxdOCsR7Nxtckiut+qk32Kg==",
-      jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"u5vPT6lEwGjoybfS2Soe9LhkpeXUq0jfmSoUXvjCqFgclo2QLRs4SK4pfluZl6HFFt-Yp_OiM7hDXAeAgz7Aze5yRjYPu63uIo4drSQmSiUe8rg9LNIQd83n-XJw0X_UNa2SGWGeFA-nuMAp4EpLCzc9T5_y3sBJHhGfV_aYg0O9hRgJyqRm5dMu3GmQpn0CY7keConQkcPW4osAIeoAIgRnJZKObDyIt5dRGQ5i8hitBVlMcV9jBeFf9_8LruA26g1mKvp9fQrhzt-1zhC3se46nqDhC2aF7gaos0pYVidqQvjQcsfvIcbPBNJvE3kIPsxc8YP22zPxQT95wS5JUQ"},
-      jwkPrvKey: {"alg":"RS256","d":"XUgpmkhlwO3o4XOfSQ9iePe-Q6a1Sb1gQD3mBxrVXvMAs_MLfwILyEegpg1Rn012O9tNgiTnv6OdCoNIaPmo0DwBYdu7kuv2fgP_yXkx-KfgbXsiH8kLGyascyFt6x0OHOqCvFAHU549HOWfbMBD8_2xZIf5MLyXHnZQrmIUjx8jgOG96lATc6MOSdAHKLuwuxQcJVF-pdzVyRXoDU5PG7W8-1TrNiWXajekuuziUsjNwCJ-SYkmo46D-Wx3_pTsrCIOIOYbGHezqx7voDPjceX-wiPGJZr1UBFRqunqWWUfdC-ZdoxMrk7I__GvifkhM7LWMb_sGLqvnaj1w_YpYQ","dp":"AbYZskHlT2Qwl-tdSRcnqPe9pIV0gP6i9KAJ6YOtQSLag-IhP98XWgIusDDWRAdNgrtpWJDX9Qv-EwFoCWNCRf9bAxeyXEiZGxPo7m8a5mJHlOgnXPdZJyAQA9GUBQMMuBwpAdZTjgx-2e42QCyms8GB9-HiweCO9ooa2i1jFHk","dq":"YkdpfziprjkI-K6ykD9-nhkqrppQG2beLgPLFVgaL-MuBQm2I6e9uX0IO1g2tCK7dEkz5IWB9AosaiI1J8rEr0pEZsqlhcu3um4GPrR3kGiEGQCR0BhNLEiTiI9Ci0SNmAozpM-MQAS2OkX2h2srpWrsX3ggtixNLDyqgrh6CDk","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"u5vPT6lEwGjoybfS2Soe9LhkpeXUq0jfmSoUXvjCqFgclo2QLRs4SK4pfluZl6HFFt-Yp_OiM7hDXAeAgz7Aze5yRjYPu63uIo4drSQmSiUe8rg9LNIQd83n-XJw0X_UNa2SGWGeFA-nuMAp4EpLCzc9T5_y3sBJHhGfV_aYg0O9hRgJyqRm5dMu3GmQpn0CY7keConQkcPW4osAIeoAIgRnJZKObDyIt5dRGQ5i8hitBVlMcV9jBeFf9_8LruA26g1mKvp9fQrhzt-1zhC3se46nqDhC2aF7gaos0pYVidqQvjQcsfvIcbPBNJvE3kIPsxc8YP22zPxQT95wS5JUQ","p":"32rKIG3uTD0v_fBLtMAgszNOquLx81KWklsMAtmilPaklTzAw_-akZxnM8YY62GtZ3tzPUq4jLktYqrbsBZD9Jd2igz64-5ZlnI8WcWGXm8nXK2GLkJbA633x7JnUBlcYlxcz7lQw9mzuSXUVyc0OTj5kcYw1dWXghMRe4hKYfU","q":"1vge0M2uwK1Ews3OIJaBEIXGIxLfHqFuAUgJX8XlTtcOPIZF3mLif73ZR_ZysyHHs-TvAwleUthgRzZaEo6oROQgVxLrYNDdyluQn-bDSu7UoDEIiGH-xk7Giq2tjavmEKRryN2_O0meWUVeSbvGhRsQ67hvibkuMb4hhaOXxG0","qi":"J6FEXRDpXoa-6xWDHHNHQQF7nR2mCXKOD2CP3PXAm58EWl6HSSW1bBAh4iIrsSRIMbHUG8RAJAFhjkOq2ZXP_lGLS7Blt8KNuB-Up0XMAgyJMqu3r5jnGJ5EZM3eGezKLePUOfzeiJuL67r7MaWo6sXTgrEezcbXJIrrfqpN9io"},
-      subvectors: [
-        { text: "",
-          signature: "ag7NR/gIX87W3Gwlk6qSqwQfn77Wj5s9E0/np1zgi1GnXBMZOFmDagZh0naMLiICW9T0UnjNoMe1DAXNzQ1R2RzlWXmd6Fc3WbT8WNMnX1ZyjUfHbn3JzQrigwMTWnaow/0BxC9jzZyarGyDwb50cn6vG37LdWOTo752xEDXgh3jTcIXWMISV49FaHRi9JAORT4LY8s8jMIdQ8f4JZ2OGIh8cJmC0SWCBuOrgzAzHI7/XqPTnZSyCs75/s2Stg1CQsWqjfij5EaqQxw6zSTcCA+Msxwks50v0pawXGrfIANf+hOfl/Bee42of5uoDOn7N+3FYfkHGt/d5U5K1nHO3g==" },
-        { text: "Hello World!",
-          signature: "iKVj6wC50oE6TBdpD6ry99v0eraUGfg2YVdsoBsfse9XSq9zkt5yMzXgmTvVp8jN3eyUO8HyTaB95M2JLJEXR+cD3wr2vKl2qdbKBcZCd2fPUr6HIiN5nSEC9WEVD6E+lzWrC7EZl34qXyQm1pzaNkMjQ9oO9j6A1wCzH3sB2HUNRX8M0p2DAG6uN880/ttcLgu7z//3U+2XvPR1+S45RQOR/F3/ar0mqncHl0DVBE4+o4kgQ9uIepJNoVgRKo7BY+ZQN7dnD/V7+7RcfeU9owAPMa6R+RJlH6CUUnSB2XSv9vDpyJZnFFmJZuYfVMHWwakSrXPxyjHjxyNninpWSA==" },
-      ] },
-    { modLen: 3072,
-      spkiPubKey: "MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAvD1cuexe9e6Z40nYbRigAee0t2GPAWAknsDjPKPKtcflTLkFkSPr3bIj9Tgvgk8ZhdcQ5KGpi8x2ndIQ9ZwznPAOYp066KhxcQYZdASKI1FeYn32hegXLqSUE/ScnSVS62Za9PR8aB7J8HDMEGO6XNmjSzc7oCatHgM+EmX2Ko8lVsOSAeGCsR//RwQ8Wposmzj0LBM3TSalZnng0wIjnT5AlRM12Iv2ujN0pC9fPEcUMTAJ3tGViH1nu6pU7pGh+k3nyfq9sUfXOUrFcnDwISFH4+6XQbBIVbzsjbYUQCaTohKpBQQ/6HFivZtldiNRza0ikC0pC/8ErUSrD/fZdTnSjKmG5JQIx7dsYUOt1COpW9RZ3pLhRRr3xHWrXsLLQJiDVUSj5zzBXCNfm3amfsUSOZLjp4t2ywa14Nr1iHfnjLkFx9StLZsctCuD8a5rDXUcrnW8ssbR6PSE3tFovciPA3w1G7EFg5/mHVLc5Uckwqz+ORIDO6FDDemi3OExAgMBAAE=",
-      pkcsPrvKey: "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",
-      jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"vD1cuexe9e6Z40nYbRigAee0t2GPAWAknsDjPKPKtcflTLkFkSPr3bIj9Tgvgk8ZhdcQ5KGpi8x2ndIQ9ZwznPAOYp066KhxcQYZdASKI1FeYn32hegXLqSUE_ScnSVS62Za9PR8aB7J8HDMEGO6XNmjSzc7oCatHgM-EmX2Ko8lVsOSAeGCsR__RwQ8Wposmzj0LBM3TSalZnng0wIjnT5AlRM12Iv2ujN0pC9fPEcUMTAJ3tGViH1nu6pU7pGh-k3nyfq9sUfXOUrFcnDwISFH4-6XQbBIVbzsjbYUQCaTohKpBQQ_6HFivZtldiNRza0ikC0pC_8ErUSrD_fZdTnSjKmG5JQIx7dsYUOt1COpW9RZ3pLhRRr3xHWrXsLLQJiDVUSj5zzBXCNfm3amfsUSOZLjp4t2ywa14Nr1iHfnjLkFx9StLZsctCuD8a5rDXUcrnW8ssbR6PSE3tFovciPA3w1G7EFg5_mHVLc5Uckwqz-ORIDO6FDDemi3OEx"},
-      jwkPrvKey: {"alg":"RS256","d":"FMN7__Inw17vUJfrrJUDyVICqBu1x4QQZgaGykCS8pw7Gcxq5cidktW8i6cH7orFGPNRJLcEWaxTBTOPtVfmhZAhNhV70wAJi1sN4bNCfYTTMXANilXAgN-cidr4j4j3bYnbzJtPQbjrs37ts30cqHNFRN2x0QeTHvVimmruzWD-0GRALb7vSJRr9yxrb98Dvpd4r4frGLKDmhslhoD85rJgM1FsJhfCPmXAnv-utJpuisJuxEpAAU876wJt3eboU2SmcKW91nS4Ixt6Yi8eIlqIHRZ2_GeD2GqTqiu9JWxWJF6fLtlrveJMhrEKKwHCpZhhog1iLBakraKWwz9tk5KY_d9VfGQJiW5WlrSf8BONkYRl324cEQiV8w2euLOqZ_S3PHaUAgT4OMMYZOox5YTfsm7VATSWJrWKpAiKY39NymEzj4eUYWyO3YooJzO_4442c84kXLryAZe7JuCzDcg_lP4ao6UAdq3nzZDk1HsRBud_kq6gS3062PTtsUpB","dp":"4o-mKSV8iPYnlQSHSdIUlobvOvqwvytQUeuE4fXbMflAur1JO98CSo9w19Tv2TRzezdHiSoSFkmDirS6MNpzNdVCLc4ukW4z3bjl3rS8bcgVcqsKhHJyo9EdMzf9wi-_Om-sMP23Uk_j183_Omie48bUXiovkI2AYcamCfTzABa62aMpAedU8dkud6nteizQF3bT2PUUx7xyaxTBg8w0cuypensHh6H9Lxs7dZ1Ulg07n7d9wMIZu8zNVQMsndgB","dq":"SU_UljbaaWpTdDyCOnXzWExGBhcxp63wmYLH3qhyn44ROf1XM6fQdTZiIe4mDMiIZhWdCOU3I6KJAPIPhXNrKnC59Q1b4sg3Lul7LiJ6HYjGgcVDB7WfS6ybHCu9yDj5PR_YqdWNp63UqWkLJusfnnIKdjo7RHmf_vbegvSYhtOTLJ4a4UrJ22AcCV1qOuhISfIBICAFdQhEDMBE6FxrwprIuXueO1yYVs5jg7ok0pg2cXGYbrdL3vvPoEFLOMEh","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"vD1cuexe9e6Z40nYbRigAee0t2GPAWAknsDjPKPKtcflTLkFkSPr3bIj9Tgvgk8ZhdcQ5KGpi8x2ndIQ9ZwznPAOYp066KhxcQYZdASKI1FeYn32hegXLqSUE_ScnSVS62Za9PR8aB7J8HDMEGO6XNmjSzc7oCatHgM-EmX2Ko8lVsOSAeGCsR__RwQ8Wposmzj0LBM3TSalZnng0wIjnT5AlRM12Iv2ujN0pC9fPEcUMTAJ3tGViH1nu6pU7pGh-k3nyfq9sUfXOUrFcnDwISFH4-6XQbBIVbzsjbYUQCaTohKpBQQ_6HFivZtldiNRza0ikC0pC_8ErUSrD_fZdTnSjKmG5JQIx7dsYUOt1COpW9RZ3pLhRRr3xHWrXsLLQJiDVUSj5zzBXCNfm3amfsUSOZLjp4t2ywa14Nr1iHfnjLkFx9StLZsctCuD8a5rDXUcrnW8ssbR6PSE3tFovciPA3w1G7EFg5_mHVLc5Uckwqz-ORIDO6FDDemi3OEx","p":"8q4YVoredClxDQnCM8nEdFUtzH5O-FoKKgZBIKW-0-bF10nssOefxbKXdh3BiC9zWIwPzQ-lOSc0TVtVlHAVfaAZuE2CAbohhc-L4ZWJP8BIAvKZXshDkwc8AFtAPlDgT3W31d2f7uRgkVi7e51LTHnO4gCXz4TkFKYOzCnC5lVmw1bFx0xp4SFXGYqZUpZE1oXN_aCX0b7nh4cmILoTi2Kpq4iT07jKP0x-_9YANwlyQ21g56GVae9vifodmB6p","q":"xpJS7bYdNFEN0uKnv-2GWc0cwtEQMnFBCqiJeVZ5tyFmSmKe4jzms-_TkPPaiNnsbtwv5ELeHB5vgq1vw8QUdfKWo7DI8RqkBvKbOsJXRCAJl2wYrvZMRrepFK7Oe-chdLDLPlHtmndkKndPGP5VgU7wN5MqhNruhxOnD3rlE-RX3EtpKVKvspLDXppXL0yXs8MBa0vFeywm_Qp4iXkKGrtDdmr8DahD6z_NaArstZxNdwysgP3edqozVgxk_-tJ","qi":"f9msAV-bzDoCHRnFxYJr9k0T6BN6mUi_UhOwYDXr1GEsUjZDra1Pmc6Wp_XmhhzgrQuO9YyAe3pwGopsUnDdQmZQ86W5AsBb_Bqvo2V_DPxB47O9rza8BEBlRhEZuBFNiYJAExS-_AarnEco_d4Tbyhd0ToNggNecmkzdYmC_2ehZ73ryh47pwMdYEGWt8oFNsGBvCrFkV8V2_grtpeqN_ab7KDSPQv-7hBst_ti6uibpTJJ11QvCkj7gV2RvFrx"},
-      subvectors: [
-        { text: "",
-          signature: "MJe2Erja9UA7TphOVDHaWeSeLhmrbOZmeLJqez4yhPHHvOFzHGzArgdXSaLQjjtzQdklPGQlSNWQXqJePwMfIwEbEnRAD96yMsjx/V45A4KsYLclbnGsxCfAWSNtUIIs6PKMollcX5FSjebTJB/IWTg6QIrTaCRUZFjtXaiGhjuieCWGG7Toz/T3x+QIj1pM5Ob8vhyQNBGMVGaimn3gbvIfSd0I7W552Cz1wnNQNgEWqk04r27g+Ub8zkO0CTCK1md3k15i9q08yrBfGoJNO4zjjEiPHs/S1Jb6srE7L0CbVw21zih/vjQ1NAd5B83RKy+H+8O7rJjuXkHJOBE4/J6oYRkO9XKU1kwpOFEHabSoauKgBWW1LmaXdc5EbD5bWmcZzbSKNth6JCPg8LVUMeVvFxlshKAbSMY7ymEsFRMu7fDmFvKU7EgKeFY+q5/pB5UuVFbOnaNFZmCJ7aWcLzP3+GmRcLNH6DHlRQmrZQAfSq+UDT7zgYBCpAjxcBDF" },
-        { text: "Hello World!",
-          signature: "DZ4YtxC0EQWbqbA+BsBy90qPPWuxHu4TlfCZYU2q3swruQ8JM6oX1esYqe3974Cre2oZuFtH9MFPj2NCiC3UM8PFbNjQHWe0efMnKGXyKw+S78vem294W/QBxf8Nw9ngeTqZFVmcpzxMLTfB74hxZC1klU8A0Fxi8PV42WQj/Gswtw3UcoIxcUxsk/K1gC51bUHaYoXgn2+acimGF5ipi8KhYlbumMWb34idlr5aYxObf9nb36i3+a6V16H4f8iTvcviqRkkYQTTdBTNso3stWFVhE/dzFB7A6N/bXXUpLuMGxO3BynhJPZdXEz63L/HYJFF8X9J8NnwN6OCPzUZl5UCokvEXfpTZpxpd4xYs1uft7ftJ8XXiOoGs0RwTQ1IDgxqATDfejH7totmJINxLXGHT8G2kUhOwqIM5oEsyelnBEHG8s1bHJGe66bLfutogIllMb9TVdYxj+Y/RmGaW5xqeFw1Y1rzMBqQmrdjX0H/Lcy5yrrK5+sVPXq4s6tR" },
-      ] },
-    { modLen: 4096,
-      spkiPubKey: "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvyXd6hoWnoxJTmB8ttwr3vGgVgLASpEXQVPxf4xBnM8qMptsbXup6+35DI+1HVsz88c7oUoGs9CZCsQb7M01aRM0DbCYqK8dvJyztbBX1vv5Anhxh7rw/ogqCNyI372o5qkv1tXuBcn/PKKKbJvWWwOZjYvjX4IUNtag9bWpyS3l64mp8IZDrqZFf0yPfDxr00SJ27TBtKUzzkk5m0xqCsGb7+cUB/VW35mCb1TwsHRZViSsePa2YqRtOLR/o7BCtt1bleKkuKb9MCmAQhfoLvFON0/cvxR3M46BogjSvWWZBCXMZmQWwATxt+gY2PHC9L8P0RJdjsnDOzRAkQWTjQ+klyYbp8BmJV2CUynURf48CoKcWcSuUxoxWKf9h+G2dtcm7AEiZFnMshjPMGReLyWa0OpyWPtnZbMluRDndRJ7RKZmFwzx9Ke63G9SYVvte7iV9wPaVefRFWXzrOyQDmDm6DblHbuRXT+pqdbd9UXdTxJCXR9aQl9K08fwQF3zFFRtUsfO/RDikAc9s4McxovPjHfkzQbAuy0o9/KGh5h1I+buW/NhUrxebLBltvnDMe2+NwaRb+Vlr8p5ifAmnJ2+Cjrr9uRuw9eiYkJMYVE8oYl8qbe3ZefnJG5zvRTqBhRTLOVenBMpB7p8G5oI/2Fo8alRbJUg+Q7fi/NHHeUCAwEAAQ==",
-      pkcsPrvKey: "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",
-      jwkPubKey: {"alg":"RS256","e":"AQAB","ext":true,"key_ops":["verify"],"kty":"RSA","n":"vyXd6hoWnoxJTmB8ttwr3vGgVgLASpEXQVPxf4xBnM8qMptsbXup6-35DI-1HVsz88c7oUoGs9CZCsQb7M01aRM0DbCYqK8dvJyztbBX1vv5Anhxh7rw_ogqCNyI372o5qkv1tXuBcn_PKKKbJvWWwOZjYvjX4IUNtag9bWpyS3l64mp8IZDrqZFf0yPfDxr00SJ27TBtKUzzkk5m0xqCsGb7-cUB_VW35mCb1TwsHRZViSsePa2YqRtOLR_o7BCtt1bleKkuKb9MCmAQhfoLvFON0_cvxR3M46BogjSvWWZBCXMZmQWwATxt-gY2PHC9L8P0RJdjsnDOzRAkQWTjQ-klyYbp8BmJV2CUynURf48CoKcWcSuUxoxWKf9h-G2dtcm7AEiZFnMshjPMGReLyWa0OpyWPtnZbMluRDndRJ7RKZmFwzx9Ke63G9SYVvte7iV9wPaVefRFWXzrOyQDmDm6DblHbuRXT-pqdbd9UXdTxJCXR9aQl9K08fwQF3zFFRtUsfO_RDikAc9s4McxovPjHfkzQbAuy0o9_KGh5h1I-buW_NhUrxebLBltvnDMe2-NwaRb-Vlr8p5ifAmnJ2-Cjrr9uRuw9eiYkJMYVE8oYl8qbe3ZefnJG5zvRTqBhRTLOVenBMpB7p8G5oI_2Fo8alRbJUg-Q7fi_NHHeU"},
-      jwkPrvKey: {"alg":"RS256","d":"q7ed61_ycA6BEHsXrsKOWuNgccRY8OP1K0f5DOd4TiHBu-LqflR46y1G7iTvxOaY_mg-RoAVE1bTFdvlZk9XqwSIX8AE9I0Uvstbml5IGycTpUeEXjXvqAm1EW7lO3LLmCPniS14fhTgSZ2Pk1BQOkU6nfFMmxFljXo08Wd4lvW3tmhelWhYxz4x8tFZmXdCOnI5EnoJBnre1nPr33q_TNhveQ5zbU7W81qZ1eBNtYdgdkXN94FTibxDLozgmbGPzW2AiF8qMYQ6shimUznc6Mb4yDHjknkVOOjNxj387A6obxRx0o4Z7fjDGb7VC5fs1ygJUn4YNF1HGRmw41dKHAK3yVIyMx0s-V_qFbcFs07rm66ynRSogcW7i8WYKohkdMbZDkKfBVgZO7xOXrSmSX0mrcM7zxD9bLSwCn_vTfmv9wPh7OXW0ZF5Zmt644N2kDwPuVkMDYimRppEoRTJffDRUQS403Ni35uVszCF_cuAwCzWFg0kOBG0jjBPUd2tESaXg_lDUT5bkKlCKmMaKCr4FrLapSI1pzGyz58KaN5BEiFDlAHLrCBiZV1A7pK3tTMa_uw9PvSybsHJQLlWt46Gegp_W-vpUOCN7YAnHYCtnGPbTtwLFW0WpEmFLaf0NKeYwpZQ-2jjgInWTFYcjtZ2fhzKAcoe8g5Bp0xZx-U","dp":"voBis8ZPYJx3B9fTEs2sGkvH9R-Q9gk2PTOXhRq1jLonms8ukjFNtRx6eBWnzZSCoqOz_xnYyVgZRtvLQT9SkBW5vpEUlaih9AWYzH13aEViGTChxrJIPEv32mD5YMcQcXqyHsKQQTN3LCt_EgCkioAQYEUhIm-mhrwdx7zRzIgAH8KOaEpRKlYsqUUbCTAgUd_uA0Axznk_DItF389uTvke3AOB1wxkpY6y8nOWfFq62mzWTiUsKxyPPHMHs4OCslm7d7jN0ORz3btKnsffp2G_NY84SMkk_X-iqIsrWHPL0hiae1Tpgzbh8aMylxueNiCCTSUIcEnrcIgQaPy4iw","dq":"n2p9wkmFVmP41DmZgz-IAVY11FR11cAaDfHJ3x7f4qL7kmr0XqawEgChP9lADaz2cqURuU_UHUkTVs9gd1ePg-j5PVxUmPdtjYySMUy0anB_ry1teCyJnYy1b_KPRVjS7gYgCAb7Euw39BMRWssbYgKdxYx0e8--XYVlw3vrLvrfCsKjh8MkLZf7xkKU6T0UaAfhlPfSYk2-TrQaIALAC-ys14772vYYyhgGtnb4yEe-XuWZtdQz9kzBm8CYWG4ckecAqgB5sMm7vU9ik79UBJ-0aBxt4MBhG_6I3pfHSE-ffeIjiaZ6sbOY8i0UFSldotwL8aekchC9-oj797KDcw","e":"AQAB","ext":true,"key_ops":["sign"],"kty":"RSA","n":"vyXd6hoWnoxJTmB8ttwr3vGgVgLASpEXQVPxf4xBnM8qMptsbXup6-35DI-1HVsz88c7oUoGs9CZCsQb7M01aRM0DbCYqK8dvJyztbBX1vv5Anhxh7rw_ogqCNyI372o5qkv1tXuBcn_PKKKbJvWWwOZjYvjX4IUNtag9bWpyS3l64mp8IZDrqZFf0yPfDxr00SJ27TBtKUzzkk5m0xqCsGb7-cUB_VW35mCb1TwsHRZViSsePa2YqRtOLR_o7BCtt1bleKkuKb9MCmAQhfoLvFON0_cvxR3M46BogjSvWWZBCXMZmQWwATxt-gY2PHC9L8P0RJdjsnDOzRAkQWTjQ-klyYbp8BmJV2CUynURf48CoKcWcSuUxoxWKf9h-G2dtcm7AEiZFnMshjPMGReLyWa0OpyWPtnZbMluRDndRJ7RKZmFwzx9Ke63G9SYVvte7iV9wPaVefRFWXzrOyQDmDm6DblHbuRXT-pqdbd9UXdTxJCXR9aQl9K08fwQF3zFFRtUsfO_RDikAc9s4McxovPjHfkzQbAuy0o9_KGh5h1I-buW_NhUrxebLBltvnDMe2-NwaRb-Vlr8p5ifAmnJ2-Cjrr9uRuw9eiYkJMYVE8oYl8qbe3ZefnJG5zvRTqBhRTLOVenBMpB7p8G5oI_2Fo8alRbJUg-Q7fi_NHHeU","p":"318TiQL1oU8C089Mbq3LZFQMJpl9yvZZz2BD05UcWnKyyYNhLxjwSYykRCKk2wHf0NW5KE834QrC_ecQ5qtvbbEqR-5RDeNakSAiO4_XD6dy0GIaS9tx_VXUJEwRByktRLZmNXQuUE6-gZ9FtBY3Y4aHSneFitVbvPoBxGx76MJeFb_zl3JslKtsIYRFvTnutIrs7dAkV5r33Czg5qVA4U47uLmUPXU6cowcKgoST7EIuKvjaj55n5ct-dO_OsYaWDUCmocA1jdcCiCj1Ver1MmvtM34UIH-X1Ww-XHpxB1jP1dcRHY1ivpsDH_9VfKyL6fOVxDwr3M0OtgIeA-UYw","q":"2xHNBRyafMR7ZeljmFHH-YGJ7kma-jqrg9nCF3YwseLBwZBEKMp4TFBMsu-W_5IWd8bHwH7XE2lLZDIL2y0qJrSBvmFwDQiLCJg7YP9I19DGI0XjVVVXytPSe9vQ9I_A6Q7U7yqW4U7Xx6zDL7p3HpSzOVXsiZdIvz7yBXk6A_53A83a0DwZO6d66OzkJ-IkUzmtBxk4YS5SorwxIKWWxYKOecvlaD0g0J88xcMXhgBeVrZ1Mw2z_k6_Fr6tvhsy99rIN4gUZ55fJWS01Cuxf-5xGbYYR6mmwWczykKapjzWrkLb_FbVM-oXfRlKHaC2qOTAZO-BSLblG721ko_jFw","qi":"z4w_NI50rTfYplYwwyhmMhN2vYijJINzAOeBeoYarCxMzwE2ZUWv_ZocucyEQ5t1k5mIavHZWPAkPxFJunbFXArb0G4nv09fY9cRwoLeClbFCinWBPF-G_Sd-0xdgjYSXIbHuFBdrk5fy9Fhp3b4_fs-YjIg4Bt5mP_8EXKbOA-2-tWAEJD97sR-0TpLSz89Fyu1Q0iU_RyJHqQHWhQGsy8TNoU1oMuWCULMXj08BCxD9H-O0mJbvhnbjhzaM8eJFd9vlacAJoWe0pp7AErl5NXnnqhKlZoa-NWVextvPgGPHOUjd9fkOwc29b2lTsK2dPmZ-KF-J4XjE_9JbJRLDg"},
-      subvectors: [
-        { text: "",
-          signature: "dOeehWjJmyT4Xedh6lwUCv/+ouzvsUC4BeZr7G4fd0Xhspgf8Ua+d8SN+gn8q1ujuKn+2030ffn23B+DVnarAP3443avvvL4xK6cXYZUVufalQ7XkTNnR+g1tlSdlqyi7e85BXBv11oZahm2ivWN6N0INGsV3LZ0nb2HxbXBz2xyqBIZ8kSPeQhLQrD2H5Xl84YTGFFUqd8J3Mvufd3ky2cAG3lI1tgRZt81meJcKke78IH1HRDJdJiHXL7nE+8aHHj4Ddc/0OUfjJaIS539dH//ZDpHhKsTGeSskLDCZ5uu0NHEmkGxzKJKP6tuDV1ucJq+gVCF3LMZ19m9TXmLbvmL26e49OkRP5cQ1Hhm+7WJ+DkRVJKCSqYT42Szutbtw4ww3AlEZZA0MmX90PnjdeJQ6QgARZW8vo/hLGlUoQBZjRAGOjR+S4BOrHolz1ibnUW03Y9Z054X1zG++rgKoKDZC4TGQe7Kzju5kLRpPyOejzKb9sFcY0C2ksA5QvPgBwNITP5RJAIWKaajpuSOh8WTkstQtBKJ/mtMr4kfz6D8S91JK0vip9MNmQRo2pKK+pBzwjUcnISZvOBhxSuQt5FuMrDp7Rm9oTgm8+rMoVoCxMH4RxvBTV4+ioAHGFThz83rB1se2KmiPO3fEeIaU8Me3KBiDEW1E/TDiTOD4/s=" },
-        { text: "Hello World!",
-          signature: "QURUcPaJ4AXQrL56fGbX7KHS7IOvE0xnX1dOwcTvXEDxO8oTA9U9kF5TUKNDDMgNnXRXMdb3/qufsKiPfKGcJTlEsqs6/mAYWDBrVZoRLf87j5b5ONm6UFhhJ84dapLvPgpNjqvm9NPiq1gJMhXRELZtmScpC6tvX+xnUyVIeVlj2VjawCd40SEn84db7ud1ckSOE/WHBAI/bHXAu2EHbo3iCfSeNdnuKoctkYhDfPzC/OnZvwM9HX1wli1oobrXdSrpaYf53tiV8W2V1pD16mJ2SdxxmexRXSYYhFeIkU4JhVV/0ROp+swbFVUFUsMHGijdSxv+JhMF8xrHRwx2HhaEWnzRkKubxSdxKutrNMERzQXxNLPola3RR0/bob18k+4LTHf4ZpjkHVwi0jAtg1AvkAILjJ7H7Ucm0nA6Slpikmi24pdbmH66a/IS4XTA/1K875xBCOtZJ/cLtr+yN37CGMpvdpnZYB6xkPgDUjRIjLB8RuhTa+yeCdZBV2eu7wEyz2B5v1KnCpBE951wfyLxFeaSXDn+zcFk+gRF2oK35g0FfHCRN25188SVeTDLSrMsEUuxgnolTeMyrFmaDVlZbI8l7QNYiE4w6I3NBnz7MOUFHF/6VjkgrUCEVFPMeS0pvFMxUX5tlVfYFZWMs5npFVnQK1wEYIWwP/OB6Vs=" },
-      ] },
-];
-
-*/
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/sha-1.js
+++ /dev/null
@@ -1,32 +0,0 @@
-describe( "SHA-1", function () {
-    var alg = 'SHA-1';
-
-    describe( "digest", function () {
-        var vectors = [
-            { text: "",             digest: "da39a3ee5e6b4b0d3255bfef95601890afd80709" },
-            { text: "Hello World!", digest: "2ef7bde608ce5404e97d5f042f95f89f1c232871" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var bytes = s2b( v.text );
-
-            it( "of '" + v.text + "' as ArrayBuffer", function ( done ) {
-                crypto.subtle.digest( alg, bytes.buffer )
-                    .then( function ( hash ) {
-                        expect( b2x(hash) ).toBe( v.digest );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "of '" + v.text + "' as Uint8Array", function ( done ) {
-                crypto.subtle.digest( alg, bytes )
-                    .then( function ( hash ) {
-                        expect( b2x(hash) ).toBe( v.digest );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/sha-256.js
+++ /dev/null
@@ -1,32 +0,0 @@
-describe( "SHA-256", function () {
-    var alg = 'SHA-256';
-
-    describe( "digest", function () {
-        var vectors = [
-            { text: "",             digest: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" },
-            { text: "Hello World!", digest: "7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var bytes = s2b( v.text );
-
-            it( "of '" + v.text + "' as ArrayBuffer", function ( done ) {
-                crypto.subtle.digest( alg, bytes.buffer )
-                    .then( function ( hash ) {
-                        expect( b2x(hash) ).toBe( v.digest );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "of '" + v.text + "' as Uint8Array", function ( done ) {
-                crypto.subtle.digest( alg, bytes )
-                    .then( function ( hash ) {
-                        expect( b2x(hash) ).toBe( v.digest );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/sha-384.js
+++ /dev/null
@@ -1,32 +0,0 @@
-describe( "SHA-384", function () {
-    var alg = 'SHA-384';
-
-    describe( "digest", function () {
-        var vectors = [
-            { text: "",             digest: "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" },
-            { text: "Hello World!", digest: "bfd76c0ebbd006fee583410547c1887b0292be76d582d96c242d2a792723e3fd6fd061f9d5cfd13b8f961358e6adba4a" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var bytes = s2b( v.text );
-
-            it( "of '" + v.text + "' as ArrayBuffer", function ( done ) {
-                crypto.subtle.digest( alg, bytes.buffer )
-                    .then( function ( hash ) {
-                        expect( b2x(hash) ).toBe( v.digest );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "of '" + v.text + "' as Uint8Array", function ( done ) {
-                crypto.subtle.digest( alg, bytes )
-                    .then( function ( hash ) {
-                        expect( b2x(hash) ).toBe( v.digest );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/alg/sha-512.js
+++ /dev/null
@@ -1,32 +0,0 @@
-describe( "SHA-512", function () {
-    var alg = 'SHA-512';
-
-    describe( "digest", function () {
-        var vectors = [
-            { text: "",             digest: "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" },
-            { text: "Hello World!", digest: "861844d6704e8573fec34d967e20bcfef3d424cf48be04e6dc08f2bd58c729743371015ead891cc3cf1c9d34b49264b510751b1ff9e537937bc46b5d6ff4ecc8" },
-        ];
-
-        vectors.forEach( function ( v ) {
-            var bytes = s2b( v.text );
-
-            it( "of '" + v.text + "' as ArrayBuffer", function ( done ) {
-                crypto.subtle.digest( alg, bytes.buffer )
-                    .then( function ( hash ) {
-                        expect( b2x(hash) ).toBe( v.digest );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-
-            it( "of '" + v.text + "' as Uint8Array", function ( done ) {
-                crypto.subtle.digest( alg, bytes )
-                    .then( function ( hash ) {
-                        expect( b2x(hash) ).toBe( v.digest );
-                    })
-                    .catch(fail)
-                    .then(done);
-            });
-        });
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/crypto.js
+++ /dev/null
@@ -1,23 +0,0 @@
-describe( 'General support of Web Cryptography API', function () {
-    it( 'window.crypto', function () {
-        expect(typeof Crypto).not.toBe('undefined');
-        expect(window.crypto).toEqual(jasmine.any(Crypto));
-        expect(window.crypto.getRandomValues).toEqual(jasmine.any(Function));
-        expect(window.crypto.getRandomValues(new Uint8Array(10))).toEqual(jasmine.any(Uint8Array));
-    });
-
-    it( 'window.crypto.subtle', function () {
-        expect(typeof CryptoKey).not.toBe('undefined');
-        expect(typeof SubtleCrypto).not.toBe('undefined');
-        expect(window.crypto.subtle).toEqual(jasmine.any(SubtleCrypto));
-        expect(window.crypto.subtle.generateKey).toEqual(jasmine.any(Function));
-        expect(window.crypto.subtle.importKey).toEqual(jasmine.any(Function));
-        expect(window.crypto.subtle.exportKey).toEqual(jasmine.any(Function));
-        expect(window.crypto.subtle.wrapKey).toEqual(jasmine.any(Function));
-        expect(window.crypto.subtle.unwrapKey).toEqual(jasmine.any(Function));
-        expect(window.crypto.subtle.encrypt).toEqual(jasmine.any(Function));
-        expect(window.crypto.subtle.decrypt).toEqual(jasmine.any(Function));
-        expect(window.crypto.subtle.sign).toEqual(jasmine.any(Function));
-        expect(window.crypto.subtle.verify).toEqual(jasmine.any(Function));
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/test/util.js
+++ /dev/null
@@ -1,221 +0,0 @@
-function s2b ( s ) {
-    var b = new Uint8Array(s.length);
-    for ( var i = 0; i < s.length; i++ ) b[i] = s.charCodeAt(i);
-    return b;
-}
-
-function b2s ( b ) {
-    if ( b instanceof ArrayBuffer ) b = new Uint8Array(b);
-    return String.fromCharCode.apply( String, b );
-}
-
-function x2b ( s ) {
-    if ( s.length % 2 ) s = '0'+s;
-    var b = new Uint8Array(s.length/2);
-    for ( var i = 0; i < s.length; i += 2 ) {
-        b[i>>1] = parseInt( s.substr(i,2), 16 );
-    }
-    return b;
-}
-
-function b2x ( ab ) {
-    var b = new Uint8Array(ab), s = '';
-    for ( var i = 0; i < b.length; i++ ) {
-        var h = b[i].toString(16);
-        if ( h.length < 2 ) s += '0';
-        s += h;
-    }
-    return s;
-}
-
-function extend ( o, x ) {
-    var r = {};
-    for ( var k in o ) r[k] = o[k];
-    for ( var k in x ) r[k] = x[k];
-    return r;
-}
-
-function normalizeAlg ( a ) {
-    if ( typeof a === 'string' ) a = { name: a };
-    if ( typeof a.hash === 'string' ) a.hash = { name: a.hash };
-    var r = {};
-    for ( var p in a ) r[p] = a[p];
-    r.name = r.name.toUpperCase().replace('V','v');
-    if ( r.hash ) r.hash = { name: r.hash.name.toUpperCase() };
-    if ( r.publicExponent ) r.publicExponent = new Uint8Array(r.publicExponent);
-    return r;
-};
-
-var oid2str = { 'KoZIhvcNAQEB': '1.2.840.113549.1.1.1' },
-    str2oid = { '1.2.840.113549.1.1.1': 'KoZIhvcNAQEB' };
-
-function b2der ( buf, ctx ) {
-    if ( buf instanceof ArrayBuffer ) buf = new Uint8Array(buf);
-    if ( !ctx ) ctx = { pos: 0, end: buf.length };
-
-    if ( ctx.end - ctx.pos < 2 || ctx.end > buf.length ) throw new RangeError("Malformed DER");
-
-    var tag = buf[ctx.pos++],
-        len = buf[ctx.pos++];
-
-    if ( len >= 0x80 ) {
-        len &= 0x7f;
-        if ( ctx.end - ctx.pos < len ) throw new RangeError("Malformed DER");
-        for ( var xlen = 0; len--; ) xlen <<= 8, xlen |= buf[ctx.pos++];
-        len = xlen;
-    }
-
-    if ( ctx.end - ctx.pos < len ) throw new RangeError("Malformed DER");
-
-    var rv;
-
-    switch ( tag ) {
-        case 0x02: // Universal Primitive INTEGER
-            rv = buf.subarray( ctx.pos, ctx.pos += len );
-            break;
-        case 0x03: // Universal Primitive BIT STRING
-            if ( buf[ctx.pos++] ) throw new Error( "Unsupported bit string" );
-            len--;
-        case 0x04: // Universal Primitive OCTET STRING
-            rv = new Uint8Array( buf.subarray( ctx.pos, ctx.pos += len ) ).buffer;
-            break;
-        case 0x05: // Universal Primitive NULL
-            rv = null;
-            break;
-        case 0x06: // Universal Primitive OBJECT IDENTIFIER
-            var oid = btoa( b2s( buf.subarray( ctx.pos, ctx.pos += len ) ) );
-            if ( !( oid in oid2str ) ) throw new Error( "Unsupported OBJECT ID " + oid );
-            rv = oid2str[oid];
-            break;
-        case 0x30: // Universal Constructed SEQUENCE
-            rv = [];
-            for ( var end = ctx.pos + len; ctx.pos < end; ) rv.push( b2der( buf, ctx ) );
-            break;
-        default:
-            throw new Error( "Unsupported DER tag 0x" + tag.toString(16) );
-    }
-
-    return rv;
-}
-
-function der2b ( val, buf ) {
-    if ( !buf ) buf = [];
-
-    var tag = 0, len = 0,
-        pos = buf.length + 2;
-
-    buf.push( 0, 0 ); // placeholder
-
-    if ( val instanceof Uint8Array ) {  // Universal Primitive INTEGER
-        tag = 0x02, len = val.length;
-        for ( var i = 0; i < len; i++ ) buf.push( val[i] );
-    }
-    else if ( val instanceof ArrayBuffer ) { // Universal Primitive OCTET STRING
-        tag = 0x04, len = val.byteLength, val = new Uint8Array(val);
-        for ( var i = 0; i < len; i++ ) buf.push( val[i] );
-    }
-    else if ( val === null ) { // Universal Primitive NULL
-        tag = 0x05, len = 0;
-    }
-    else if ( typeof val === 'string' && val in str2oid ) { // Universal Primitive OBJECT IDENTIFIER
-        var oid = s2b( atob( str2oid[val] ) );
-        tag = 0x06, len = oid.length;
-        for ( var i = 0; i < len; i++ ) buf.push( oid[i] );
-    }
-    else if ( val instanceof Array ) { // Universal Constructed SEQUENCE
-        for ( var i = 0; i < val.length; i++ ) der2b( val[i], buf );
-        tag = 0x30, len = buf.length - pos;
-    }
-    else if ( typeof val === 'object' && val.tag === 0x03 && val.value instanceof ArrayBuffer ) { // Tag hint
-        val = new Uint8Array(val.value), tag = 0x03, len = val.byteLength + 1;
-        buf.push(0); for ( var i = 0; i < len; i++ ) buf.push( val[i] );
-    }
-    else {
-        throw new Error( "Unsupported DER value " + val );
-    }
-
-    if ( len >= 0x80 ) {
-        var xlen = len, len = 4;
-        buf.splice( pos, 0, (xlen >> 24) & 0xff, (xlen >> 16) & 0xff, (xlen >> 8) & 0xff, xlen & 0xff );
-        while ( len > 1 && !(xlen >> 24) ) xlen <<= 8, len--;
-        if ( len < 4 ) buf.splice( pos, 4 - len );
-        len |= 0x80;
-    }
-
-    buf.splice( pos - 2, 2, tag, len );
-
-    return buf;
-}
-
-describe( 'Util', function () {
-    it( 's2b', function () {
-        expect( s2b('') ).toEqual( new Uint8Array() );
-        expect( s2b('a') ).toEqual( new Uint8Array([97]) );
-        expect( s2b( unescape( encodeURIComponent("\uD83D\uDE80") ) ) ).toEqual( new Uint8Array([0xF0,0x9F,0x9A,0x80]) ); // Unicode ROCKET
-    });
-
-    it( 'b2s', function () {
-        expect( b2s( new Uint8Array() ) ).toBe('');
-        expect( b2s( new Uint8Array([97]) ) ).toBe('a');
-        expect( decodeURIComponent( escape( b2s( new Uint8Array([0xF0,0x9F,0x9A,0x80]) ) ) ) ).toBe("\uD83D\uDE80"); // Unicode ROCKET
-    });
-
-    it( 'x2b', function () {
-        expect( x2b('') ).toEqual( new Uint8Array() );
-        expect( x2b('0') ).toEqual( new Uint8Array(1) );
-        expect( x2b('10203') ).toEqual( new Uint8Array([1,2,3]) );
-    });
-
-    it( 'b2x', function () {
-        expect( b2x( new ArrayBuffer() ) ).toBe( '' );
-        expect( b2x( new Uint8Array(1) ) ).toBe( '00' );
-        expect( b2x( new Uint8Array([1,2,3]) ) ).toBe( '010203' );
-    });
-
-    it( 'normalizeAlg', function () {
-        expect( normalizeAlg('sha-1') ).toEqual( { name: 'SHA-1' } );
-        expect( normalizeAlg('Sha-256') ).toEqual( { name: 'SHA-256' } );
-        expect( normalizeAlg( { name: 'hmac', hash: 'sha-1' } ) ).toEqual( { name: 'HMAC', hash: { name: 'SHA-1' } } );
-        expect( normalizeAlg( { name: 'hmac', hash: 'sha-1', length: 160 } ) ).toEqual( { name: 'HMAC', hash: { name: 'SHA-1' }, length: 160 } );
-    });
-
-    it( 'b2der', function () {
-        var buf = s2b( atob('MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBANhqanvyA6bx1ILuWA8H3f/oV1ghZOd3WsIyFjli8bDrdPqAjIqQJL0uvU6spB/QPsj44y5pXswAXdekus6Jibe1N+/0swA/5lDpQro7PTTOWc3Gv5WSm1F8GJrmoR8raaNzHG/D+iv1Rm/0Pr0unUKUUKwWRc6X4VclhwiihuL5AgMBAAECgYEAseb41h7ipbASU/d+aAy9kAr9EjORcT2KXC00W8RcjmVgajSWU6meqe3sLOp6mLRliGwgxRxVkzmR6x09e19Q1zIM8qyHVL1hkVVcWcvPS0wd5Dc0FhpaXBeSiRu1Vkzk+jMCA60IBzobWvvuEqglOitqBEaLPJwTM/E6N2ddggECQQD4tYSi7goCW1b05o3O99oYN2584Ns3H3a92AawUgAyi9HkW7MeJdtvE5gQ+GVxP/iUIxpjgjksoA3p+0xEXJ+ZAkEA3sKL5BQB3ChOV7QJ8WIqButQ4qPO/0lg4MuJxqYDS9/2EhyFHOldKdbcmuFh8hJ+aQpcDChfvG+ngb+kTAv6YQJBAOSrAChNdCZ2lJzW3ctNVtitHojytJsZ8rLZzEyRGF1g8LplFWrCo96cxVPVDm/xwTtyivCy6p59Ck33H0g7YQECQEE/QrJfmdvegnP17COj2SOFsX9w86Sa3aF6fLSO09BZnT3Y1LSPNhaXNK647XN2L0idHDEDcmdDXREIDRupNoECQFCv/0EUecHxPXjRVg86aSUsvbCCkhuKoJCY7GpB7xJdza96oeAFmLUGrkMHeqKHzg3CWTxkLEkDyNnR36yMilA=') );
-        var rv = b2der( buf, { pos: 0, end: buf.byteLength } );
-        expect(rv).toEqual( [ new Uint8Array(1), [ '1.2.840.113549.1.1.1', null ], jasmine.any(ArrayBuffer) ] );
-        rv = b2der( rv[2], { pos: 0, end: rv[2].byteLength } );
-        expect(rv).toEqual( [ new Uint8Array(1), jasmine.any(Uint8Array), new Uint8Array([1,0,1]), jasmine.any(Uint8Array), jasmine.any(Uint8Array), jasmine.any(Uint8Array), jasmine.any(Uint8Array), jasmine.any(Uint8Array), jasmine.any(Uint8Array) ] );
-        // version
-        expect(            rv[0]     ).toEqual(new Uint8Array(1));
-        // N
-        expect( btoa( b2s( rv[1] ) ) ).toEqual('ANhqanvyA6bx1ILuWA8H3f/oV1ghZOd3WsIyFjli8bDrdPqAjIqQJL0uvU6spB/QPsj44y5pXswAXdekus6Jibe1N+/0swA/5lDpQro7PTTOWc3Gv5WSm1F8GJrmoR8raaNzHG/D+iv1Rm/0Pr0unUKUUKwWRc6X4VclhwiihuL5');
-        // E
-        expect(            rv[2]     ).toEqual(new Uint8Array([1,0,1]));
-        // D
-        expect( btoa( b2s( rv[3] ) ) ).toEqual('ALHm+NYe4qWwElP3fmgMvZAK/RIzkXE9ilwtNFvEXI5lYGo0llOpnqnt7Czqepi0ZYhsIMUcVZM5kesdPXtfUNcyDPKsh1S9YZFVXFnLz0tMHeQ3NBYaWlwXkokbtVZM5PozAgOtCAc6G1r77hKoJToragRGizycEzPxOjdnXYIB');
-        // P
-        expect( btoa( b2s( rv[4] ) ) ).toEqual('APi1hKLuCgJbVvTmjc732hg3bnzg2zcfdr3YBrBSADKL0eRbsx4l228TmBD4ZXE/+JQjGmOCOSygDen7TERcn5k=');
-        // Q
-        expect( btoa( b2s( rv[5] ) ) ).toEqual('AN7Ci+QUAdwoTle0CfFiKgbrUOKjzv9JYODLicamA0vf9hIchRzpXSnW3JrhYfISfmkKXAwoX7xvp4G/pEwL+mE=');
-        // dP
-        expect( btoa( b2s( rv[6] ) ) ).toEqual('AOSrAChNdCZ2lJzW3ctNVtitHojytJsZ8rLZzEyRGF1g8LplFWrCo96cxVPVDm/xwTtyivCy6p59Ck33H0g7YQE=');
-        // dQ
-        expect( btoa( b2s( rv[7] ) ) ).toEqual('QT9Csl+Z296Cc/XsI6PZI4Wxf3DzpJrdoXp8tI7T0FmdPdjUtI82Fpc0rrjtc3YvSJ0cMQNyZ0NdEQgNG6k2gQ==');
-        // Qi
-        expect( btoa( b2s( rv[8] ) ) ).toEqual('UK//QRR5wfE9eNFWDzppJSy9sIKSG4qgkJjsakHvEl3Nr3qh4AWYtQauQwd6oofODcJZPGQsSQPI2dHfrIyKUA==');
-    });
-
-    it( 'der2b', function () {
-        var rv;
-        der2b( [ new Uint8Array(1), s2b(atob('ANhqanvyA6bx1ILuWA8H3f/oV1ghZOd3WsIyFjli8bDrdPqAjIqQJL0uvU6spB/QPsj44y5pXswAXdekus6Jibe1N+/0swA/5lDpQro7PTTOWc3Gv5WSm1F8GJrmoR8raaNzHG/D+iv1Rm/0Pr0unUKUUKwWRc6X4VclhwiihuL5')),
-                                    s2b(atob('AQAB')),
-                                    s2b(atob('ALHm+NYe4qWwElP3fmgMvZAK/RIzkXE9ilwtNFvEXI5lYGo0llOpnqnt7Czqepi0ZYhsIMUcVZM5kesdPXtfUNcyDPKsh1S9YZFVXFnLz0tMHeQ3NBYaWlwXkokbtVZM5PozAgOtCAc6G1r77hKoJToragRGizycEzPxOjdnXYIB')),
-                                    s2b(atob('APi1hKLuCgJbVvTmjc732hg3bnzg2zcfdr3YBrBSADKL0eRbsx4l228TmBD4ZXE/+JQjGmOCOSygDen7TERcn5k=')),
-                                    s2b(atob('AN7Ci+QUAdwoTle0CfFiKgbrUOKjzv9JYODLicamA0vf9hIchRzpXSnW3JrhYfISfmkKXAwoX7xvp4G/pEwL+mE=')),
-                                    s2b(atob('AOSrAChNdCZ2lJzW3ctNVtitHojytJsZ8rLZzEyRGF1g8LplFWrCo96cxVPVDm/xwTtyivCy6p59Ck33H0g7YQE=')),
-                                    s2b(atob('QT9Csl+Z296Cc/XsI6PZI4Wxf3DzpJrdoXp8tI7T0FmdPdjUtI82Fpc0rrjtc3YvSJ0cMQNyZ0NdEQgNG6k2gQ==')),
-                                    s2b(atob('UK//QRR5wfE9eNFWDzppJSy9sIKSG4qgkJjsakHvEl3Nr3qh4AWYtQauQwd6oofODcJZPGQsSQPI2dHfrIyKUA==')) ], rv = [] );
-        der2b( [ new Uint8Array(1), [ '1.2.840.113549.1.1.1', null ], new Uint8Array(rv).buffer ], rv = [] );
-        expect( btoa( b2s( new Uint8Array(rv) ) ) ).toEqual('MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBANhqanvyA6bx1ILuWA8H3f/oV1ghZOd3WsIyFjli8bDrdPqAjIqQJL0uvU6spB/QPsj44y5pXswAXdekus6Jibe1N+/0swA/5lDpQro7PTTOWc3Gv5WSm1F8GJrmoR8raaNzHG/D+iv1Rm/0Pr0unUKUUKwWRc6X4VclhwiihuL5AgMBAAECgYEAseb41h7ipbASU/d+aAy9kAr9EjORcT2KXC00W8RcjmVgajSWU6meqe3sLOp6mLRliGwgxRxVkzmR6x09e19Q1zIM8qyHVL1hkVVcWcvPS0wd5Dc0FhpaXBeSiRu1Vkzk+jMCA60IBzobWvvuEqglOitqBEaLPJwTM/E6N2ddggECQQD4tYSi7goCW1b05o3O99oYN2584Ns3H3a92AawUgAyi9HkW7MeJdtvE5gQ+GVxP/iUIxpjgjksoA3p+0xEXJ+ZAkEA3sKL5BQB3ChOV7QJ8WIqButQ4qPO/0lg4MuJxqYDS9/2EhyFHOldKdbcmuFh8hJ+aQpcDChfvG+ngb+kTAv6YQJBAOSrAChNdCZ2lJzW3ctNVtitHojytJsZ8rLZzEyRGF1g8LplFWrCo96cxVPVDm/xwTtyivCy6p59Ck33H0g7YQECQEE/QrJfmdvegnP17COj2SOFsX9w86Sa3aF6fLSO09BZnT3Y1LSPNhaXNK647XN2L0idHDEDcmdDXREIDRupNoECQFCv/0EUecHxPXjRVg86aSUsvbCCkhuKoJCY7GpB7xJdza96oeAFmLUGrkMHeqKHzg3CWTxkLEkDyNnR36yMilA=');
-    });
-});
deleted file mode 100644
--- a/node_modules/libp2p-secio/node_modules/webcrypto-shim/webcrypto-shim.js
+++ /dev/null
@@ -1,598 +0,0 @@
-/**
- * @file Web Cryptography API shim
- * @author Artem S Vybornov <vybornov@gmail.com>
- * @license MIT
- */
-module.exports = function webcryptoShim (global) {
-    'use strict';
-
-    if ( typeof Promise !== 'function' )
-        throw "Promise support required";
-
-    var _crypto = global.crypto || global.msCrypto;
-    if ( !_crypto ) return;
-
-    var _subtle = _crypto.subtle || _crypto.webkitSubtle;
-    if ( !_subtle ) return;
-
-    var _Crypto     = global.Crypto || _crypto.constructor || Object,
-        _SubtleCrypto = global.SubtleCrypto || _subtle.constructor || Object,
-        _CryptoKey  = global.CryptoKey || global.Key || Object;
-
-    var isEdge = global.navigator.userAgent.indexOf('Edge/') > -1
-    var isIE    = !!global.msCrypto && !isEdge,
-        isWebkit = !_crypto.subtle && !!_crypto.webkitSubtle;
-    if ( !isIE && !isWebkit ) return;
-
-    function s2a ( s ) {
-        return btoa(s).replace(/\=+$/, '').replace(/\+/g, '-').replace(/\//g, '_');
-    }
-
-    function a2s ( s ) {
-        s += '===', s = s.slice( 0, -s.length % 4 );
-        return atob( s.replace(/-/g, '+').replace(/_/g, '/') );
-    }
-
-    function s2b ( s ) {
-        var b = new Uint8Array(s.length);
-        for ( var i = 0; i < s.length; i++ ) b[i] = s.charCodeAt(i);
-        return b;
-    }
-
-    function b2s ( b ) {
-        if ( b instanceof ArrayBuffer ) b = new Uint8Array(b);
-        return String.fromCharCode.apply( String, b );
-    }
-
-    function alg ( a ) {
-        var r = { 'name': (a.name || a || '').toUpperCase().replace('V','v') };
-        switch ( r.name ) {
-            case 'SHA-1':
-            case 'SHA-256':
-            case 'SHA-384':
-            case 'SHA-512':
-                break;
-            case 'AES-CBC':
-            case 'AES-GCM':
-            case 'AES-KW':
-                if ( a.length ) r['length'] = a.length;
-                break;
-            case 'HMAC':
-                if ( a.hash ) r['hash'] = alg(a.hash);
-                if ( a.length ) r['length'] = a.length;
-                break;
-            case 'RSAES-PKCS1-v1_5':
-                if ( a.publicExponent ) r['publicExponent'] = new Uint8Array(a.publicExponent);
-                if ( a.modulusLength ) r['modulusLength'] = a.modulusLength;
-                break;
-            case 'RSASSA-PKCS1-v1_5':
-            case 'RSA-OAEP':
-                if ( a.hash ) r['hash'] = alg(a.hash);
-                if ( a.publicExponent ) r['publicExponent'] = new Uint8Array(a.publicExponent);
-                if ( a.modulusLength ) r['modulusLength'] = a.modulusLength;
-                break;
-            default:
-                throw new SyntaxError("Bad algorithm name");
-        }
-        return r;
-    };
-
-    function jwkAlg ( a ) {
-        return {
-            'HMAC': {
-                'SHA-1': 'HS1',
-                'SHA-256': 'HS256',
-                'SHA-384': 'HS384',
-                'SHA-512': 'HS512',
-            },
-            'RSASSA-PKCS1-v1_5': {
-                'SHA-1': 'RS1',
-                'SHA-256': 'RS256',
-                'SHA-384': 'RS384',
-                'SHA-512': 'RS512',
-            },
-            'RSAES-PKCS1-v1_5': {
-                '': 'RSA1_5',
-            },
-            'RSA-OAEP': {
-                'SHA-1': 'RSA-OAEP',
-                'SHA-256': 'RSA-OAEP-256',
-            },
-            'AES-KW': {
-                '128': 'A128KW',
-                '192': 'A192KW',
-                '256': 'A256KW',
-            },
-            'AES-GCM': {
-                '128': 'A128GCM',
-                '192': 'A192GCM',
-                '256': 'A256GCM',
-            },
-            'AES-CBC': {
-                '128': 'A128CBC',
-                '192': 'A192CBC',
-                '256': 'A256CBC',
-            },
-        }[a.name][ ( a.hash || {} ).name || a.length || '' ];
-    }
-
-    function b2jwk ( k ) {
-        if ( k instanceof ArrayBuffer || k instanceof Uint8Array ) k = JSON.parse( decodeURIComponent( escape( b2s(k) ) ) );
-        var jwk = { 'kty': k.kty, 'alg': k.alg, 'ext': k.ext || k.extractable };
-        switch ( jwk.kty ) {
-            case 'oct':
-                jwk.k = k.k;
-            case 'RSA':
-                [ 'n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi', 'oth' ].forEach( function ( x ) { if ( x in k ) jwk[x] = k[x] } );
-                break;
-            default:
-                throw new TypeError("Unsupported key type");
-        }
-        return jwk;
-    }
-
-    function jwk2b ( k ) {
-        var jwk = b2jwk(k);
-        if ( isIE ) jwk['extractable'] = jwk.ext, delete jwk.ext;
-        return s2b( unescape( encodeURIComponent( JSON.stringify(jwk) ) ) ).buffer;
-    }
-
-    function pkcs2jwk ( k ) {
-        var info = b2der(k), prv = false;
-        if ( info.length > 2 ) prv = true, info.shift(); // remove version from PKCS#8 PrivateKeyInfo structure
-        var jwk = { 'ext': true };
-        switch ( info[0][0] ) {
-            case '1.2.840.113549.1.1.1':
-                var rsaComp = [ 'n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi' ],
-                    rsaKey  = b2der( info[1] );
-                if ( prv ) rsaKey.shift(); // remove version from PKCS#1 RSAPrivateKey structure
-                for ( var i = 0; i < rsaKey.length; i++ ) {
-                    if ( !rsaKey[i][0] ) rsaKey[i] = rsaKey[i].subarray(1);
-                    jwk[ rsaComp[i] ] = s2a( b2s( rsaKey[i] ) );
-                }
-                jwk['kty'] = 'RSA';
-                break;
-            default:
-                throw new TypeError("Unsupported key type");
-        }
-        return jwk;
-    }
-
-    function jwk2pkcs ( k ) {
-        var key, info = [ [ '', null ] ], prv = false;
-        switch ( k.kty ) {
-            case 'RSA':
-                var rsaComp = [ 'n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi' ],
-                    rsaKey = [];
-                for ( var i = 0; i < rsaComp.length; i++ ) {
-                    if ( !( rsaComp[i] in k ) ) break;
-                    var b = rsaKey[i] = s2b( a2s( k[ rsaComp[i] ] ) );
-                    if ( b[0] & 0x80 ) rsaKey[i] = new Uint8Array(b.length + 1), rsaKey[i].set( b, 1 );
-                }
-                if ( rsaKey.length > 2 ) prv = true, rsaKey.unshift( new Uint8Array([0]) ); // add version to PKCS#1 RSAPrivateKey structure
-                info[0][0] = '1.2.840.113549.1.1.1';
-                key = rsaKey;
-                break;
-            default:
-                throw new TypeError("Unsupported key type");
-        }
-        info.push( new Uint8Array( der2b(key) ).buffer );
-        if ( !prv ) info[1] = { 'tag': 0x03, 'value': info[1] };
-        else info.unshift( new Uint8Array([0]) ); // add version to PKCS#8 PrivateKeyInfo structure
-        return new Uint8Array( der2b(info) ).buffer;
-    }
-
-    var oid2str = { 'KoZIhvcNAQEB': '1.2.840.113549.1.1.1' },
-        str2oid = { '1.2.840.113549.1.1.1': 'KoZIhvcNAQEB' };
-
-    function b2der ( buf, ctx ) {
-        if ( buf instanceof ArrayBuffer ) buf = new Uint8Array(buf);
-        if ( !ctx ) ctx = { pos: 0, end: buf.length };
-
-        if ( ctx.end - ctx.pos < 2 || ctx.end > buf.length ) throw new RangeError("Malformed DER");
-
-        var tag = buf[ctx.pos++],
-            len = buf[ctx.pos++];
-
-        if ( len >= 0x80 ) {
-            len &= 0x7f;
-            if ( ctx.end - ctx.pos < len ) throw new RangeError("Malformed DER");
-            for ( var xlen = 0; len--; ) xlen <<= 8, xlen |= buf[ctx.pos++];
-            len = xlen;
-        }
-
-        if ( ctx.end - ctx.pos < len ) throw new RangeError("Malformed DER");
-
-        var rv;
-
-        switch ( tag ) {
-            case 0x02: // Universal Primitive INTEGER
-                rv = buf.subarray( ctx.pos, ctx.pos += len );
-                break;
-            case 0x03: // Universal Primitive BIT STRING
-                if ( buf[ctx.pos++] ) throw new Error( "Unsupported bit string" );
-                len--;
-            case 0x04: // Universal Primitive OCTET STRING
-                rv = new Uint8Array( buf.subarray( ctx.pos, ctx.pos += len ) ).buffer;
-                break;
-            case 0x05: // Universal Primitive NULL
-                rv = null;
-                break;
-            case 0x06: // Universal Primitive OBJECT IDENTIFIER
-                var oid = btoa( b2s( buf.subarray( ctx.pos, ctx.pos += len ) ) );
-                if ( !( oid in oid2str ) ) throw new Error( "Unsupported OBJECT ID " + oid );
-                rv = oid2str[oid];
-                break;
-            case 0x30: // Universal Constructed SEQUENCE
-                rv = [];
-                for ( var end = ctx.pos + len; ctx.pos < end; ) rv.push( b2der( buf, ctx ) );
-                break;
-            default:
-                throw new Error( "Unsupported DER tag 0x" + tag.toString(16) );
-        }
-
-        return rv;
-    }
-
-    function der2b ( val, buf ) {
-        if ( !buf ) buf = [];
-
-        var tag = 0, len = 0,
-            pos = buf.length + 2;
-
-        buf.push( 0, 0 ); // placeholder
-
-        if ( val instanceof Uint8Array ) {  // Universal Primitive INTEGER
-            tag = 0x02, len = val.length;
-            for ( var i = 0; i < len; i++ ) buf.push( val[i] );
-        }
-        else if ( val instanceof ArrayBuffer ) { // Universal Primitive OCTET STRING
-            tag = 0x04, len = val.byteLength, val = new Uint8Array(val);
-            for ( var i = 0; i < len; i++ ) buf.push( val[i] );
-        }
-        else if ( val === null ) { // Universal Primitive NULL
-            tag = 0x05, len = 0;
-        }
-        else if ( typeof val === 'string' && val in str2oid ) { // Universal Primitive OBJECT IDENTIFIER
-            var oid = s2b( atob( str2oid[val] ) );
-            tag = 0x06, len = oid.length;
-            for ( var i = 0; i < len; i++ ) buf.push( oid[i] );
-        }
-        else if ( val instanceof Array ) { // Universal Constructed SEQUENCE
-            for ( var i = 0; i < val.length; i++ ) der2b( val[i], buf );
-            tag = 0x30, len = buf.length - pos;
-        }
-        else if ( typeof val === 'object' && val.tag === 0x03 && val.value instanceof ArrayBuffer ) { // Tag hint
-            val = new Uint8Array(val.value), tag = 0x03, len = val.byteLength;
-            buf.push(0); for ( var i = 0; i < len; i++ ) buf.push( val[i] );
-            len++;
-        }
-        else {
-            throw new Error( "Unsupported DER value " + val );
-        }
-
-        if ( len >= 0x80 ) {
-            var xlen = len, len = 4;
-            buf.splice( pos, 0, (xlen >> 24) & 0xff, (xlen >> 16) & 0xff, (xlen >> 8) & 0xff, xlen & 0xff );
-            while ( len > 1 && !(xlen >> 24) ) xlen <<= 8, len--;
-            if ( len < 4 ) buf.splice( pos, 4 - len );
-            len |= 0x80;
-        }
-
-        buf.splice( pos - 2, 2, tag, len );
-
-        return buf;
-    }
-
-    function CryptoKey ( key, alg, ext, use ) {
-        Object.defineProperties( this, {
-            _key: {
-                value: key
-            },
-            type: {
-                value: key.type,
-                enumerable: true,
-            },
-            extractable: {
-                value: (ext === undefined) ? key.extractable : ext,
-                enumerable: true,
-            },
-            algorithm: {
-                value: (alg === undefined) ? key.algorithm : alg,
-                enumerable: true,
-            },
-            usages: {
-                value: (use === undefined) ? key.usages : use,
-                enumerable: true,
-            },
-        });
-    }
-
-    function isPubKeyUse ( u ) {
-        return u === 'verify' || u === 'encrypt' || u === 'wrapKey';
-    }
-
-    function isPrvKeyUse ( u ) {
-        return u === 'sign' || u === 'decrypt' || u === 'unwrapKey';
-    }
-
-    [ 'generateKey', 'importKey', 'unwrapKey' ]
-        .forEach( function ( m ) {
-            var _fn = _subtle[m];
-
-            _subtle[m] = function ( a, b, c ) {
-                var args = [].slice.call(arguments),
-                    ka, kx, ku;
-
-                switch ( m ) {
-                    case 'generateKey':
-                        ka = alg(a), kx = b, ku = c;
-                        break;
-                    case 'importKey':
-                        ka = alg(c), kx = args[3], ku = args[4];
-                        if ( a === 'jwk' ) {
-                            b = b2jwk(b);
-                            if ( !b.alg ) b.alg = jwkAlg(ka);
-                            if ( !b.key_ops ) b.key_ops = ( b.kty !== 'oct' ) ? ( 'd' in b ) ? ku.filter(isPrvKeyUse) : ku.filter(isPubKeyUse) : ku.slice();
-                            args[1] = jwk2b(b);
-                        }
-                        break;
-                    case 'unwrapKey':
-                        ka = args[4], kx = args[5], ku = args[6];
-                        args[2] = c._key;
-                        break;
-                }
-
-                if ( m === 'generateKey' && ka.name === 'HMAC' && ka.hash ) {
-                    ka.length = ka.length || { 'SHA-1': 512, 'SHA-256': 512, 'SHA-384': 1024, 'SHA-512': 1024 }[ka.hash.name];
-                    return _subtle.importKey( 'raw', _crypto.getRandomValues( new Uint8Array( (ka.length+7)>>3 ) ), ka, kx, ku );
-                }
-
-                if ( isWebkit && m === 'generateKey' && ka.name === 'RSASSA-PKCS1-v1_5' && ( !ka.modulusLength || ka.modulusLength >= 2048 ) ) {
-                    a = alg(a), a.name = 'RSAES-PKCS1-v1_5', delete a.hash;
-                    return _subtle.generateKey( a, true, [ 'encrypt', 'decrypt' ] )
-                        .then( function ( k ) {
-                            return Promise.all([
-                                _subtle.exportKey( 'jwk', k.publicKey ),
-                                _subtle.exportKey( 'jwk', k.privateKey ),
-                            ]);
-                        })
-                        .then( function ( keys ) {
-                            keys[0].alg = keys[1].alg = jwkAlg(ka);
-                            keys[0].key_ops = ku.filter(isPubKeyUse), keys[1].key_ops = ku.filter(isPrvKeyUse);
-                            return Promise.all([
-                                _subtle.importKey( 'jwk', keys[0], ka, true, keys[0].key_ops ),
-                                _subtle.importKey( 'jwk', keys[1], ka, kx, keys[1].key_ops ),
-                            ]);
-                        })
-                        .then( function ( keys ) {
-                            return {
-                                publicKey: keys[0],
-                                privateKey: keys[1],
-                            };
-                        });
-                }
-
-                if ( ( isWebkit || ( isIE && ( ka.hash || {} ).name === 'SHA-1' ) )
-                        && m === 'importKey' && a === 'jwk' && ka.name === 'HMAC' && b.kty === 'oct' ) {
-                    return _subtle.importKey( 'raw', s2b( a2s(b.k) ), c, args[3], args[4] );
-                }
-
-                if ( isWebkit && m === 'importKey' && ( a === 'spki' || a === 'pkcs8' ) ) {
-                    return _subtle.importKey( 'jwk', pkcs2jwk(b), c, args[3], args[4] );
-                }
-
-                if ( isIE && m === 'unwrapKey' ) {
-                    return _subtle.decrypt( args[3], c, b )
-                        .then( function ( k ) {
-                            return _subtle.importKey( a, k, args[4], args[5], args[6] );
-                        });
-                }
-
-                var op;
-                try {
-                    op = _fn.apply( _subtle, args );
-                }
-                catch ( e ) {
-                    return Promise.reject(e);
-                }
-
-                if ( isIE ) {
-                    op = new Promise( function ( res, rej ) {
-                        op.onabort =
-                        op.onerror =    function ( e ) { rej(e)               };
-                        op.oncomplete = function ( r ) { res(r.target.result) };
-                    });
-                }
-
-                op = op.then( function ( k ) {
-                    if ( ka.name === 'HMAC' ) {
-                        if ( !ka.length ) ka.length = 8 * k.algorithm.length;
-                    }
-                    if ( ka.name.search('RSA') == 0 ) {
-                        if ( !ka.modulusLength ) ka.modulusLength = (k.publicKey || k).algorithm.modulusLength;
-                        if ( !ka.publicExponent ) ka.publicExponent = (k.publicKey || k).algorithm.publicExponent;
-                    }
-                    if ( k.publicKey && k.privateKey ) {
-                        k = {
-                            publicKey: new CryptoKey( k.publicKey, ka, kx, ku.filter(isPubKeyUse) ),
-                            privateKey: new CryptoKey( k.privateKey, ka, kx, ku.filter(isPrvKeyUse) ),
-                        };
-                    }
-                    else {
-                        k = new CryptoKey( k, ka, kx, ku );
-                    }
-                    return k;
-                });
-
-                return op;
-            }
-        });
-
-    [ 'exportKey', 'wrapKey' ]
-        .forEach( function ( m ) {
-            var _fn = _subtle[m];
-
-            _subtle[m] = function ( a, b, c ) {
-                var args = [].slice.call(arguments);
-
-                switch ( m ) {
-                    case 'exportKey':
-                        args[1] = b._key;
-                        break;
-                    case 'wrapKey':
-                        args[1] = b._key, args[2] = c._key;
-                        break;
-                }
-
-                if ( ( isWebkit || ( isIE && ( b.algorithm.hash || {} ).name === 'SHA-1' ) )
-                        && m === 'exportKey' && a === 'jwk' && b.algorithm.name === 'HMAC' ) {
-                    args[0] = 'raw';
-                }
-
-                if ( isWebkit && m === 'exportKey' && ( a === 'spki' || a === 'pkcs8' ) ) {
-                    args[0] = 'jwk';
-                }
-
-                if ( isIE && m === 'wrapKey' ) {
-                    return _subtle.exportKey( a, b )
-                        .then( function ( k ) {
-                            if ( a === 'jwk' ) k = s2b( unescape( encodeURIComponent( JSON.stringify( b2jwk(k) ) ) ) );
-                            return  _subtle.encrypt( args[3], c, k );
-                        });
-                }
-
-                var op;
-                try {
-                    op = _fn.apply( _subtle, args );
-                }
-                catch ( e ) {
-                    return Promise.reject(e);
-                }
-
-                if ( isIE ) {
-                    op = new Promise( function ( res, rej ) {
-                        op.onabort =
-                        op.onerror =    function ( e ) { rej(e)               };
-                        op.oncomplete = function ( r ) { res(r.target.result) };
-                    });
-                }
-
-                if ( m === 'exportKey' && a === 'jwk' ) {
-                    op = op.then( function ( k ) {
-                        if ( ( isWebkit || ( isIE && ( b.algorithm.hash || {} ).name === 'SHA-1' ) )
-                                && b.algorithm.name === 'HMAC') {
-                            return { 'kty': 'oct', 'alg': jwkAlg(b.algorithm), 'key_ops': b.usages.slice(), 'ext': true, 'k': s2a( b2s(k) ) };
-                        }
-                        k = b2jwk(k);
-                        if ( !k.alg ) k['alg'] = jwkAlg(b.algorithm);
-                        if ( !k.key_ops ) k['key_ops'] = ( b.type === 'public' ) ? b.usages.filter(isPubKeyUse) : ( b.type === 'private' ) ? b.usages.filter(isPrvKeyUse) : b.usages.slice();
-                        return k;
-                    });
-                }
-
-                if ( isWebkit && m === 'exportKey' && ( a === 'spki' || a === 'pkcs8' ) ) {
-                    op = op.then( function ( k ) {
-                        k = jwk2pkcs( b2jwk(k) );
-                        return k;
-                    });
-                }
-
-                return op;
-            }
-        });
-
-    [ 'encrypt', 'decrypt', 'sign', 'verify' ]
-        .forEach( function ( m ) {
-            var _fn = _subtle[m];
-
-            _subtle[m] = function ( a, b, c, d ) {
-                if ( isIE && ( !c.byteLength || ( d && !d.byteLength ) ) )
-                    throw new Error("Empy input is not allowed");
-
-                var args = [].slice.call(arguments),
-                    ka = alg(a);
-
-                if ( isIE && m === 'decrypt' && ka.name === 'AES-GCM' ) {
-                    var tl = a.tagLength >> 3;
-                    args[2] = (c.buffer || c).slice( 0, c.byteLength - tl ),
-                    a.tag = (c.buffer || c).slice( c.byteLength - tl );
-                }
-
-                args[1] = b._key;
-
-                var op;
-                try {
-                    op = _fn.apply( _subtle, args );
-                }
-                catch ( e ) {
-                    return Promise.reject(e);
-                }
-
-                if ( isIE ) {
-                    op = new Promise( function ( res, rej ) {
-                        op.onabort =
-                        op.onerror = function ( e ) {
-                            rej(e);
-                        };
-
-                        op.oncomplete = function ( r ) {
-                            var r = r.target.result;
-
-                            if ( m === 'encrypt' && r instanceof AesGcmEncryptResult ) {
-                                var c = r.ciphertext, t = r.tag;
-                                r = new Uint8Array( c.byteLength + t.byteLength );
-                                r.set( new Uint8Array(c), 0 );
-                                r.set( new Uint8Array(t), c.byteLength );
-                                r = r.buffer;
-                            }
-
-                            res(r);
-                        };
-                    });
-                }
-
-                return op;
-            }
-        });
-
-    if ( isIE ) {
-        var _digest = _subtle.digest;
-
-        _subtle['digest'] = function ( a, b ) {
-            if ( !b.byteLength )
-                throw new Error("Empy input is not allowed");
-
-            var op;
-            try {
-                op = _digest.call( _subtle, a, b );
-            }
-            catch ( e ) {
-                return Promise.reject(e);
-            }
-
-            op = new Promise( function ( res, rej ) {
-                op.onabort =
-                op.onerror =    function ( e ) { rej(e)               };
-                op.oncomplete = function ( r ) { res(r.target.result) };
-            });
-
-            return op;
-        };
-
-        global.crypto = Object.create( _crypto, {
-            getRandomValues: { value: function ( a ) { return _crypto.getRandomValues(a) } },
-            subtle:          { value: _subtle },
-        });
-
-        global.CryptoKey = CryptoKey;
-    }
-
-    if ( isWebkit ) {
-        _crypto.subtle = _subtle;
-
-        global.Crypto = _Crypto;
-        global.SubtleCrypto = _SubtleCrypto;
-        global.CryptoKey = CryptoKey;
-    }
-}
--- a/node_modules/libp2p-secio/src/handshake/crypto.js
+++ b/node_modules/libp2p-secio/src/handshake/crypto.js
@@ -64,10 +64,19 @@ exports.identify = (state, msg, callback) => {
   log('1.1 identify')
 
   state.proposalEncoded.in = msg
-  state.proposal.in = pbm.Propose.decode(msg)
+  try {
+    state.proposal.in = pbm.Propose.decode(msg)
+  } catch (err) {
+    return callback(err)
+  }
+
   const pubkey = state.proposal.in.pubkey
 
-  state.key.remote = crypto.keys.unmarshalPublicKey(pubkey)
+  try {
+    state.key.remote = crypto.keys.unmarshalPublicKey(pubkey)
+  } catch(err) {
+    return callback(err)
+  }
 
   PeerId.createFromPubKey(pubkey.toString('base64'), (err, remoteId) => {
     if (err) {
@@ -133,8 +142,17 @@ exports.selectProtocols = (state, callback) => {
 exports.verify = (state, msg, callback) => {
   log('2.1. verify')
 
-  state.exchange.in = pbm.Exchange.decode(msg)
+  try {
+    state.exchange.in = pbm.Exchange.decode(msg)
+  } catch (err) {
+    return callback(err)
+  }
+
   state.ephemeralKey.remote = state.exchange.in.epubkey
+  if (!state.ephemeralKey.remote) {
+    return callback(new Error('remote key required!'))
+  }
+
 
   const selectionIn = Buffer.concat([
     state.proposalEncoded.in,
