patch-package
--- a/node_modules/libp2p-switch/src/connection.js
+++ b/node_modules/libp2p-switch/src/connection.js
@@ -69,9 +69,8 @@ class ConnectionManager {
             ], (err, peerInfo) => {
               if (err) {
                 return muxedConn.end(() => {
-                  if (peerInfo) {
-                    setImmediate(() => this.switch.emit('peer-mux-closed', peerInfo))
-                  }
+                  this.switch.cleanUpConn(cryptoPI)
+                  setImmediate(() => this.switch.emit('peer-mux-closed', peerInfo || cryptoPI))
                   callback(err, null)
                 })
               }
@@ -105,6 +104,7 @@ class ConnectionManager {
             peerInfo = this.switch._peerBook.put(peerInfo)
 
             muxedConn.on('close', () => {
+              this.switch.cleanUpConn(peerInfo)
               delete this.switch.muxedConns[b58Str]
               peerInfo.disconnect()
               peerInfo = this.switch._peerBook.put(peerInfo)
--- a/node_modules/libp2p-switch/src/dial.js
+++ b/node_modules/libp2p-switch/src/dial.js
@@ -104,6 +104,9 @@ class Dialer {
     ], (err, connection) => {
       if ((err && err.message === UNEXPECTED_END) || err === true) {
         log('Connection dropped for %s', this.peerInfo.id.toB58String())
+        if (!connection) {
+          return this.switch.cleanUpConn(this.peerInfo, this.callback)
+        }
         return this.callback(null, null)
       }
 
@@ -181,7 +184,7 @@ class Dialer {
       return callback(null, null)
     }
     if (baseConnection) {
-      this.switch.conns[b58Id] = undefined
+      // this.switch.conns[b58Id] = undefined
       return callback(null, baseConnection)
     }
 
@@ -251,12 +254,17 @@ class Dialer {
     connection.setPeerInfo(this.peerInfo)
     this._attemptMuxerUpgrade(connection, b58Id, (err, muxer) => {
       if (err && !this.protocol) {
-        this.switch.conns[b58Id] = connection
+        // this.switch.conns[b58Id] = connection
         return callback(null, null)
       }
 
       if (err) {
         log('muxer upgrade failed with error', err)
+        if (err.message.includes('stream ended')) {
+          return this.switch.cleanUpConn(this.peerInfo, () => {
+            callback(null, null)
+          })
+        }
         // couldn't upgrade to Muxer, it is ok, use the existing connection
         return callback(null, connection)
       }
@@ -287,6 +295,12 @@ class Dialer {
     const msDialer = new multistream.Dialer()
     handleSafe(msDialer, connection, (err) => {
       if (err) {
+        if (err.message.includes('stream ended')) {
+          return this.switch.cleanUpConn(this.peerInfo, () => {
+            callback(new Error('multistream not supported'))
+          })
+        }
+
         return callback(new Error('multistream not supported'))
       }
 
@@ -314,6 +328,7 @@ class Dialer {
           }
 
           muxedConn.once('close', () => {
+            this.switch.cleanUpConn(this.peerInfo)
             delete this.switch.muxedConns[b58Id]
             this.peerInfo.disconnect()
             this.switch._peerInfo.disconnect()
@@ -383,6 +398,7 @@ class Dialer {
         }
 
         const conn = observeConnection(transport, null, _conn, this.switch.observer)
+        this.switch.conns[b58Id] = conn
         callback(null, conn)
       })
     }
--- a/node_modules/libp2p-switch/src/index.js
+++ b/node_modules/libp2p-switch/src/index.js
@@ -14,6 +14,14 @@ const Stats = require('./stats')
 const assert = require('assert')
 const Errors = require('./errors')
 
+const debug = require('debug')
+const log = debug('libp2p:switch')
+
+
+const PeerInfo = require('peer-info')
+const pull = require('pull-stream')
+const Connection = require('interface-connection').Connection
+
 class Switch extends EE {
   constructor (peerInfo, peerBook, options) {
     super()
@@ -103,6 +111,23 @@ class Switch extends EE {
     }, callback)
   }
 
+  /**
+   * Cleanup connection for peer
+   * 
+   * @param {PeerInfo} peer 
+   */
+  cleanUpConn(peerInfo, callback) {
+    callback = callback || (() => {})
+    const id = peerInfo.id.toB58String()
+    const conn = this.conns[id]
+    if (conn) {
+      log(`cleaning up connection for peer ${id}`)
+      conn.close(() => {
+        delete this.conns[id]
+      })
+    }
+  }
+
   /**
    * Stops all services and connections for the Switch
    *
--- a/node_modules/libp2p-switch/src/limit-dialer/index.js
+++ b/node_modules/libp2p-switch/src/limit-dialer/index.js
@@ -23,6 +23,7 @@ class LimitDialer {
     this.perPeerLimit = perPeerLimit
     this.dialTimeout = dialTimeout
     this.queues = new Map()
+    this.dialing = new Map()
   }
 
   /**
@@ -74,6 +75,12 @@ class LimitDialer {
    */
   dialSingle (peer, transport, addr, token, callback) {
     const ps = peer.toB58String()
+    const addrStr = addr.toString()
+    if (this.dialing.has(addrStr)) {
+      return callback(new Error(`dial already in progress for ${addrStr}`))
+    }
+    this.dialing.set(addrStr, true)
+
     log('dialSingle: %s:%s', ps, addr.toString())
     let q
     if (this.queues.has(ps)) {
@@ -83,7 +90,10 @@ class LimitDialer {
       this.queues.set(ps, q)
     }
 
-    q.push(transport, addr, token, callback)
+    q.push(transport, addr, token, (err, res) => {
+      this.dialing.delete(addrStr)
+      callback(err, res)
+    })
   }
 }
 
--- a/node_modules/libp2p-switch/src/transport.js
+++ b/node_modules/libp2p-switch/src/transport.js
@@ -12,7 +12,7 @@ const defaultPerPeerRateLimit = 8
 
 // the amount of time a single dial has to succeed
 // TODO this should be exposed as a option
-const dialTimeout = 30 * 1000
+const dialTimeout = 60 * 1000
 
 /**
  * Manages the transports for the switch. This simplifies dialing and listening across
